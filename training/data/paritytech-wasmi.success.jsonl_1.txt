pub fn fuel_consumed(&self) -> u64 {
        self.total.wrapping_sub(self.remaining)
    }
fn metered_i32_add() {
    let wasm = wat2wasm(
        r#"
        (module
            (func (export "test") (param $a i32) (param $b i32) (result i32)
                (i32.add
                    (local.get $a)
                    (local.get $b)
                )
            )
        )
    "#,
    );
    let (mut store, func) = default_test_setup(&wasm);
    let func = func.typed::<(i32, i32), i32>(&store).unwrap();
    // No fuel -> no success.
    assert_out_of_fuel(func.call(&mut store, (1, 2)));
    assert_eq!(store.fuel_consumed(), Some(0));
    // Now add too little fuel for a start, so still no success.
    store.add_fuel(1).unwrap();
    assert_out_of_fuel(func.call(&mut store, (1, 2)));
    assert_eq!(store.fuel_consumed(), Some(0));
    // Now add enough fuel, so execution should succeed.
    store.add_fuel(10).unwrap();
    assert_success(func.call(&mut store, (1, 2)));
    assert_eq!(store.fuel_consumed(), Some(5));
}