pub fn fuel_consumed(&self) -> Option<u64> {
        self.inner.fuel_consumed()
    }
fn manual_fuel() {
    let mut config = Config::new();
    config.consume_fuel(true);
    let engine = Engine::new(&config).unwrap();
    let mut store = Store::new(&engine, ());
    store.add_fuel(10_000).unwrap();
    assert_eq!(store.fuel_consumed(), Some(0));
    assert_eq!(store.fuel_remaining(), Some(10_000));
    assert_eq!(store.consume_fuel(1).unwrap(), 9_999);
    assert_eq!(store.fuel_consumed(), Some(1));
    assert_eq!(store.fuel_remaining(), Some(9_999));
    assert!(store.consume_fuel(10_000).is_err());
    assert_eq!(store.consume_fuel(999).unwrap(), 9_000);
    assert!(store.consume_fuel(10_000).is_err());
    assert_eq!(store.consume_fuel(8998).unwrap(), 2);
    assert!(store.consume_fuel(3).is_err());
    assert_eq!(store.consume_fuel(1).unwrap(), 1);
    assert_eq!(store.consume_fuel(1).unwrap(), 0);
    assert_eq!(store.consume_fuel(0).unwrap(), 0);
    assert_eq!(store.fuel_remaining(), Some(0));
}