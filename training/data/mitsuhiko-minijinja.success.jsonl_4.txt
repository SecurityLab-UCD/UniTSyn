pub fn render_str(
        slf: PyRef<'_, Self>,
        source: &str,
        name: Option<&str>,
        ctx: Option<&PyDict>,
    ) -> PyResult<String> {
        bind_environment(slf.as_ptr(), || {
            let ctx = ctx
                .map(|ctx| Value::from_struct_object(DictLikeObject { inner: ctx.into() }))
                .unwrap_or_else(|| context!());
            slf.inner
                .lock()
                .unwrap()
                .env
                .render_named_str(name.unwrap_or("<string>"), source, ctx)
                .map_err(to_py_error)
        })
    }
fn test_keep_trailing_newlines() {
    let mut env = Environment::new();
    env.add_template("foo.txt", "blub\r\n").unwrap();
    assert_eq!(env.render_str("blub\r\n", ()).unwrap(), "blub");

    env.set_keep_trailing_newline(true);
    env.add_template("foo_keep.txt", "blub\r\n").unwrap();
    assert_eq!(
        env.get_template("foo.txt").unwrap().render(()).unwrap(),
        "blub"
    );
    assert_eq!(
        env.get_template("foo_keep.txt")
            .unwrap()
            .render(())
            .unwrap(),
        "blub\r\n"
    );
    assert_eq!(env.render_str("blub\r\n", ()).unwrap(), "blub\r\n");
}