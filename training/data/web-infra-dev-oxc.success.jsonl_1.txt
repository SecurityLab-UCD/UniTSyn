pub fn join(self, rhs: Self) -> Self {
        let must_return = self.must_return() && rhs.must_return();
        let explicit = self.may_return_explicit() || rhs.may_return_explicit();
        let implicit = self.may_return_implicit() || rhs.may_return_implicit();

        Self::create(must_return, explicit, implicit)
    }
fn absolute_path() {
    let f = super::fixture();
    let resolver = Resolver::new(ResolveOptions {
        alias: vec![(f.join("foo").to_str().unwrap().to_string(), vec![AliasValue::Ignore])],
        modules: vec![f.clone().to_str().unwrap().to_string()],
        ..ResolveOptions::default()
    });
    let resolution = resolver.resolve(&f, "foo/index");
    assert_eq!(resolution, Err(ResolveError::Ignored(f.join("foo"))));
}