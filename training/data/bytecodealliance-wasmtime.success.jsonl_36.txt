pub fn is_none(&self) -> bool {
        self.0.is_reserved_value()
    }
fn fill_externref_tables_via_api() -> anyhow::Result<()> {
    let mut cfg = Config::new();
    cfg.wasm_reference_types(true);
    let engine = Engine::new(&cfg)?;
    let mut store = Store::new(&engine, ());

    let table_ty = TableType::new(ValType::ExternRef, 10, None);
    let table = Table::new(&mut store, table_ty, Val::ExternRef(None))?;

    for i in 0..10 {
        assert!(table
            .get(&mut store, i)
            .unwrap()
            .unwrap_externref()
            .is_none());
    }

    table.fill(
        &mut store,
        2,
        Val::ExternRef(Some(ExternRef::new(42_usize))),
        4,
    )?;

    for i in (0..2).chain(7..10) {
        assert!(table
            .get(&mut store, i)
            .unwrap()
            .unwrap_externref()
            .is_none());
    }
    for i in 2..6 {
        assert_eq!(
            *table
                .get(&mut store, i)
                .unwrap()
                .unwrap_externref()
                .unwrap()
                .data()
                .downcast_ref::<usize>()
                .unwrap(),
            42
        );
    }

    Ok(())
}