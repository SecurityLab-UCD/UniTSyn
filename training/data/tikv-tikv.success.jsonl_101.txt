fn get_name(&self) -> &'static str {
        self.name
    }
fn test_watch_global_config_on_closed_server() {
    let (mut server, client) = new_test_server_and_client(ReadableDuration::millis(100));
    let global_items = vec![("test1", "val1"), ("test2", "val2"), ("test3", "val3")];
    let items_clone = global_items.clone();

    let client = Arc::new(client);
    let cli_clone = client.clone();
    use futures::StreamExt;
    let background_worker = Builder::new("background").thread_count(1).create();
    background_worker.spawn_async_task(async move {
        match cli_clone.watch_global_config("global".into(), 0) {
            Ok(mut stream) => {
                let mut i: usize = 0;
                while let Some(grpc_response) = stream.next().await {
                    match grpc_response {
                        Ok(r) => {
                            for item in r.get_changes() {
                                assert_eq!(item.get_name(), items_clone[i].0);
                                assert_eq!(
                                    from_utf8(item.get_payload()).unwrap(),
                                    items_clone[i].1
                                );
                                i += 1;
                            }
                        }
                        Err(err) => panic!("failed to get stream, err: {:?}", err),
                    }
                }
            }
            Err(err) => {
                if !err.to_string().contains("UNAVAILABLE") {
                    // Not 14-UNAVAILABLE
                    panic!("other error occur {:?}", err)
                }
            }
        }
    });

    if let Err(err) = futures::executor::block_on(
        client.store_global_config(
            "global".into(),
            global_items
                .iter()
                .map(|(name, value)| {
                    let mut item = GlobalConfigItem::default();
                    item.set_name(name.to_string());
                    item.set_payload(value.as_bytes().into());
                    item
                })
                .collect::<Vec<GlobalConfigItem>>(),
        ),
    ) {
        panic!("error occur {:?}", err);
    }

    thread::sleep(Duration::from_millis(100));
    server.stop();
}