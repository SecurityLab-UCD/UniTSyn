pub fn roundtrip<F>(float: F, buffer: &mut [u8]) -> Result<(), String>
where
    F: RawFloat + ToLexical + std::str::FromStr + std::string::ToString,
{
    let bytes = float.to_lexical(buffer);
    let string = unsafe { std::str::from_utf8_unchecked(bytes) };
    let roundtrip = string.parse::<F>().map_err(|_| float.to_string())?;
    let is_equal = if float.is_nan() {
        roundtrip.is_nan()
    } else {
        float == roundtrip
    };
    if !is_equal {
        return Err(float.to_string());
    }
    Ok(())
}
fn u128_pow10_test() {
    let values: &[u128] = &[
        0,
        1,
        5,
        9,
        10,
        11,
        15,
        99,
        100,
        101,
        105,
        999,
        1000,
        1001,
        1005,
        9999,
        10000,
        10001,
        10005,
        99999,
        100000,
        100001,
        100005,
        999999,
        1000000,
        1000001,
        1000005,
        9999999,
        10000000,
        10000001,
        10000005,
        99999999,
        100000000,
        100000001,
        100000005,
        999999999,
        1000000000,
        1000000001,
        1000000005,
        9999999999,
        10000000000,
        10000000001,
        10000000005,
        99999999999,
        100000000000,
        100000000001,
        100000000005,
        999999999999,
        1000000000000,
        1000000000001,
        1000000000005,
        9999999999999,
        10000000000000,
        10000000000001,
        10000000000005,
        99999999999999,
        100000000000000,
        100000000000001,
        100000000000005,
        999999999999999,
        1000000000000000,
        1000000000000001,
        1000000000000005,
        9999999999999999,
        10000000000000000,
        10000000000000001,
        10000000000000005,
        99999999999999999,
        100000000000000000,
        100000000000000001,
        100000000000000005,
        999999999999999999,
        1000000000000000000,
        1000000000000000001,
        1000000000000000005,
        9999999999999999999,
        10000000000000000000,
        10000000000000000001,
        10000000000000000005,
        99999999999999999999,
        100000000000000000000,
        100000000000000000001,
        100000000000000000005,
        999999999999999999999,
        1000000000000000000000,
        1000000000000000000001,
        1000000000000000000005,
        9999999999999999999999,
        10000000000000000000000,
        10000000000000000000001,
        10000000000000000000005,
        99999999999999999999999,
        100000000000000000000000,
        100000000000000000000001,
        100000000000000000000005,
        999999999999999999999999,
        1000000000000000000000000,
        1000000000000000000000001,
        1000000000000000000000005,
        9999999999999999999999999,
        10000000000000000000000000,
        10000000000000000000000001,
        10000000000000000000000005,
        99999999999999999999999999,
        100000000000000000000000000,
        100000000000000000000000001,
        100000000000000000000000005,
        999999999999999999999999999,
        1000000000000000000000000000,
        1000000000000000000000000001,
        1000000000000000000000000005,
        9999999999999999999999999999,
        10000000000000000000000000000,
        10000000000000000000000000001,
        10000000000000000000000000005,
        99999999999999999999999999999,
        100000000000000000000000000000,
        100000000000000000000000000001,
        100000000000000000000000000005,
        999999999999999999999999999999,
        1000000000000000000000000000000,
        1000000000000000000000000000001,
        1000000000000000000000000000005,
        9999999999999999999999999999999,
        10000000000000000000000000000000,
        10000000000000000000000000000001,
        10000000000000000000000000000005,
        99999999999999999999999999999999,
        100000000000000000000000000000000,
        100000000000000000000000000000001,
        100000000000000000000000000000005,
        999999999999999999999999999999999,
        1000000000000000000000000000000000,
        1000000000000000000000000000000001,
        1000000000000000000000000000000005,
        9999999999999999999999999999999999,
        10000000000000000000000000000000000,
        10000000000000000000000000000000001,
        10000000000000000000000000000000005,
        99999999999999999999999999999999999,
        100000000000000000000000000000000000,
        100000000000000000000000000000000001,
        100000000000000000000000000000000005,
        999999999999999999999999999999999999,
        1000000000000000000000000000000000000,
        1000000000000000000000000000000000001,
        1000000000000000000000000000000000005,
        9999999999999999999999999999999999999,
        10000000000000000000000000000000000000,
        10000000000000000000000000000000000001,
        10000000000000000000000000000000000005,
        99999999999999999999999999999999999999,
        100000000000000000000000000000000000000,
        100000000000000000000000000000000000001,
        100000000000000000000000000000000000005,
    ];
    for &i in values.iter() {
        assert_eq!(i, roundtrip(i));
    }
}