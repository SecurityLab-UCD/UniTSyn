pub fn fuel(&self) -> Option<u64> {
        self.fuel
    }
fn test_macro_fuel() {
    let mut env = Environment::new();
    assert_eq!(env.fuel(), None);
    env.set_fuel(Some(100));
    assert_eq!(env.fuel(), Some(100));
    env.add_template(
        "test",
        "
        {% macro x() %}{% for item in range(5) %}...{% endfor %}{% endmacro %}
        {% for count in range(macros) %}{{ x() }}{% endfor %}
    ",
    )
    .unwrap();
    let t = env.get_template("test").unwrap();

    // this should succeed
    t.render(context!(macros => 3)).unwrap();

    // but running more macros should not
    let err = t.render(context!(macros => 5)).unwrap_err();
    assert_eq!(err.kind(), ErrorKind::OutOfFuel);
}