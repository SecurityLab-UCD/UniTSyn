pub fn is_some(&self) -> bool {
        !self.0.is_reserved_value()
    }
fn create_get_set_funcref_tables_via_api() -> anyhow::Result<()> {
    let mut cfg = Config::new();
    cfg.wasm_reference_types(true);
    let engine = Engine::new(&cfg)?;
    let mut store = Store::new(&engine, ());

    let table_ty = TableType::new(ValType::FuncRef, 10, None);
    let init = Val::FuncRef(Some(Func::wrap(&mut store, || {})));
    let table = Table::new(&mut store, table_ty, init)?;

    assert!(table.get(&mut store, 5).unwrap().unwrap_funcref().is_some());
    table.set(&mut store, 5, Val::FuncRef(None))?;
    assert!(table.get(&mut store, 5).unwrap().unwrap_funcref().is_none());

    Ok(())
}