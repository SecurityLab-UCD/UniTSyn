pub fn as_bytes(&self) -> Option<BytesRef<'_>> {
        EvaluableRef::borrow_scalar_value(self)
    }
fn test_load_global_config() {
    let (mut _server, client) = new_test_server_and_client(ReadableDuration::millis(100));
    let global_items = vec![("test1", "val1"), ("test2", "val2"), ("test3", "val3")];
    let check_items = global_items.clone();
    if let Err(err) = futures::executor::block_on(
        client.store_global_config(
            String::from("global"),
            global_items
                .iter()
                .map(|(name, value)| {
                    let mut item = GlobalConfigItem::default();
                    item.set_name(name.to_string());
                    item.set_payload(value.as_bytes().into());
                    item
                })
                .collect::<Vec<GlobalConfigItem>>(),
        ),
    ) {
        panic!("error occur {:?}", err);
    }

    let (res, revision) =
        futures::executor::block_on(client.load_global_config(String::from("global"))).unwrap();
    assert!(
        res.iter()
            .zip(check_items)
            .all(|(item1, item2)| item1.name == item2.0 && item1.payload == item2.1.as_bytes())
    );
    assert_eq!(revision, 3);
}