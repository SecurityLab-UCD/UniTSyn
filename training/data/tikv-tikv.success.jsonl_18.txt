pub fn unwrap(self) -> T {
        match self {
            Res::Ok(t) | Res::Truncated(t) | Res::Overflow(t) => t,
        }
    }
fn snapshot_with_writes() {
    let db = default_engine();

    db.engine.put(b"a", b"aa").unwrap();

    let snapshot = db.engine.snapshot();

    assert_eq!(snapshot.get_value(b"a").unwrap().unwrap(), b"aa");

    db.engine.put(b"b", b"bb").unwrap();

    assert!(snapshot.get_value(b"b").unwrap().is_none());
    assert_eq!(db.engine.get_value(b"b").unwrap().unwrap(), b"bb");

    db.engine.delete(b"a").unwrap();

    assert_eq!(snapshot.get_value(b"a").unwrap().unwrap(), b"aa");
    assert!(db.engine.get_value(b"a").unwrap().is_none());
}