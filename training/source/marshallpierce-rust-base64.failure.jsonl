{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests/tests.rs::roundtrip_decode_trailing_10_bytes", "test": "fn roundtrip_decode_trailing_10_bytes() {\n    // This is a special case because we decode 8 byte blocks of input at a time as much as we can,\n    // ideally unrolled to 32 bytes at a time, in stages 1 and 2. Since we also write a u64's worth\n    // of bytes (8) to the output, we always write 2 garbage bytes that then will be overwritten by\n    // the NEXT block. However, if the next block only contains 2 bytes, it will decode to 1 byte,\n    // and therefore be too short to cover up the trailing 2 garbage bytes. Thus, we have stage 3\n    // to handle that case.\n\n    for num_quads in 0..25 {\n        let mut s: String = \"ABCD\".repeat(num_quads);\n        s.push_str(\"EFGHIJKLZg\");\n\n        let engine = GeneralPurpose::new(&alphabet::STANDARD, NO_PAD);\n        let decoded = engine.decode(&s).unwrap();\n        assert_eq!(num_quads * 3 + 7, decoded.len());\n\n        assert_eq!(s, engine.encode(&decoded));\n    }\n}", "error": "Not Definition Found"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}", "error": "Not Definition Found"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}", "error": "Not Definition Found"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}", "error": "Not Definition Found"}
