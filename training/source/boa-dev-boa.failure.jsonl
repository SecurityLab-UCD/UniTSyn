{"test_id": "boa-dev-boa/boa-dev-boa-6008683/boa_gc/src/test/weak.rs::eph_self_referential", "test": "fn eph_self_referential() {\n    #[derive(Trace, Finalize, Clone)]\n    struct InnerCell {\n        inner: GcRefCell<Option<Ephemeron<InnerCell, TestCell>>>,\n    }\n    #[derive(Trace, Finalize, Clone)]\n    struct TestCell {\n        inner: Gc<InnerCell>,\n    }\n    run_test(|| {\n        let root = TestCell {\n            inner: Gc::new(InnerCell {\n                inner: GcRefCell::new(None),\n            }),\n        };\n        let root_size = std::mem::size_of::<GcBox<InnerCell>>();\n\n        Harness::assert_exact_bytes_allocated(root_size);\n\n        {\n            // Generate a self-referential ephemeron\n            let eph = Ephemeron::new(&root.inner, root.clone());\n            *root.inner.inner.borrow_mut() = Some(eph.clone());\n\n            assert!(eph.value().is_some());\n            Harness::assert_exact_bytes_allocated(80);\n        }\n\n        *root.inner.inner.borrow_mut() = None;\n\n        force_collect();\n\n        Harness::assert_exact_bytes_allocated(root_size);\n    });\n}", "error": "Not Definition Found"}
{"test_id": "boa-dev-boa/boa-dev-boa-6008683/boa_gc/src/test/weak.rs::eph_self_referential_chain", "test": "fn eph_self_referential_chain() {\n    #[derive(Trace, Finalize, Clone)]\n    struct TestCell {\n        inner: Gc<GcRefCell<Option<Ephemeron<u8, TestCell>>>>,\n    }\n    run_test(|| {\n        let root = Gc::new(GcRefCell::new(None));\n        let root_size = std::mem::size_of::<GcBox<GcRefCell<Option<Ephemeron<u8, TestCell>>>>>();\n\n        Harness::assert_exact_bytes_allocated(root_size);\n\n        let watched = Gc::new(0);\n\n        {\n            // Generate a self-referential loop of weak and non-weak pointers\n            let chain1 = TestCell {\n                inner: Gc::new(GcRefCell::new(None)),\n            };\n            let chain2 = TestCell {\n                inner: Gc::new(GcRefCell::new(None)),\n            };\n\n            let eph_start = Ephemeron::new(&watched, chain1.clone());\n            let eph_chain2 = Ephemeron::new(&watched, chain2.clone());\n\n            *chain1.inner.borrow_mut() = Some(eph_chain2.clone());\n            *chain2.inner.borrow_mut() = Some(eph_start.clone());\n\n            *root.borrow_mut() = Some(eph_start.clone());\n\n            force_collect();\n\n            assert!(eph_start.value().is_some());\n            assert!(eph_chain2.value().is_some());\n            Harness::assert_exact_bytes_allocated(240);\n        }\n\n        *root.borrow_mut() = None;\n\n        force_collect();\n\n        drop(watched);\n\n        force_collect();\n\n        Harness::assert_exact_bytes_allocated(root_size);\n    });\n}", "error": "Not Definition Found"}
