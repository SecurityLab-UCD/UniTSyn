{"test_id": "unicode-rs-unicode-normalization/unicode-rs-unicode-normalization-22675c1/tests/cjk_compat_variants.rs::test_cjk_compat_variants_with_hangul", "test": "fn test_cjk_compat_variants_with_hangul() {\n    assert_eq!(\n        \"중국어 (홍콩)\"\n            .chars()\n            .cjk_compat_variants()\n            .collect::<String>(),\n        \"중국어 (홍콩)\"\n    );\n}\n", "error": "Not Definition Found"}
{"test_id": "unicode-rs-unicode-normalization/unicode-rs-unicode-normalization-22675c1/tests/tests.rs::test_quick_check", "test": "fn test_quick_check() {\n    use unicode_normalization::__test_api::quick_check;\n    for test in NORMALIZATION_TESTS {\n        assert!(quick_check::is_nfc(test.nfc));\n        assert!(quick_check::is_nfd(test.nfd));\n        assert!(quick_check::is_nfkc(test.nfkc));\n        assert!(quick_check::is_nfkd(test.nfkd));\n        if test.nfc != test.nfd {\n            assert!(!quick_check::is_nfc(test.nfd));\n            assert!(!quick_check::is_nfd(test.nfc));\n        }\n        if test.nfkc != test.nfc {\n            assert!(!quick_check::is_nfkc(test.nfc));\n            assert!(quick_check::is_nfc(test.nfkc));\n        }\n        if test.nfkd != test.nfd {\n            assert!(!quick_check::is_nfkd(test.nfd));\n            assert!(quick_check::is_nfd(test.nfkd));\n        }\n    }\n}", "error": "Not Definition Found"}
{"test_id": "unicode-rs-unicode-normalization/unicode-rs-unicode-normalization-22675c1/tests-gen/streaming.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let stream_safe = input.chars().stream_safe().collect::<String>();\n    let mut value = Rc::new(RefCell::new(0));\n    let counter = Counter {\n        iter: stream_safe.chars(),\n        value: Rc::clone(&mut value),\n    };\n    for _ in counter.nfc() {\n        assert!(*value.borrow() <= MAX_NONSTARTERS + 1);\n        *value.borrow_mut() = 0;\n    }\n}", "error": "Not Definition Found"}
{"test_id": "unicode-rs-unicode-normalization/unicode-rs-unicode-normalization-22675c1/tests-gen/unicode-normalization.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    assert_ne!(is_nfc_quick(input.chars()), from_bool(!is_nfc(&input)));\n    assert_ne!(is_nfd_quick(input.chars()), from_bool(!is_nfd(&input)));\n    assert_ne!(is_nfkc_quick(input.chars()), from_bool(!is_nfkc(&input)));\n    assert_ne!(is_nfkd_quick(input.chars()), from_bool(!is_nfkd(&input)));\n    assert_ne!(\n        is_nfc_stream_safe_quick(input.chars()),\n        from_bool(!is_nfc_stream_safe(&input))\n    );\n    assert_ne!(\n        is_nfd_stream_safe_quick(input.chars()),\n        from_bool(!is_nfd_stream_safe(&input))\n    );\n    let nfc = input.chars().nfc().collect::<String>();\n    assert_eq!(nfc.is_empty(), input.is_empty());\n    assert_ne!(is_nfc_quick(nfc.chars()), IsNormalized::No);\n    assert!(is_nfc(&nfc));\n    let nfd = input.chars().nfd().collect::<String>();\n    assert!(nfd.len() >= nfc.len());\n    assert_ne!(is_nfd_quick(nfd.chars()), IsNormalized::No);\n    assert!(is_nfd(&nfd));\n    let nfkc = input.chars().nfkc().collect::<String>();\n    assert_eq!(nfkc.is_empty(), input.is_empty());\n    assert_ne!(is_nfkc_quick(nfkc.chars()), IsNormalized::No);\n    assert!(is_nfkc(&nfkc));\n    let nfkd = input.chars().nfkd().collect::<String>();\n    assert!(nfkd.len() >= nfkc.len());\n    assert_ne!(is_nfkd_quick(nfkd.chars()), IsNormalized::No);\n    assert!(is_nfkd(&nfkd));\n    let nfc_ss = nfc.chars().stream_safe().collect::<String>();\n    assert!(nfc_ss.len() >= nfc.len());\n    assert_ne!(is_nfc_stream_safe_quick(nfc_ss.chars()), IsNormalized::No);\n    assert!(is_nfc_stream_safe(&nfc_ss));\n    let nfd_ss = nfd.chars().stream_safe().collect::<String>();\n    assert!(nfd_ss.len() >= nfd.len());\n    assert_ne!(is_nfd_stream_safe_quick(nfd_ss.chars()), IsNormalized::No);\n    assert!(is_nfd_stream_safe(&nfd_ss));\n    let ss_nfc = input.chars().stream_safe().nfc().collect::<String>();\n    assert_eq!(ss_nfc.is_empty(), input.is_empty());\n    assert_ne!(is_nfc_stream_safe_quick(ss_nfc.chars()), IsNormalized::No);\n    assert!(is_nfc_stream_safe(&ss_nfc));\n    let ss_nfd = input.chars().stream_safe().nfd().collect::<String>();\n    assert_eq!(ss_nfd.is_empty(), input.is_empty());\n    assert_ne!(is_nfd_stream_safe_quick(ss_nfd.chars()), IsNormalized::No);\n    assert!(is_nfd_stream_safe(&ss_nfd));\n}", "error": "Not Definition Found"}
