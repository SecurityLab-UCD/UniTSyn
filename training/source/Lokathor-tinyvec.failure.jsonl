{"test_id": "Lokathor-tinyvec/Lokathor-tinyvec-6e1bbaf/tests/arrayvec.rs::ArrayVec_drain", "test": "fn ArrayVec_drain() {\n  let mut av: ArrayVec<[i32; 10]> = Default::default();\n  av.push(1);\n  av.push(2);\n  av.push(3);\n\n  assert_eq!(Vec::from_iter(av.clone().drain(..)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().drain(..2)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().drain(..3)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().drain(..=1)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().drain(..=2)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().drain(0..)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(av.clone().drain(1..)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().drain(0..2)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().drain(0..3)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(av.clone().drain(1..2)), vec![2]);\n  assert_eq!(Vec::from_iter(av.clone().drain(1..3)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().drain(0..=1)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().drain(0..=2)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(av.clone().drain(1..=1)), vec![2]);\n  assert_eq!(Vec::from_iter(av.clone().drain(1..=2)), vec![2, 3]);\n}", "error": "Not Definition Found"}
{"test_id": "Lokathor-tinyvec/Lokathor-tinyvec-6e1bbaf/tests/arrayvec.rs::ArrayVec_splice", "test": "fn ArrayVec_splice() {\n  let mut av: ArrayVec<[i32; 10]> = Default::default();\n  av.push(1);\n  av.push(2);\n  av.push(3);\n\n  // splice returns the same things as drain\n  assert_eq!(Vec::from_iter(av.clone().splice(.., None)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().splice(..2, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().splice(..3, None)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().splice(..=1, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().splice(..=2, None)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().splice(0.., None)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(av.clone().splice(1.., None)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().splice(0..2, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().splice(0..3, None)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(av.clone().splice(1..2, None)), vec![2]);\n  assert_eq!(Vec::from_iter(av.clone().splice(1..3, None)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(av.clone().splice(0..=1, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(av.clone().splice(0..=2, None)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(av.clone().splice(1..=1, None)), vec![2]);\n  assert_eq!(Vec::from_iter(av.clone().splice(1..=2, None)), vec![2, 3]);\n\n  // splice removes the same things as drain\n  let mut av2 = av.clone();\n  av2.splice(.., None);\n  assert_eq!(av2, array_vec![]);\n\n  let mut av2 = av.clone();\n  av2.splice(..2, None);\n  assert_eq!(av2, array_vec![3]);\n\n  let mut av2 = av.clone();\n  av2.splice(..3, None);\n  assert_eq!(av2, array_vec![]);\n\n  let mut av2 = av.clone();\n  av2.splice(..=1, None);\n  assert_eq!(av2, array_vec![3]);\n  let mut av2 = av.clone();\n  av2.splice(..=2, None);\n  assert_eq!(av2, array_vec![]);\n\n  let mut av2 = av.clone();\n  av2.splice(0.., None);\n  assert_eq!(av2, array_vec![]);\n  let mut av2 = av.clone();\n  av2.splice(1.., None);\n  assert_eq!(av2, array_vec![1]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..2, None);\n  assert_eq!(av2, array_vec![3]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..3, None);\n  assert_eq!(av2, array_vec![]);\n  let mut av2 = av.clone();\n  av2.splice(1..2, None);\n  assert_eq!(av2, array_vec![1, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..3, None);\n  assert_eq!(av2, array_vec![1]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..=1, None);\n  assert_eq!(av2, array_vec![3]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..=2, None);\n  assert_eq!(av2, array_vec![]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..=1, None);\n  assert_eq!(av2, array_vec![1, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..=2, None);\n  assert_eq!(av2, array_vec![1]);\n\n  // splice adds the elements correctly\n  let mut av2 = av.clone();\n  av2.splice(.., 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(..2, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(..3, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(..=1, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(..=2, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(0.., 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(1.., 4..=6);\n  assert_eq!(av2, array_vec![1, 4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..2, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..3, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..2, 4..=6);\n  assert_eq!(av2, array_vec![1, 4, 5, 6, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..3, 4..=6);\n  assert_eq!(av2, array_vec![1, 4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..=1, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(0..=2, 4..=6);\n  assert_eq!(av2, array_vec![4, 5, 6]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..=1, 4..=6);\n  assert_eq!(av2, array_vec![1, 4, 5, 6, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..=2, 4..=6);\n  assert_eq!(av2, array_vec![1, 4, 5, 6]);\n\n  // splice adds the elements correctly when the replacement is smaller\n  let mut av2 = av.clone();\n  av2.splice(.., Some(4));\n  assert_eq!(av2, array_vec![4]);\n\n  let mut av2 = av.clone();\n  av2.splice(..2, Some(4));\n  assert_eq!(av2, array_vec![4, 3]);\n\n  let mut av2 = av.clone();\n  av2.splice(1.., Some(4));\n  assert_eq!(av2, array_vec![1, 4]);\n\n  let mut av2 = av.clone();\n  av2.splice(1..=1, Some(4));\n  assert_eq!(av2, array_vec![1, 4, 3]);\n}", "error": "Not Definition Found"}
{"test_id": "Lokathor-tinyvec/Lokathor-tinyvec-6e1bbaf/tests/arrayvec.rs::ArrayVec_try_from_slice", "test": "fn ArrayVec_try_from_slice() {\n  use std::convert::TryFrom;\n\n  let nums = [1, 2, 3, 4];\n\n  let empty: Result<ArrayVec<[i32; 2]>, _> = ArrayVec::try_from(&nums[..0]);\n  assert!(empty.is_ok());\n  assert_eq!(empty.unwrap().as_slice(), &[]);\n\n  let fits: Result<ArrayVec<[i32; 2]>, _> = ArrayVec::try_from(&nums[..2]);\n  assert!(fits.is_ok());\n  assert_eq!(fits.unwrap().as_slice(), &[1, 2]);\n\n  let doesnt_fit: Result<ArrayVec<[i32; 2]>, _> =\n    ArrayVec::try_from(&nums[..4]);\n  assert!(doesnt_fit.is_err());\n}", "error": "Not Definition Found"}
{"test_id": "Lokathor-tinyvec/Lokathor-tinyvec-6e1bbaf/tests/tinyvec.rs::TinyVec_drain", "test": "fn TinyVec_drain() {\n  let mut tv: TinyVec<[i32; 10]> = Default::default();\n  tv.push(1);\n  tv.push(2);\n  tv.push(3);\n\n  assert_eq!(Vec::from_iter(tv.clone().drain(..)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().drain(..2)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(..3)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().drain(..=1)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(..=2)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().drain(0..)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(1..)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().drain(0..2)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(0..3)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(1..2)), vec![2]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(1..3)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().drain(0..=1)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(0..=2)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(1..=1)), vec![2]);\n  assert_eq!(Vec::from_iter(tv.clone().drain(1..=2)), vec![2, 3]);\n}", "error": "Not Definition Found"}
{"test_id": "Lokathor-tinyvec/Lokathor-tinyvec-6e1bbaf/tests/tinyvec.rs::TinyVec_splice", "test": "fn TinyVec_splice() {\n  let mut tv: TinyVec<[i32; 10]> = Default::default();\n  tv.push(1);\n  tv.push(2);\n  tv.push(3);\n\n  // splice returns the same things as drain\n  assert_eq!(Vec::from_iter(tv.clone().splice(.., None)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().splice(..2, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(..3, None)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().splice(..=1, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(..=2, None)), vec![1, 2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().splice(0.., None)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(1.., None)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().splice(0..2, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(0..3, None)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(1..2, None)), vec![2]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(1..3, None)), vec![2, 3]);\n\n  assert_eq!(Vec::from_iter(tv.clone().splice(0..=1, None)), vec![1, 2]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(0..=2, None)), vec![1, 2, 3]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(1..=1, None)), vec![2]);\n  assert_eq!(Vec::from_iter(tv.clone().splice(1..=2, None)), vec![2, 3]);\n\n  // splice removes the same things as drain\n  let mut tv2 = tv.clone();\n  tv2.splice(.., None);\n  assert_eq!(tv2, tiny_vec![]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..2, None);\n  assert_eq!(tv2, tiny_vec![3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..3, None);\n  assert_eq!(tv2, tiny_vec![]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..=1, None);\n  assert_eq!(tv2, tiny_vec![3]);\n  let mut tv2 = tv.clone();\n  tv2.splice(..=2, None);\n  assert_eq!(tv2, tiny_vec![]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0.., None);\n  assert_eq!(tv2, tiny_vec![]);\n  let mut tv2 = tv.clone();\n  tv2.splice(1.., None);\n  assert_eq!(tv2, tiny_vec![1]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..2, None);\n  assert_eq!(tv2, tiny_vec![3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..3, None);\n  assert_eq!(tv2, tiny_vec![]);\n  let mut tv2 = tv.clone();\n  tv2.splice(1..2, None);\n  assert_eq!(tv2, tiny_vec![1, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..3, None);\n  assert_eq!(tv2, tiny_vec![1]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..=1, None);\n  assert_eq!(tv2, tiny_vec![3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..=2, None);\n  assert_eq!(tv2, tiny_vec![]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..=1, None);\n  assert_eq!(tv2, tiny_vec![1, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..=2, None);\n  assert_eq!(tv2, tiny_vec![1]);\n\n  // splice adds the elements correctly\n  let mut tv2 = tv.clone();\n  tv2.splice(.., 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..2, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..3, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..=1, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..=2, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0.., 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1.., 4..=6);\n  assert_eq!(tv2, tiny_vec![1, 4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..2, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..3, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..2, 4..=6);\n  assert_eq!(tv2, tiny_vec![1, 4, 5, 6, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..3, 4..=6);\n  assert_eq!(tv2, tiny_vec![1, 4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..=1, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(0..=2, 4..=6);\n  assert_eq!(tv2, tiny_vec![4, 5, 6]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..=1, 4..=6);\n  assert_eq!(tv2, tiny_vec![1, 4, 5, 6, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..=2, 4..=6);\n  assert_eq!(tv2, tiny_vec![1, 4, 5, 6]);\n\n  // splice adds the elements correctly when the replacement is smaller\n  let mut tv2 = tv.clone();\n  tv2.splice(.., Some(4));\n  assert_eq!(tv2, tiny_vec![4]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(..2, Some(4));\n  assert_eq!(tv2, tiny_vec![4, 3]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1.., Some(4));\n  assert_eq!(tv2, tiny_vec![1, 4]);\n\n  let mut tv2 = tv.clone();\n  tv2.splice(1..=1, Some(4));\n  assert_eq!(tv2, tiny_vec![1, 4, 3]);\n}", "error": "Not Definition Found"}
{"test_id": "Lokathor-tinyvec/Lokathor-tinyvec-6e1bbaf/tests/tinyvec.rs::TinyVec_from_slice_impl", "test": "fn TinyVec_from_slice_impl() {\n  let bigger_slice: [u8; 11] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let tinyvec: TinyVec<[u8; 10]> = TinyVec::Heap((&bigger_slice[..]).into());\n  assert_eq!(TinyVec::from(&bigger_slice[..]), tinyvec);\n\n  let smaller_slice: [u8; 5] = [0, 1, 2, 3, 4];\n  let tinyvec: TinyVec<[u8; 10]> = TinyVec::Inline(ArrayVec::from_array_len(\n    [0, 1, 2, 3, 4, 0, 0, 0, 0, 0],\n    5,\n  ));\n  assert_eq!(TinyVec::from(&smaller_slice[..]), tinyvec);\n\n  let same_size: [u8; 4] = [0, 1, 2, 3];\n  let tinyvec: TinyVec<[u8; 4]> =\n    TinyVec::Inline(ArrayVec::from_array_len(same_size, 4));\n  assert_eq!(TinyVec::from(&same_size[..]), tinyvec);\n}", "error": "Not Definition Found"}
