{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic.rs::factor_test", "test": "fn factor_test() {\n  assert_eq!(factor(\"3\"), Ok((\"\", 3)));\n  assert_eq!(factor(\" 12\"), Ok((\"\", 12)));\n  assert_eq!(factor(\"537  \"), Ok((\"\", 537)));\n  assert_eq!(factor(\"  24   \"), Ok((\"\", 24)));\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic_ast.rs::factor", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic.rs::term_test", "test": "fn term_test() {\n  assert_eq!(term(\" 12 *2 /  3\"), Ok((\"\", 8)));\n  assert_eq!(term(\" 2* 3  *2 *2 /  3\"), Ok((\"\", 8)));\n  assert_eq!(term(\" 48 /  3/2\"), Ok((\"\", 8)));\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/benchmarks/benches/arithmetic.rs::term", "code": "fn term(input: &[u8]) -> IResult<&[u8], i64> {\n  let (input, init) = factor(input)?;\n  fold_many0(\n    pair(one_of(\"*/\"), factor),\n    move || init,\n    |acc, (op, val)| {\n      if op == '*' {\n        acc * val\n      } else {\n        acc / val\n      }\n    },\n  )(input)\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic.rs::expr_test", "test": "fn expr_test() {\n  assert_eq!(expr(\" 1 +  2 \"), Ok((\"\", 3)));\n  assert_eq!(expr(\" 12 + 6 - 4+  3\"), Ok((\"\", 17)));\n  assert_eq!(expr(\" 1 + 2*3 + 4\"), Ok((\"\", 11)));\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/benchmarks/benches/arithmetic.rs::expr", "code": "fn expr(input: &[u8]) -> IResult<&[u8], i64> {\n  let (input, init) = term(input)?;\n  fold_many0(\n    pair(one_of(\"+-\"), term),\n    move || init,\n    |acc, (op, val)| {\n      if op == '+' {\n        acc + val\n      } else {\n        acc - val\n      }\n    },\n  )(input)\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic.rs::parens_test", "test": "fn parens_test() {\n  assert_eq!(expr(\" (  2 )\"), Ok((\"\", 2)));\n  assert_eq!(expr(\" 2* (  3 + 4 ) \"), Ok((\"\", 14)));\n  assert_eq!(expr(\"  2*2 / ( 5 - 1) + 3\"), Ok((\"\", 4)));\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/benchmarks/benches/arithmetic.rs::expr", "code": "fn expr(input: &[u8]) -> IResult<&[u8], i64> {\n  let (input, init) = term(input)?;\n  fold_many0(\n    pair(one_of(\"+-\"), term),\n    move || init,\n    |acc, (op, val)| {\n      if op == '+' {\n        acc + val\n      } else {\n        acc - val\n      }\n    },\n  )(input)\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic_ast.rs::factor_test", "test": "fn factor_test() {\n  assert_eq!(\n    factor(\"  3  \").map(|(i, x)| (i, format!(\"{:?}\", x))),\n    Ok((\"\", String::from(\"3\")))\n  );\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/src/combinator/mod.rs::map", "code": "pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>\nwhere\n  F: Parser<I, O1, E>,\n  G: FnMut(O1) -> O2,\n{\n  move |input: I| {\n    let (input, o1) = parser.parse(input)?;\n    Ok((input, f(o1)))\n  }\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic_ast.rs::term_test", "test": "fn term_test() {\n  assert_eq!(\n    term(\" 3 *  5   \").map(|(i, x)| (i, format!(\"{:?}\", x))),\n    Ok((\"\", String::from(\"(3 * 5)\")))\n  );\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/src/combinator/mod.rs::map", "code": "pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>\nwhere\n  F: Parser<I, O1, E>,\n  G: FnMut(O1) -> O2,\n{\n  move |input: I| {\n    let (input, o1) = parser.parse(input)?;\n    Ok((input, f(o1)))\n  }\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic_ast.rs::expr_test", "test": "fn expr_test() {\n  assert_eq!(\n    expr(\" 1 + 2 *  3 \").map(|(i, x)| (i, format!(\"{:?}\", x))),\n    Ok((\"\", String::from(\"(1 + (2 * 3))\")))\n  );\n  assert_eq!(\n    expr(\" 1 + 2 *  3 / 4 - 5 \").map(|(i, x)| (i, format!(\"{:?}\", x))),\n    Ok((\"\", String::from(\"((1 + ((2 * 3) / 4)) - 5)\")))\n  );\n  assert_eq!(\n    expr(\" 72 / 2 / 3 \").map(|(i, x)| (i, format!(\"{:?}\", x))),\n    Ok((\"\", String::from(\"((72 / 2) / 3)\")))\n  );\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/src/combinator/mod.rs::map", "code": "pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>\nwhere\n  F: Parser<I, O1, E>,\n  G: FnMut(O1) -> O2,\n{\n  move |input: I| {\n    let (input, o1) = parser.parse(input)?;\n    Ok((input, f(o1)))\n  }\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/arithmetic_ast.rs::parens_test", "test": "fn parens_test() {\n  assert_eq!(\n    expr(\" ( 1 + 2 ) *  3 \").map(|(i, x)| (i, format!(\"{:?}\", x))),\n    Ok((\"\", String::from(\"([(1 + 2)] * 3)\")))\n  );\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/src/combinator/mod.rs::map", "code": "pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>\nwhere\n  F: Parser<I, O1, E>,\n  G: FnMut(O1) -> O2,\n{\n  move |input: I| {\n    let (input, o1) = parser.parse(input)?;\n    Ok((input, f(o1)))\n  }\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/css.rs::parse_color", "test": "fn parse_color() {\n  assert_eq!(\n    hex_color(\"#2F14DF\"),\n    Ok((\n      \"\",\n      Color {\n        red: 47,\n        green: 20,\n        blue: 223,\n      }\n    ))\n  );\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/css.rs::hex_color", "code": "fn hex_color(input: &str) -> IResult<&str, Color> {\n  let (input, _) = tag(\"#\")(input)?;\n  let (input, (red, green, blue)) = tuple((hex_primary, hex_primary, hex_primary))(input)?;\n\n  Ok((input, Color { red, green, blue }))\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/escaped.rs::test_escaped", "test": "fn test_escaped() {\n  assert_eq!(esc(\"abcd\"), Err(Err::Error((\"abcd\", ErrorKind::Escaped))));\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/escaped.rs::esc", "code": "fn esc(s: &str) -> IResult<&str, &str, (&str, ErrorKind)> {\n  escaped(digit1, '\\\\', one_of(\"\\\"n\\\\\"))(s)\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/issues.rs::take_till_issue", "test": "fn take_till_issue() {\n  use nom::bytes::streaming::take_till;\n\n  fn nothing(i: &[u8]) -> IResult<&[u8], &[u8]> {\n    take_till(|_| true)(i)\n  }\n\n  assert_eq!(nothing(b\"\"), Err(Err::Incomplete(Needed::new(1))));\n  assert_eq!(nothing(b\"abc\"), Ok((&b\"abc\"[..], &b\"\"[..])));\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/issues.rs::nothing", "code": "fn nothing(i: &[u8]) -> IResult<&[u8], &[u8]> {\n    take_till(|_| true)(i)\n  }", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/issues.rs::issue_655", "test": "fn issue_655() {\n  use nom::character::streaming::{line_ending, not_line_ending};\n  fn twolines(i: &str) -> IResult<&str, (&str, &str)> {\n    let (i, l1) = not_line_ending(i)?;\n    let (i, _) = line_ending(i)?;\n    let (i, l2) = not_line_ending(i)?;\n    let (i, _) = line_ending(i)?;\n\n    Ok((i, (l1, l2)))\n  }\n\n  assert_eq!(twolines(\"foo\\nbar\\n\"), Ok((\"\", (\"foo\", \"bar\"))));\n  assert_eq!(twolines(\"féo\\nbar\\n\"), Ok((\"\", (\"féo\", \"bar\"))));\n  assert_eq!(twolines(\"foé\\nbar\\n\"), Ok((\"\", (\"foé\", \"bar\"))));\n  assert_eq!(twolines(\"foé\\r\\nbar\\n\"), Ok((\"\", (\"foé\", \"bar\"))));\n}\n\n#[cf", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/issues.rs::twolines", "code": "fn twolines(i: &str) -> IResult<&str, (&str, &str)> {\n    let (i, l1) = not_line_ending(i)?;\n    let (i, _) = line_ending(i)?;\n    let (i, l2) = not_line_ending(i)?;\n    let (i, _) = line_ending(i)?;\n\n    Ok((i, (l1, l2)))\n  }", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/json.rs::json_string", "test": "fn json_string() {\n  assert_eq!(string(\"\\\"\\\"\"), Ok((\"\", \"\".to_string())));\n  assert_eq!(string(\"\\\"abc\\\"\"), Ok((\"\", \"abc\".to_string())));\n  assert_eq!(\n    string(\"\\\"abc\\\\\\\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\\\t\\\\u0001\\\\u2014\\u{2014}def\\\"\"),\n    Ok((\"\", \"abc\\\"\\\\/\\x08\\x0C\\n\\r\\t\\x01——def\".to_string())),\n  );\n  assert_eq!(string(\"\\\"\\\\uD83D\\\\uDE10\\\"\"), Ok((\"\", \"😐\".to_string())));\n\n  assert!(string(\"\\\"\").is_err());\n  assert!(string(\"\\\"abc\").is_err());\n  assert!(string(\"\\\"\\\\\\\"\").is_err());\n  assert!(string(\"\\\"\\\\u123\\\"\").is_err());\n  assert!(string(\"\\\"\\\\uD800\\\"\").is_err());\n  assert!(string(\"\\\"\\\\uD800\\\\uD800\\\"\").is_err());\n  assert!(string(\"\\\"\\\\uDC00\\\"\").is_err());\n}\n\n#[tes", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/json.rs::string", "code": "fn string(input: &str) -> IResult<&str, String> {\n  delimited(\n    char('\"'),\n    fold_many0(character, String::new, |mut string, c| {\n      string.push(c);\n      string\n    }),\n    char('\"'),\n  )(input)\n}", "docstring": null}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/multiline.rs::read_lines_test", "test": "fn read_lines_test() {\n  let res = Ok((\"\", vec![\"Duck\", \"Dog\", \"Cow\"]));\n\n  assert_eq!(read_lines(\"Duck\\nDog\\nCow\\n\"), res);\n  assert_eq!(read_lines(\"Duck\\nDog\\nCow\"), res);\n}", "code_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests/multiline.rs::read_lines", "code": "pub fn read_lines(input: &str) -> IResult<&str, Vec<&str>> {\n  many0(read_line)(input)\n}", "docstring": null}
