{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_error.rs::test_second_document_syntax_error", "test": "fn test_second_document_syntax_error() {\n    let yaml = indoc! {\"\n        ---\n        0\n        ---\n        ]\n    \"};\n\n    let mut de = Deserializer::from_str(yaml);\n    let first_doc = de.next().unwrap();\n    let result = <usize as serde::Deserialize>::deserialize(first_doc);\n    assert_eq!(0, result.unwrap());\n\n    let second_doc = de.next().unwrap();\n    let result = <usize as serde::Deserialize>::deserialize(second_doc);\n    let expected =\n        \"did not find expected node content at line 4 column 1, while parsing a block node\";\n    assert_eq!(expected, result.unwrap_err().to_string());\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_serde.rs::test_default", "test": "fn test_default() {\n    assert_eq!(Value::default(), Value::Null);\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_serde.rs::test_char", "test": "fn test_char() {\n    let ch = '.';\n    let yaml = indoc! {\"\n        '.'\n    \"};\n    assert_eq!(yaml, serde_yaml::to_string(&ch).unwrap());\n\n    let ch = '#';\n    let yaml = indoc! {\"\n        '#'\n    \"};\n    assert_eq!(yaml, serde_yaml::to_string(&ch).unwrap());\n\n    let ch = '-';\n    let yaml = indoc! {\"\n        '-'\n    \"};\n    assert_eq!(yaml, serde_yaml::to_string(&ch).unwrap());\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_serde.rs::test_map_key_value", "test": "fn test_map_key_value() {\n    struct Map;\n\n    impl serde::Serialize for Map {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            // Test maps which do not serialize using serialize_entry.\n            let mut map = serializer.serialize_map(Some(1))?;\n            map.serialize_key(\"k\")?;\n            map.serialize_value(\"v\")?;\n            map.end()\n        }\n    }\n\n    let yaml = indoc! {\"\n        k: v\n    \"};\n    assert_eq!(yaml, serde_yaml::to_string(&Map).unwrap());\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_value.rs::test_digits", "test": "fn test_digits() {\n    let num_string = serde_yaml::from_str::<Value>(\"01\").unwrap();\n    assert!(num_string.is_string());\n}", "error": "Not Definition Found"}
