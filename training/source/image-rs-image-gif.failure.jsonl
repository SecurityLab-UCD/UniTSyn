{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests/check_testimages.rs::render_images", "test": "fn render_images() {\n    process_images(|path| {\n        let mut decoder = gif::DecodeOptions::new();\n        decoder.set_color_output(gif::ColorOutput::RGBA);\n        let file = File::open(path)?;\n        let mut decoder = decoder.read_info(file)?;\n        let mut crc = Crc32::new();\n        while let Some(frame) = decoder.read_next_frame()? {\n            // First sanity check:\n            assert_eq!(\n                frame.buffer.len(), \n                frame.width as usize\n                * frame.height as usize\n                * 4\n            );\n            crc.update(&*frame.buffer);\n        }\n        Ok(crc.checksum())\n    })\n}", "error": "Not Definition Found"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests/decode.rs::frame_consistency_is_configurable", "test": "fn frame_consistency_is_configurable() {\n    let image = create_image_with_oob_frames();\n\n    {\n        let options = DecodeOptions::new();\n        let mut data = image.as_slice();\n        let mut decoder = options.clone().read_info(&mut data).unwrap();\n        assert!(decoder.read_next_frame().is_ok());\n        assert!(decoder.read_next_frame().is_ok());\n    }\n\n    {\n        let mut options = DecodeOptions::new();\n        options.check_frame_consistency(true);\n        let mut data = image.as_slice();\n        let mut decoder = options.clone().read_info(&mut data).unwrap();\n        assert!(decoder.read_next_frame().is_ok());\n        assert!(decoder.read_next_frame().is_err());\n    }\n\n    {\n        let mut options = DecodeOptions::new();\n        options.check_frame_consistency(false);\n        let mut data = image.as_slice();\n        let mut decoder = options.clone().read_info(&mut data).unwrap();\n        assert!(decoder.read_next_frame().is_ok());\n        assert!(decoder.read_next_frame().is_ok());\n    }\n}", "error": "Not Definition Found"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests/decode.rs::check_for_end_code_is_configurable", "test": "fn check_for_end_code_is_configurable() {\n    // In this particular image, the image data of the 62nd frame has no end code.\n    let image: &[u8] = include_bytes!(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/tests/samples/gifplayer-muybridge.gif\"));\n\n    {\n        let options = DecodeOptions::new();\n        let mut decoder = options.clone().read_info(&image[..]).unwrap();\n        for _ in 0..61 {\n            assert!(decoder.read_next_frame().is_ok());\n        }\n        assert!(decoder.read_next_frame().is_ok());\n    }\n\n    {\n        let mut options = DecodeOptions::new();\n        options.check_lzw_end_code(true);\n        let mut decoder = options.clone().read_info(&image[..]).unwrap();\n        for _ in 0..61 {\n            assert!(decoder.read_next_frame().is_ok());\n        }\n        assert!(decoder.read_next_frame().is_err());\n    }\n}", "error": "Not Definition Found"}
