{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/biome_json_support.rs::formatter_biome_json", "test": "fn formatter_biome_json() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_FORMAT.as_bytes());\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), CUSTOM_CONFIGURATION_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--line-width\"),\n                (\"10\"),\n                (\"--indent-style\"),\n                (\"space\"),\n                (\"--indent-size\"),\n                (\"8\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, CUSTOM_CONFIGURATION_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"formatter_biome_json\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/biome_json_support.rs::linter_biome_json", "test": "fn linter_biome_json() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), \"debugger;\\n\".as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(\n        config_path.into(),\n        r#\"{\n  \"linter\": {\n    \"rules\": {\n        \"recommended\": true,\n        \"suspicious\": {\n            \"noDebugger\": \"off\"\n        }\n    }\n  }\n}\"#\n        .as_bytes(),\n    );\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, \"debugger;\\n\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"linter_biome_json\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/biome_json_support.rs::check_biome_json", "test": "fn check_biome_json() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), \"debugger\".as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(\n        config_path.into(),\n        r#\"{\n  \"linter\": {\n    \"rules\": {\n        \"recommended\": true,\n        \"suspicious\": {\n            \"noDebugger\": \"off\"\n        }\n    }\n  }\n}\"#\n        .as_bytes(),\n    );\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, \"debugger;\\n\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"check_biome_json\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/biome_json_support.rs::ci_biome_json", "test": "fn ci_biome_json() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    fs.insert(\n        PathBuf::from(\"biome.json\"),\n        r#\"{\n  \"formatter\": {\n    \"enabled\": false\n  }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let input_file = Path::new(\"file.js\");\n\n    fs.insert(input_file.into(), \"  statement(  )  \".as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"ci\"), input_file.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(input_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, \"  statement(  )  \");\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ci_biome_json\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/config_extends.rs::applies_extended_values_in_current_config", "test": "fn applies_extended_values_in_current_config() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let format = Path::new(\"format.json\");\n    fs.insert(\n        format.into(),\n        r#\"{ \"javascript\": { \"formatter\": { \"quoteStyle\": \"single\" } } }\"#,\n    );\n\n    let rome_json = Path::new(\"biome.json\");\n    fs.insert(\n        rome_json.into(),\n        r#\"{ \"extends\": [\"format.json\"], \"formatter\": { \"lineWidth\": 20 } }\"#,\n    );\n\n    let test_file = Path::new(\"test.js\");\n    fs.insert(\n        test_file.into(),\n        r#\"debugger; const a = [\"lorem\", \"ipsum\"]; \"#,\n    );\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                \"--write\",\n                test_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_extended_values_in_current_config\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_handle_only_included_files", "test": "fn does_handle_only_included_files() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": { \"include\": [\"test.js\"] }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test2)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED);\n\n    drop(file);\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_only_included_files\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_not_handle_included_files_if_overridden_by_ignore", "test": "fn does_not_handle_included_files_if_overridden_by_ignore() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": { \"include\": [\"test.js\", \"test2.js\"], \"ignore\": [\"test.js\"] }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test2)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED);\n\n    drop(file);\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_included_files_if_overridden_by_ignore\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_handle_if_included_in_formatter", "test": "fn does_handle_if_included_in_formatter() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": { \"ignore\": [\"test.js\"] }, \"formatter\": { \"include\": [\"test.js\"] }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"--write\"), test.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_if_included_in_formatter\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_not_handle_included_files_if_overridden_by_ignore_formatter", "test": "fn does_not_handle_included_files_if_overridden_by_ignore_formatter() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"formatter\": { \"include\": [\"test.js\", \"test2.js\"], \"ignore\": [\"test.js\"] }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test2)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED);\n\n    drop(file);\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_included_files_if_overridden_by_ignore_formatter\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_lint_included_files", "test": "fn does_lint_included_files() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": { \"ignore\": [\"test.js\"] }, \"linter\": { \"include\": [\"test.js\"] }\n}\n\"#,\n    );\n\n    let file_path = Path::new(\"test.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, FIX_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_lint_included_files\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_not_handle_included_files_if_overridden_by_ignore_linter", "test": "fn does_not_handle_included_files_if_overridden_by_ignore_linter() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"linter\": { \"include\": [\"test.js\", \"test2.js\"], \"ignore\": [\"test.js\"] }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), FIX_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test2)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FIX_AFTER);\n\n    drop(file);\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FIX_BEFORE);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_included_files_if_overridden_by_ignore_linter\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_organize_imports_of_included_files", "test": "fn does_organize_imports_of_included_files() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"formatter\": { \"enabled\": false },\n  \"linter\": { \"enabled\": false },\n   \"files\": { \"ignore\": [\"test2.js\", \"test.js\"] }, \"organizeImports\": { \"include\": [\"test.js\"] }\n}\n\"#,\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNORGANIZED.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNORGANIZED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test2)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNORGANIZED);\n\n    drop(file);\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, ORGANIZED);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_organize_imports_of_included_files\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/included_files.rs::does_not_handle_included_files_if_overridden_by_organize_imports", "test": "fn does_not_handle_included_files_if_overridden_by_organize_imports() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"formatter\": { \"enabled\": false },\n  \"linter\": { \"enabled\": false },\n  \"organizeImports\": { \"include\": [\"test.js\", \"test2.js\"], \"ignore\": [\"test.js\"] }\n}\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNORGANIZED.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNORGANIZED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(test2)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, ORGANIZED);\n\n    drop(file);\n\n    let mut file = fs\n        .open(test)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNORGANIZED);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_included_files_if_overridden_by_organize_imports\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_not_handle_ignored_file", "test": "fn does_not_handle_ignored_file() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"include\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"ignore\": [\"special/**\"] }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, UNFORMATTED);\n    assert_file_contents(&fs, test, FORMATTED);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_ignored_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_handle_included_file", "test": "fn does_handle_included_file() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"ignore\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"include\": [\"special/**\"] }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, FORMATTED);\n    assert_file_contents(&fs, test, UNFORMATTED);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_included_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_handle_included_file_and_disable_formatter", "test": "fn does_handle_included_file_and_disable_formatter() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"include\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"include\": [\"special/**\"], \"formatter\": { \"enabled\": false } }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, UNFORMATTED);\n    assert_file_contents(&fs, test, FORMATTED);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_included_file_and_disable_formatter\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_include_file_with_different_formatting", "test": "fn does_include_file_with_different_formatting() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"overrides\": [{ \"include\": [\"special/**\"], \"formatter\": { \"lineWidth\": 20 } }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, FORMATTED_LINE_WIDTH_OVERRIDDEN);\n    assert_file_contents(&fs, test, FORMATTED_LINE_WIDTH);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_formatting\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_include_file_with_different_formatting_and_all_of_them", "test": "fn does_include_file_with_different_formatting_and_all_of_them() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"overrides\": [\n    { \"include\": [\"special/**\"], \"formatter\": { \"lineWidth\": 130 } },\n    { \"include\": [\"special/**\"], \"formatter\": { \"lineWidth\": 20 } }\n   ]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, FORMATTED_LINE_WIDTH_OVERRIDDEN);\n    assert_file_contents(&fs, test, FORMATTED_LINE_WIDTH);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_formatting_and_all_of_them\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_include_file_with_different_overrides", "test": "fn does_include_file_with_different_overrides() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"overrides\": [\n    { \"include\": [\"test.js\"], \"formatter\": { \"lineWidth\": 20 } },\n    { \"include\": [\"test2.js\"], \"formatter\": { \"lineWidth\": 20, \"indentStyle\": \"space\" } }\n   ]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test, FORMATTED_LINE_WIDTH_OVERRIDDEN);\n    assert_file_contents(&fs, test2, FORMATTED_LINE_WITH_SPACES);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_overrides\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_include_file_with_different_languages", "test": "fn does_include_file_with_different_languages() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"overrides\": [\n    { \"include\": [\"test.js\"], \"formatter\": { \"lineWidth\": 120 }, \"javascript\": { \"formatter\": { \"quoteStyle\": \"single\" } } },\n    { \"include\": [\"test2.js\"], \"formatter\": { \"lineWidth\": 120, \"indentStyle\": \"space\" }, \"javascript\": { \"formatter\": { \"semicolons\": \"asNeeded\" } } }\n   ]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test, FORMATTED_WITH_SINGLE_QUOTES);\n    assert_file_contents(&fs, test2, FORMATTED_WITH_NO_SEMICOLONS);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_languages\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_formatter.rs::does_include_file_with_different_languages_and_files", "test": "fn does_include_file_with_different_languages_and_files() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"overrides\": [\n    { \"include\": [\"test.js\"], \"formatter\": { \"lineWidth\": 120 }, \"javascript\": { \"formatter\": { \"quoteStyle\": \"single\" } } },\n    {\n        \"include\": [\"test2.js\"],\n        \"formatter\": { \"lineWidth\": 120, \"indentStyle\": \"space\" },\n        \"javascript\": { \"formatter\": { \"semicolons\": \"asNeeded\" } },\n        \"json\": { \"formatter\": { \"indentStyle\": \"space\", \"lineWidth\": 20, \"indentWidth\": 4 } }\n    },\n    {\n        \"include\": [\"test3.json\"],\n        \"formatter\": { \"lineWidth\": 120, \"indentStyle\": \"space\" },\n        \"json\": { \"formatter\": { \"indentStyle\": \"space\", \"lineWidth\": 20, \"indentWidth\": 4 } }\n    }\n  ]\n}\n\n\"#\n            .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), UNFORMATTED_LINE_WIDTH.as_bytes());\n\n    let json_file = Path::new(\"test3.json\");\n    fs.insert(json_file.into(), UNFORMATTED_JSON.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n                json_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test, FORMATTED_WITH_SINGLE_QUOTES);\n    assert_file_contents(&fs, test2, FORMATTED_WITH_NO_SEMICOLONS);\n    assert_file_contents(&fs, json_file, FORMATTED_JSON);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_languages_and_files\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_linter.rs::does_not_handle_ignored_file", "test": "fn does_not_handle_ignored_file() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"include\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"ignore\": [\"special/**\"] }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), FIX_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, FIX_BEFORE);\n    assert_file_contents(&fs, test, FIX_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_ignored_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_linter.rs::does_handle_included_file", "test": "fn does_handle_included_file() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"ignore\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"include\": [\"special/**\"] }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), FIX_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, FIX_AFTER);\n    assert_file_contents(&fs, test, FIX_BEFORE);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_included_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_linter.rs::does_handle_included_file_and_disable_linter", "test": "fn does_handle_included_file_and_disable_linter() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"include\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"include\": [\"special/**\"], \"linter\": { \"enabled\": false } }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), FIX_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, FIX_BEFORE);\n    assert_file_contents(&fs, test, FIX_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_included_file_and_disable_linter\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_linter.rs::does_include_file_with_different_rules", "test": "fn does_include_file_with_different_rules() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"overrides\": [{ \"include\": [\"special/**\"], \"linter\": { \"rules\": {\n    \"suspicious\": { \"noDebugger\": \"off\" }\n  } } }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), DEBUGGER_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), DEBUGGER_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply-unsafe\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, DEBUGGER_BEFORE);\n    assert_file_contents(&fs, test, DEBUGGER_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_rules\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_linter.rs::does_include_file_with_different_linting_and_applies_all_of_them", "test": "fn does_include_file_with_different_linting_and_applies_all_of_them() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n    \"overrides\": [\n        {\n            \"include\": [\n                \"special/**\"\n            ],\n            \"linter\": {\n                \"rules\": {\n                    \"suspicious\": {\n                        \"noDebugger\": \"off\"\n                    }\n                }\n            }\n        },\n        {\n            \"include\": [\n                \"special/**\"\n            ],\n            \"linter\": {\n                \"rules\": {\n                    \"suspicious\": {\n                        \"noDebugger\": \"error\"\n                    }\n                }\n            }\n        }\n    ]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), DEBUGGER_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), DEBUGGER_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply-unsafe\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, DEBUGGER_AFTER);\n    assert_file_contents(&fs, test, DEBUGGER_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_linting_and_applies_all_of_them\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_linter.rs::does_include_file_with_different_overrides", "test": "fn does_include_file_with_different_overrides() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n    \"overrides\": [\n        {\n            \"include\": [\n                \"test.js\"\n            ],\n            \"linter\": {\n                \"rules\": {\n                    \"suspicious\": {\n                        \"noDebugger\": \"off\"\n                    }\n                }\n            }\n        },\n        {\n            \"include\": [\n                \"test2.js\"\n            ],\n            \"linter\": {\n                \"rules\": {\n                    \"complexity\": {\n                        \"useSimpleNumberKeys\": \"error\"\n                    }\n                }\n            }\n        }\n    ]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), DEBUGGER_BEFORE.as_bytes());\n\n    let test2 = Path::new(\"test2.js\");\n    fs.insert(test2.into(), SIMPLE_NUMBERS_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply-unsafe\"),\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test, DEBUGGER_BEFORE);\n    assert_file_contents(&fs, test2, SIMPLE_NUMBERS_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_include_file_with_different_overrides\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_organize_imports.rs::does_not_handle_ignored_file", "test": "fn does_not_handle_ignored_file() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"include\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"ignore\": [\"special/**\"] }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNORGANIZED.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNORGANIZED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                \"--formatter-enabled=false\",\n                \"--linter-enabled=false\",\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, UNORGANIZED);\n    assert_file_contents(&fs, test, ORGANIZED);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_handle_ignored_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_organize_imports.rs::does_handle_included_file", "test": "fn does_handle_included_file() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"ignore\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"include\": [\"special/**\"] }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNORGANIZED.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNORGANIZED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                \"--formatter-enabled=false\",\n                \"--linter-enabled=false\",\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, ORGANIZED);\n    assert_file_contents(&fs, test, UNORGANIZED);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_included_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/cases/overrides_organize_imports.rs::does_handle_included_file_and_disable_organize_imports", "test": "fn does_handle_included_file_and_disable_organize_imports() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        r#\"{\n  \"files\": {\n    \"include\": [\"test.js\", \"special/**\"]\n  },\n  \"overrides\": [{ \"include\": [\"special/**\"], \"organizeImports\": { \"enabled\": false } }]\n}\n\n\"#\n        .as_bytes(),\n    );\n\n    let test = Path::new(\"test.js\");\n    fs.insert(test.into(), UNORGANIZED.as_bytes());\n\n    let test2 = Path::new(\"special/test2.js\");\n    fs.insert(test2.into(), UNORGANIZED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                \"--formatter-enabled=false\",\n                \"--linter-enabled=false\",\n                test.as_os_str().to_str().unwrap(),\n                test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_file_contents(&fs, test2, UNORGANIZED);\n    assert_file_contents(&fs, test, ORGANIZED);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_handle_included_file_and_disable_organize_imports\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::check_help", "test": "fn check_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"check\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"check_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::ok", "test": "fn ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"check.js\");\n    fs.insert(file_path.into(), FORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"check\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::ok_read_only", "test": "fn ok_read_only() {\n    let mut fs = MemoryFileSystem::new_read_only();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"check.js\");\n    fs.insert(file_path.into(), FORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"check\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::apply_ok", "test": "fn apply_ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, FIX_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"apply_ok\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::apply_noop", "test": "fn apply_noop() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_AFTER.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"apply_noop\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::apply_suggested", "test": "fn apply_suggested() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), APPLY_SUGGESTED_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply-unsafe\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, APPLY_SUGGESTED_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"apply_suggested\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::no_lint_if_linter_is_disabled_when_run_apply", "test": "fn no_lint_if_linter_is_disabled_when_run_apply() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(config_path.into(), CONFIG_LINTER_DISABLED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, CHECK_FORMAT_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"no_lint_if_linter_is_disabled_when_run_apply\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::should_disable_a_rule", "test": "fn should_disable_a_rule() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), NO_DEBUGGER_BEFORE.as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(config_path.into(), CONFIG_LINTER_SUPPRESSED_RULE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, NO_DEBUGGER_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_disable_a_rule\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::should_disable_a_rule_group", "test": "fn should_disable_a_rule_group() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(\n        config_path.into(),\n        CONFIG_LINTER_SUPPRESSED_GROUP.as_bytes(),\n    );\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, \"1 >= -0;\\n\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_disable_a_rule_group\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::no_lint_when_file_is_ignored", "test": "fn no_lint_when_file_is_ignored() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_LINTER_IGNORED_FILES.as_bytes());\n\n    let file_path = Path::new(\"test.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, CHECK_FORMAT_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"no_lint_when_file_is_ignored\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/check.rs::no_lint_if_files_are_listed_in_ignore_option", "test": "fn no_lint_if_files_are_listed_in_ignore_option() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_LINTER_AND_FILES_IGNORE.as_bytes());\n\n    let file_path_test1 = Path::new(\"test1.js\");\n    fs.insert(file_path_test1.into(), FIX_BEFORE.as_bytes());\n\n    let file_path_test2 = Path::new(\"test2.js\");\n    fs.insert(file_path_test2.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"check\"),\n                (\"--apply\"),\n                file_path_test1.as_os_str().to_str().unwrap(),\n                file_path_test2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path_test1)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, FIX_BEFORE);\n\n    let mut buffer = String::new();\n    fs.open(file_path_test2)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, CHECK_FORMAT_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"no_lint_if_files_are_listed_in_ignore_option\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/ci.rs::ci_help", "test": "fn ci_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"ci\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ci_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/ci.rs::ok", "test": "fn ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"ci.js\");\n    fs.insert(file_path.into(), FORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"ci\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED);\n\n    if console.out_buffer.len() != 1 {\n        panic!(\"unexpected console content: {:#?}\", console.out_buffer);\n    }\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ci_ok\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/ci.rs::ci_does_not_run_formatter", "test": "fn ci_does_not_run_formatter() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    fs.insert(\n        PathBuf::from(\"biome.json\"),\n        CONFIG_DISABLED_FORMATTER.as_bytes(),\n    );\n\n    let input_file = Path::new(\"file.js\");\n\n    fs.insert(input_file.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"ci\"), input_file.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(input_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ci_does_not_run_formatter\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/ci.rs::ci_does_not_run_formatter_via_cli", "test": "fn ci_does_not_run_formatter_via_cli() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let input_file = Path::new(\"file.js\");\n    fs.insert(input_file.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"ci\"),\n                (\"--formatter-enabled=false\"),\n                input_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(input_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ci_does_not_run_formatter_via_cli\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/ci.rs::doesnt_error_if_no_files_were_processed", "test": "fn doesnt_error_if_no_files_were_processed() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"ci\"), \"--no-errors-on-unmatched\", (\"file.js\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"doesnt_error_if_no_files_were_processed\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::format_help", "test": "fn format_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"format_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::print", "test": "fn print() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"format.js\");\n    fs.insert(file_path.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"formatter_print\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::write", "test": "fn write() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"format.js\");\n    fs.insert(file_path.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED);\n\n    assert_eq!(console.out_buffer.len(), 1);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"formatter_write\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::write_only_files_in_correct_base", "test": "fn write_only_files_in_correct_base() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_to_format = Path::new(\"src/format.js\");\n    fs.insert(\n        file_to_format.into(),\n        <&str>::clone(&UNFORMATTED).as_bytes(),\n    );\n\n    let file_to_not_format = Path::new(\"scripts/format.js\");\n    fs.insert(file_to_not_format.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"--write\"), (\"./src\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_to_format)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, FORMATTED, \"we test the file is formatted\");\n    drop(file);\n    let mut file = fs\n        .open(file_to_not_format)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, UNFORMATTED, \"we test the file is not formatted\");\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"write_only_files_in_correct_base\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::lint_warning", "test": "fn lint_warning() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"format.js\");\n    fs.insert(file_path.into(), LINT_ERROR.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, LINT_ERROR);\n\n    // The console buffer is expected to contain the following message:\n    // 0: \"Formatter would have printed the following content\"\n    // 1: \"Compared 1 files\"\n    assert_eq!(\n        console.out_buffer.len(),\n        2,\n        \"console {:#?}\",\n        console.out_buffer\n    );\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"formatter_lint_warning\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_configuration", "test": "fn applies_custom_configuration() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), CUSTOM_CONFIGURATION_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--line-width\"),\n                (\"10\"),\n                (\"--indent-style\"),\n                (\"space\"),\n                (\"--indent-size\"),\n                (\"8\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, CUSTOM_CONFIGURATION_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_configuration\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_configuration_over_config_file", "test": "fn applies_custom_configuration_over_config_file() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_FORMAT.as_bytes());\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), CUSTOM_CONFIGURATION_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--line-width\"),\n                (\"10\"),\n                (\"--indent-style\"),\n                (\"space\"),\n                (\"--indent-size\"),\n                (\"8\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, CUSTOM_CONFIGURATION_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_configuration_over_config_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_configuration_over_config_file_issue_3175_v1", "test": "fn applies_custom_configuration_over_config_file_issue_3175_v1() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_ISSUE_3175_1.as_bytes());\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), \"import React from 'react';\\n\".as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--quote-style\"),\n                (\"single\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, \"import React from 'react';\\n\");\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_configuration_over_config_file_issue_3175_v1\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_configuration_over_config_file_issue_3175_v2", "test": "fn applies_custom_configuration_over_config_file_issue_3175_v2() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let source = r#\"function f() {\n  return 'hey';\n}\n\"#;\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_ISSUE_3175_2.as_bytes());\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), source.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--indent-style\"),\n                (\"space\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, source);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_configuration_over_config_file_issue_3175_v2\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_jsx_quote_style", "test": "fn applies_custom_jsx_quote_style() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), APPLY_JSX_QUOTE_STYLE_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--jsx-quote-style\"),\n                (\"single\"),\n                (\"--quote-properties\"),\n                (\"preserve\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, APPLY_JSX_QUOTE_STYLE_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_jsx_quote_style\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_quote_style", "test": "fn applies_custom_quote_style() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), APPLY_QUOTE_STYLE_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--quote-style\"),\n                (\"single\"),\n                (\"--quote-properties\"),\n                (\"preserve\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, APPLY_QUOTE_STYLE_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_quote_style\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_trailing_comma", "test": "fn applies_custom_trailing_comma() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), APPLY_TRAILING_COMMA_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--trailing-comma\"),\n                (\"none\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, APPLY_TRAILING_COMMA_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_trailing_comma\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::applies_custom_arrow_parentheses", "test": "fn applies_custom_arrow_parentheses() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), APPLY_ARROW_PARENTHESES_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--arrow-parentheses\"),\n                (\"as-needed\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, APPLY_ARROW_PARENTHESES_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"applies_custom_arrow_parentheses\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::with_semicolons_options", "test": "fn with_semicolons_options() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--semicolons=as-needed\"),\n                (\"--write\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, \"statement()\\n\");\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"with_semicolons_options\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::format_with_configuration", "test": "fn format_with_configuration() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_FORMAT.as_bytes());\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), CUSTOM_FORMAT_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"file.js\"), (\"--write\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, CUSTOM_FORMAT_AFTER);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"format_with_configuration\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::format_stdin_successfully", "test": "fn format_stdin_successfully() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    console\n        .in_buffer\n        .push(\"function f() {return{}}\".to_string());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"--stdin-file-path\"), (\"mock.js\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let message = console\n        .out_buffer\n        .get(0)\n        .expect(\"Console should have written a message\");\n\n    let content = markup_to_string(markup! {\n        {message.content}\n    });\n\n    assert_eq!(content, \"function f() {\\n\\treturn {};\\n}\\n\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"format_stdin_successfully\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::does_not_format_if_disabled", "test": "fn does_not_format_if_disabled() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(file_path.into(), CONFIG_DISABLED_FORMATTER.as_bytes());\n\n    console\n        .in_buffer\n        .push(\"function f() {return{}}\".to_string());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"--stdin-file-path\"), (\"mock.js\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let message = console\n        .out_buffer\n        .get(0)\n        .expect(\"Console should have written a message\");\n\n    let content = markup_to_string(markup! {\n        {message.content}\n    });\n\n    assert_eq!(content, \"function f() {return{}}\".to_string());\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_format_if_disabled\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::does_not_format_ignored_directories", "test": "fn does_not_format_ignored_directories() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        CONFIG_FORMATTER_IGNORED_DIRECTORIES.as_bytes(),\n    );\n\n    const FILES: [(&str, bool); 9] = [\n        (\"test.js\", true),\n        (\"test1.js\", false),\n        (\"test2.js\", false),\n        (\"test3/test.js\", false),\n        (\"test4/test.js\", true),\n        (\"test5/test.js\", false),\n        (\"test6/test.js\", false),\n        (\"test/test.test7.js\", false),\n        (\"test.test7.js\", false),\n    ];\n\n    for (file_path, _) in FILES {\n        let file_path = Path::new(file_path);\n        fs.insert(file_path.into(), UNFORMATTED.as_bytes());\n    }\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"./\"), (\"--write\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    for (file_path, expect_formatted) in FILES {\n        let mut file = fs\n            .open(Path::new(file_path))\n            .expect(\"formatting target file was removed by the CLI\");\n\n        let mut content = String::new();\n        file.read_to_string(&mut content)\n            .expect(\"failed to read file from memory FS\");\n\n        let expected = if expect_formatted {\n            FORMATTED\n        } else {\n            UNFORMATTED\n        };\n\n        assert_eq!(\n            content, expected,\n            \"content of {file_path} doesn't match the expected content\"\n        );\n    }\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"does_not_format_ignored_directories\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::max_diagnostics_default", "test": "fn max_diagnostics_default() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    for i in 0..60 {\n        let file_path = PathBuf::from(format!(\"src/file_{i}.js\"));\n        fs.insert(file_path, UNFORMATTED.as_bytes());\n    }\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"src\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut diagnostic_count = 0;\n    let mut filtered_messages = Vec::new();\n\n    for msg in console.out_buffer {\n        let MarkupBuf(nodes) = &msg.content;\n        let is_diagnostic = nodes.iter().any(|node| {\n            node.content\n                .contains(\"Formatter would have printed the following content\")\n        });\n\n        if is_diagnostic {\n            diagnostic_count += 1;\n        } else {\n            filtered_messages.push(msg);\n        }\n    }\n\n    console.out_buffer = filtered_messages;\n\n    for i in 0..60 {\n        let file_path = format!(\"src/file_{i}.js\");\n        fs.remove(Path::new(&file_path));\n    }\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"max_diagnostics_default\",\n        fs,\n        console,\n        result,\n    ));\n\n    assert_eq!(diagnostic_count, 20);\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::max_diagnostics", "test": "fn max_diagnostics() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    for i in 0..60 {\n        let file_path = PathBuf::from(format!(\"src/file_{i}.js\"));\n        fs.insert(file_path, UNFORMATTED.as_bytes());\n    }\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), (\"--max-diagnostics\"), (\"10\"), (\"src\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut diagnostic_count = 0;\n    let mut filtered_messages = Vec::new();\n\n    for msg in console.out_buffer {\n        let MarkupBuf(nodes) = &msg.content;\n        let is_diagnostic = nodes.iter().any(|node| {\n            node.content\n                .contains(\"Formatter would have printed the following content\")\n        });\n\n        if is_diagnostic {\n            diagnostic_count += 1;\n        } else {\n            filtered_messages.push(msg);\n        }\n    }\n\n    console.out_buffer = filtered_messages;\n\n    for i in 0..60 {\n        let file_path = format!(\"src/file_{i}.js\");\n        fs.remove(Path::new(&file_path));\n    }\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"max_diagnostics\",\n        fs,\n        console,\n        result,\n    ));\n\n    assert_eq!(diagnostic_count, 10);\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::print_verbose", "test": "fn print_verbose() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"format.js\");\n    fs.insert(file_path.into(), UNFORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--verbose\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"print_verbose\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::ignore_vcs_ignored_file", "test": "fn ignore_vcs_ignored_file() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let rome_json = r#\"{\n        \"vcs\": {\n            \"enabled\": true,\n            \"clientKind\": \"git\",\n            \"useIgnoreFile\": true\n        }\n    }\"#;\n\n    let git_ignore = r#\"\nfile2.js\n\"#;\n\n    let code2 = r#\"foo.call();\n\n\n    bar.call();\"#;\n    let code1 = r#\"array.map(sentence =>\n\n\n    sentence.split(' ')).flat();\"#;\n\n    // ignored files\n    let file_path1 = Path::new(\"file1.js\");\n    fs.insert(file_path1.into(), code1.as_bytes());\n    let file_path2 = Path::new(\"file2.js\");\n    fs.insert(file_path2.into(), code2.as_bytes());\n\n    // configuration\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(config_path.into(), rome_json.as_bytes());\n\n    // git ignore file\n    let ignore_file = Path::new(\".gitignore\");\n    fs.insert(ignore_file.into(), git_ignore.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--write\"),\n                file_path1.as_os_str().to_str().unwrap(),\n                file_path2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ignore_vcs_ignored_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::ignore_vcs_ignored_file_via_cli", "test": "fn ignore_vcs_ignored_file_via_cli() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let git_ignore = r#\"\nfile2.js\n\"#;\n\n    let code2 = r#\"foo.call();\n\n\n    bar.call();\"#;\n    let code1 = r#\"array.map(sentence =>\n\n\n    sentence.split(' ')).flat();\"#;\n\n    // ignored files\n    let file_path1 = Path::new(\"file1.js\");\n    fs.insert(file_path1.into(), code1.as_bytes());\n    let file_path2 = Path::new(\"file2.js\");\n    fs.insert(file_path2.into(), code2.as_bytes());\n\n    // git folder\n    let git_folder = Path::new(\"./.git\");\n    fs.insert(git_folder.into(), \"\".as_bytes());\n\n    // git ignore file\n    let ignore_file = Path::new(\"./.gitignore\");\n    fs.insert(ignore_file.into(), git_ignore.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                (\"--vcs-enabled=true\"),\n                (\"--vcs-client-kind=git\"),\n                (\"--vcs-use-ignore-file=true\"),\n                (\"--vcs-root=.\"),\n                (\"--write\"),\n                file_path1.as_os_str().to_str().unwrap(),\n                file_path2.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ignore_vcs_ignored_file_via_cli\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::doesnt_error_if_no_files_were_processed", "test": "fn doesnt_error_if_no_files_were_processed() {\n    let mut console = BufferConsole::default();\n    let mut fs = MemoryFileSystem::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), \"--no-errors-on-unmatched\", (\"file.js\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"doesnt_error_if_no_files_were_processed\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::ignore_comments_error_when_allow_comments", "test": "fn ignore_comments_error_when_allow_comments() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let config_json = r#\"{\n  \"json\": {\n    \"parser\": { \"allowComments\": true }\n  }\n}\n\n    \"#;\n    let biome_config = \"biome.json\";\n    let code = r#\"\n/*test*/ [1, 2, 3]\n    \"#;\n    let file_path = Path::new(\"tsconfig.json\");\n    fs.insert(file_path.into(), code.as_bytes());\n    fs.insert(biome_config.into(), config_json);\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"ignore_comments_error_when_allow_comments\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::format_jsonc_files", "test": "fn format_jsonc_files() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let code = r#\"\n/*test*/ [\n\n/* some other comment*/1, 2, 3]\n    \"#;\n    let file_path = Path::new(\"file.jsonc\");\n    fs.insert(file_path.into(), code.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"format_jsonc_files\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::format_json_when_allow_trailing_commas", "test": "fn format_json_when_allow_trailing_commas() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let config_json = r#\"{\n    \"json\": {\n        \"parser\": { \"allowTrailingCommas\": true }\n    }\n}\"#;\n    let biome_config = \"biome.json\";\n    let code = r#\"{\n    \"array\": [\n        1,\n    ],\n}\"#;\n    let file_path = Path::new(\"file.json\");\n    fs.insert(file_path.into(), code.as_bytes());\n    fs.insert(biome_config.into(), config_json);\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"format\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"format_json_when_allow_trailing_commas\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::treat_known_json_files_as_jsonc_files", "test": "fn treat_known_json_files_as_jsonc_files() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let code = r#\"\n/*test*/ [\n\n/* some other comment*/1, 2, 3]\n    \"#;\n    let ts = Path::new(\"files/typescript.json\");\n    fs.insert(ts.into(), code.as_bytes());\n    let eslint = Path::new(\"files/.eslintrc.json\");\n    fs.insert(eslint.into(), code.as_bytes());\n    let jshint = Path::new(\"files/.jshintrc\");\n    fs.insert(jshint.into(), code.as_bytes());\n    let babel = Path::new(\"files/.babelrc\");\n    fs.insert(babel.into(), code.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                ts.as_os_str().to_str().unwrap(),\n                eslint.as_os_str().to_str().unwrap(),\n                jshint.as_os_str().to_str().unwrap(),\n                babel.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"treat_known_json_files_as_jsonc_files\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::should_apply_different_formatting", "test": "fn should_apply_different_formatting() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let biome_json = Path::new(\"biome.json\");\n    fs.insert(\n        biome_json.into(),\n        r#\"{\n        \"formatter\": {\n            \"indentStyle\": \"space\"\n        },\n        \"javascript\": {\n            \"formatter\": {\n                \"lineWidth\": 320,\n                \"indentSize\": 8\n            }\n        },\n        \"json\": {\n            \"formatter\": {\n                \"lineWidth\": 80,\n                \"indentSize\": 2\n            }\n        }\n    }\"#,\n    );\n\n    let code = r#\"\n{\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let json_file = Path::new(\"input.json\");\n    fs.insert(json_file.into(), code.as_bytes());\n\n    let code = r#\"\nconst a = {\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let js_file = Path::new(\"input.js\");\n    fs.insert(js_file.into(), code.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                \"--write\",\n                json_file.as_os_str().to_str().unwrap(),\n                js_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_apply_different_formatting\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::should_apply_different_formatting_with_cli", "test": "fn should_apply_different_formatting_with_cli() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let biome_json = Path::new(\"biome.json\");\n    fs.insert(\n        biome_json.into(),\n        r#\"{\n        \"formatter\": {\n            \"indentStyle\": \"space\"\n        }\n    }\"#,\n    );\n\n    let json_file_content = r#\"\n{\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let json_file = Path::new(\"input.json\");\n    fs.insert(json_file.into(), json_file_content.as_bytes());\n\n    let js_file_content = r#\"\nconst a = {\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let js_file = Path::new(\"input.js\");\n    fs.insert(js_file.into(), js_file_content.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                \"--write\",\n                \"--javascript-formatter-line-width=320\",\n                \"--javascript-formatter-indent-size=8\",\n                \"--json-formatter-line-width=20\",\n                \"--json-formatter-indent-size=2\",\n                json_file.as_os_str().to_str().unwrap(),\n                js_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_apply_different_formatting_with_cli\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::should_not_format_json_files_if_disabled", "test": "fn should_not_format_json_files_if_disabled() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let biome_json = Path::new(\"biome.json\");\n    fs.insert(\n        biome_json.into(),\n        r#\"{\n        \"formatter\": {\n            \"indentStyle\": \"space\"\n        },\n        \"javascript\": {\n            \"formatter\": {\n                \"lineWidth\": 80,\n                \"indentSize\": 4\n            }\n        },\n        \"json\": {\n            \"formatter\": {\n                \"enabled\": false\n            }\n        }\n    }\"#,\n    );\n\n    let json_file_content = r#\"\n{\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let json_file = Path::new(\"input.json\");\n    fs.insert(json_file.into(), json_file_content.as_bytes());\n\n    let js_file_content = r#\"\nconst a = {\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let js_file = Path::new(\"input.js\");\n    fs.insert(js_file.into(), js_file_content.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                \"--write\",\n                json_file.as_os_str().to_str().unwrap(),\n                js_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(json_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, json_file_content);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_not_format_json_files_if_disabled\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::should_not_format_js_files_if_disabled", "test": "fn should_not_format_js_files_if_disabled() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let biome_json = Path::new(\"biome.json\");\n    fs.insert(\n        biome_json.into(),\n        r#\"{\n        \"formatter\": {\n            \"indentStyle\": \"space\"\n        },\n        \"javascript\": {\n            \"formatter\": {\n                \"enabled\": false\n            }\n        },\n        \"json\": {\n            \"formatter\": {\n                \"lineWidth\": 80,\n                \"indentSize\": 2\n            }\n        }\n    }\"#,\n    );\n\n    let json_file_content = r#\"\n{\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let json_file = Path::new(\"input.json\");\n    fs.insert(json_file.into(), json_file_content.as_bytes());\n\n    let js_file_content = r#\"\nconst a = {\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let js_file = Path::new(\"input.js\");\n    fs.insert(js_file.into(), js_file_content.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                \"--write\",\n                json_file.as_os_str().to_str().unwrap(),\n                js_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(js_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, js_file_content);\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_not_format_js_files_if_disabled\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/format.rs::should_apply_different_indent_style", "test": "fn should_apply_different_indent_style() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let biome_json = Path::new(\"biome.json\");\n    fs.insert(\n        biome_json.into(),\n        r#\"{\n        \"formatter\": {\n            \"indentStyle\": \"space\"\n        },\n        \"javascript\": {\n            \"formatter\": {\n                \"lineWidth\": 320,\n                \"indentSize\": 8,\n                \"indentStyle\": \"tab\"\n            }\n        },\n        \"json\": {\n            \"formatter\": {\n                \"lineWidth\": 80,\n                \"indentSize\": 2,\n                \"indentStyle\": \"tab\"\n            }\n        }\n    }\"#,\n    );\n\n    let json_file_content = r#\"\n{\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let json_file = Path::new(\"input.json\");\n    fs.insert(json_file.into(), json_file_content.as_bytes());\n\n    let js_file_content = r#\"\nconst a = {\n    \"array\": [\"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\", \"lorem ipsum\"]\n}\n    \"#;\n    let js_file = Path::new(\"input.js\");\n    fs.insert(js_file.into(), js_file_content.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"format\"),\n                \"--write\",\n                json_file.as_os_str().to_str().unwrap(),\n                js_file.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs\n        .open(js_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert!(content.contains('\\t'), \"should not contain tabs\");\n\n    drop(file);\n\n    let mut file = fs\n        .open(json_file)\n        .expect(\"formatting target file was removed by the CLI\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert!(content.contains('\\t'), \"should not contain tabs\");\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_apply_different_indent_style\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/init.rs::init_help", "test": "fn init_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"init\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"init_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/init.rs::creates_config_file", "test": "fn creates_config_file() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"init\")].as_slice()),\n    );\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let file_path = Path::new(\"biome.json\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"configuration file was not written on disk\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n    let parsed = parse_json(CONFIG_INIT_DEFAULT, JsonParserOptions::default());\n    let formatted =\n        biome_json_formatter::format_node(JsonFormatOptions::default(), &parsed.syntax())\n            .expect(\"valid format document\")\n            .print()\n            .expect(\"valid format document\");\n    assert_eq!(content, formatted.as_code());\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"creates_config_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/init.rs::creates_config_file_when_biome_installed_via_package_manager", "test": "fn creates_config_file_when_biome_installed_via_package_manager() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"./node_modules/@biomejs/biome/configuration_schema.json\");\n    fs.insert(file_path.into(), *b\"{}\");\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"init\")].as_slice()),\n    );\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let file_path = Path::new(\"biome.json\");\n\n    let mut file = fs\n        .open(file_path)\n        .expect(\"configuration file was not written on disk\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n    let parsed = parse_json(\n        CONFIG_INIT_DEFAULT_WHEN_INSTALLED,\n        JsonParserOptions::default(),\n    );\n    let formatted =\n        biome_json_formatter::format_node(JsonFormatOptions::default(), &parsed.syntax())\n            .expect(\"valid format document\")\n            .print()\n            .expect(\"valid format document\");\n    assert_eq!(content, formatted.as_code());\n\n    drop(file);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"creates_config_file_when_biome_installed_via_package_manager\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::lint_help", "test": "fn lint_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"lint\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"lint_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::ok", "test": "fn ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"check.js\");\n    fs.insert(file_path.into(), FORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"lint\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::ok_read_only", "test": "fn ok_read_only() {\n    let mut fs = MemoryFileSystem::new_read_only();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"check.js\");\n    fs.insert(file_path.into(), FORMATTED.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"lint\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::apply_ok", "test": "fn apply_ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, FIX_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"apply_ok\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::apply_noop", "test": "fn apply_noop() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_AFTER.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"apply_noop\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::apply_suggested", "test": "fn apply_suggested() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), APPLY_SUGGESTED_BEFORE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply-unsafe\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, APPLY_SUGGESTED_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"apply_suggested\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::should_disable_a_rule", "test": "fn should_disable_a_rule() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), NO_DEBUGGER_BEFORE.as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(config_path.into(), CONFIG_LINTER_SUPPRESSED_RULE.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, NO_DEBUGGER_AFTER);\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_disable_a_rule\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::should_disable_a_rule_group", "test": "fn should_disable_a_rule_group() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let file_path = Path::new(\"fix.js\");\n    fs.insert(file_path.into(), FIX_BEFORE.as_bytes());\n\n    let config_path = Path::new(\"biome.json\");\n    fs.insert(\n        config_path.into(),\n        CONFIG_LINTER_SUPPRESSED_GROUP.as_bytes(),\n    );\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from(\n            [\n                (\"lint\"),\n                (\"--apply\"),\n                file_path.as_os_str().to_str().unwrap(),\n            ]\n            .as_slice(),\n        ),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut buffer = String::new();\n    fs.open(file_path)\n        .unwrap()\n        .read_to_string(&mut buffer)\n        .unwrap();\n\n    assert_eq!(buffer, \"(1 >= -0)\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_disable_a_rule_group\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lint.rs::downgrade_severity", "test": "fn downgrade_severity() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n    let file_path = Path::new(\"biome.json\");\n    fs.insert(\n        file_path.into(),\n        CONFIG_LINTER_DOWNGRADE_DIAGNOSTIC.as_bytes(),\n    );\n\n    let file_path = Path::new(\"file.js\");\n    fs.insert(file_path.into(), NO_DEBUGGER.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"lint\"), file_path.as_os_str().to_str().unwrap()].as_slice()),\n    );\n\n    println!(\"{console:?}\");\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let messages = &console.out_buffer;\n\n    assert_eq!(\n        messages\n            .iter()\n            .filter(|m| m.level == LogLevel::Error)\n            .filter(|m| {\n                let content = format!(\"{:#?}\", m.content);\n                content.contains(\"suspicious/noDebugger\")\n            })\n            .count(),\n        1\n    );\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"downgrade_severity\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/lsp_proxy.rs::lsp_proxy_help", "test": "fn lsp_proxy_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"lsp-proxy\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"lsp_proxy_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/migrate.rs::migrate_help", "test": "fn migrate_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"migrate\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"migrate_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/migrate.rs::migrate_config_up_to_date", "test": "fn migrate_config_up_to_date() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let configuration = r#\"{ \"linter\": { \"enabled\": true } }\"#;\n\n    let configuration_path = Path::new(\"biome.json\");\n    fs.insert(configuration_path.into(), configuration.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"migrate\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    let mut file = fs.open(configuration_path).expect(\"file to open\");\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"failed to read file from memory FS\");\n\n    assert_eq!(content, configuration);\n\n    drop(file);\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"migrate_config_up_to_date\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/migrate.rs::emit_diagnostic_for_rome_json", "test": "fn emit_diagnostic_for_rome_json() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let configuration = r#\"{ \"linter\": { \"enabled\": true } }\"#;\n\n    let configuration_path = Path::new(\"rome.json\");\n    fs.insert(configuration_path.into(), configuration.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"migrate\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"emit_diagnostic_for_rome_json\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/migrate.rs::should_create_biome_json_file", "test": "fn should_create_biome_json_file() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let configuration = r#\"{ \"linter\": { \"enabled\": true } }\"#;\n\n    let configuration_path = Path::new(\"rome.json\");\n    fs.insert(configuration_path.into(), configuration.as_bytes());\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"migrate\"), \"--write\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"should_create_biome_json_file\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/rage.rs::rage_help", "test": "fn rage_help() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"rage\"), \"--help\"].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"rage_help\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/rage.rs::ok", "test": "fn ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_rage(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"rage\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_rage_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"rage_ok\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/rage.rs::with_configuration", "test": "fn with_configuration() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n    fs.insert(\n        Path::new(\"biome.json\").to_path_buf(),\n        r#\"{\n  \"formatter\": {\n    \"enabled\": false\n  }\n}\"#,\n    );\n\n    let result = run_rage(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"rage\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_rage_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"with_configuration\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/rage.rs::with_malformed_configuration", "test": "fn with_malformed_configuration() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n    fs.insert(\n        Path::new(\"biome.json\").to_path_buf(),\n        r#\"{\n  \"formatter\": {\n    \"enabled\":\n  }\n}\"#,\n    );\n\n    let result = run_rage(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"rage\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_rage_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"with_malformed_configuration\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/version.rs::ok", "test": "fn ok() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"--version\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"version_ok\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_cli/tests/commands/version.rs::full", "test": "fn full() {\n    let mut fs = MemoryFileSystem::default();\n    let mut console = BufferConsole::default();\n\n    let result = run_cli(\n        DynRef::Borrowed(&mut fs),\n        &mut console,\n        Args::from([(\"version\")].as_slice()),\n    );\n\n    assert!(result.is_ok(), \"run_cli returned {result:?}\");\n\n    assert_cli_snapshot(SnapshotPayload::new(\n        module_path!(),\n        \"version_full\",\n        fs,\n        console,\n        result,\n    ));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_text_size/tests/main.rs::sum", "test": "fn sum() {\n    let xs: Vec<TextSize> = vec![size(0), size(1), size(2)];\n    assert_eq!(xs.iter().sum::<TextSize>(), size(3));\n    assert_eq!(xs.into_iter().sum::<TextSize>(), size(3));\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_text_size/tests/main.rs::intersect", "test": "fn intersect() {\n    assert_eq!(range(1..2).intersect(range(2..3)), Some(range(2..2)));\n    assert_eq!(range(1..5).intersect(range(2..3)), Some(range(2..3)));\n    assert_eq!(range(1..2).intersect(range(3..4)), None);\n}", "error": "Not Definition Found"}
{"test_id": "biomejs-biome/biomejs-biome-af24597/crates/biome_text_size/tests/main.rs::cover", "test": "fn cover() {\n    assert_eq!(range(1..2).cover(range(2..3)), range(1..3));\n    assert_eq!(range(1..5).cover(range(2..3)), range(1..5));\n    assert_eq!(range(1..2).cover(range(4..5)), range(1..5));\n}", "error": "Not Definition Found"}
