{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/client_request.rs::recv_invalid_server_stream_id", "test": "async fn recv_invalid_server_stream_id() {\n    h2_support::trace_init!();\n\n    let mock = mock_io::Builder::new()\n        .handshake()\n        // Write GET /\n        .write(&[\n            0, 0, 0x10, 1, 5, 0, 0, 0, 1, 0x82, 0x87, 0x41, 0x8B, 0x9D, 0x29, 0xAC, 0x4B, 0x8F,\n            0xA8, 0xE9, 0x19, 0x97, 0x21, 0xE9, 0x84,\n        ])\n        .write(SETTINGS_ACK)\n        // Read response\n        .read(&[0, 0, 1, 1, 5, 0, 0, 0, 2, 137])\n        // Write GO_AWAY\n        .write(&[0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n        .build();\n\n    let (mut client, h2) = client::handshake(mock).await.unwrap();\n\n    // Send the request\n    let request = Request::builder()\n        .uri(\"https://http2.akamai.com/\")\n        .body(())\n        .unwrap();\n\n    tracing::info!(\"sending request\");\n    let (response, _) = client.send_request(request, true).unwrap();\n\n    // The connection errors\n    assert!(h2.await.is_err());\n\n    // The stream errors\n    assert!(response.await.is_err());\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/client_request.rs::request_stream_id_overflows", "test": "async fn request_stream_id_overflows() {\n    h2_support::trace_init!();\n    let (io, mut srv) = mock::new();\n\n    let h2 = async move {\n        let (mut client, mut h2) = client::Builder::new()\n            .initial_stream_id(::std::u32::MAX >> 1)\n            .handshake::<_, Bytes>(io)\n            .await\n            .unwrap();\n        let request = Request::builder()\n            .method(Method::GET)\n            .uri(\"https://example.com/\")\n            .body(())\n            .unwrap();\n\n        // first request is allowed\n        let (response, _) = client.send_request(request, true).unwrap();\n        let _x = h2.drive(response).await.unwrap();\n\n        let request = Request::builder()\n            .method(Method::GET)\n            .uri(\"https://example.com/\")\n            .body(())\n            .unwrap();\n        // second cannot use the next stream id, it's over\n        let poll_err = poll_fn(|cx| client.poll_ready(cx)).await.unwrap_err();\n        assert_eq!(poll_err.to_string(), \"user error: stream ID overflowed\");\n\n        let err = client.send_request(request, true).unwrap_err();\n        assert_eq!(err.to_string(), \"user error: stream ID overflowed\");\n\n        h2.await.unwrap();\n    };\n\n    let srv = async move {\n        let settings = srv.assert_client_handshake().await;\n        assert_default_settings!(settings);\n        srv.recv_frame(\n            frames::headers(::std::u32::MAX >> 1)\n                .request(\"GET\", \"https://example.com/\")\n                .eos(),\n        )\n        .await;\n        srv.send_frame(frames::headers(::std::u32::MAX >> 1).response(200).eos())\n            .await;\n        idle_ms(10).await;\n    };\n\n    join(srv, h2).await;\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/client_request.rs::request_with_connection_headers", "test": "async fn request_with_connection_headers() {\n    h2_support::trace_init!();\n    let (io, mut srv) = mock::new();\n\n    // can't assert full handshake, since client never sends a request, and\n    // thus never bothers to ack the settings...\n    let srv = async move {\n        srv.read_preface().await.unwrap();\n        srv.recv_frame(frames::settings()).await;\n        // goaway is required to make sure the connection closes because\n        // of no active streams\n        srv.recv_frame(frames::go_away(0)).await;\n    };\n\n    let headers = vec![\n        (\"connection\", \"foo\"),\n        (\"keep-alive\", \"5\"),\n        (\"proxy-connection\", \"bar\"),\n        (\"transfer-encoding\", \"chunked\"),\n        (\"upgrade\", \"HTTP/2\"),\n        (\"te\", \"boom\"),\n    ];\n\n    let client = async move {\n        let (mut client, conn) = client::handshake(io).await.expect(\"handshake\");\n\n        for (name, val) in headers {\n            let req = Request::builder()\n                .uri(\"https://http2.akamai.com/\")\n                .header(name, val)\n                .body(())\n                .unwrap();\n            let err = client.send_request(req, true).expect_err(name);\n            assert_eq!(err.to_string(), \"user error: malformed headers\");\n        }\n        drop(client);\n        conn.await.unwrap();\n    };\n\n    join(srv, client).await;\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/client_request.rs::invalid_connect_protocol_enabled_setting", "test": "async fn invalid_connect_protocol_enabled_setting() {\n    h2_support::trace_init!();\n\n    let (io, mut srv) = mock::new();\n\n    let srv = async move {\n        // Send a settings frame\n        srv.send(frames::settings().enable_connect_protocol(2).into())\n            .await\n            .unwrap();\n        srv.read_preface().await.unwrap();\n\n        let settings = assert_settings!(srv.next().await.expect(\"unexpected EOF\").unwrap());\n        assert_default_settings!(settings);\n\n        // Send the ACK\n        let ack = frame::Settings::ack();\n\n        // TODO: Don't unwrap?\n        srv.send(ack.into()).await.unwrap();\n\n        let frame = srv.next().await.unwrap().unwrap();\n        let go_away = assert_go_away!(frame);\n        assert_eq!(go_away.reason(), Reason::PROTOCOL_ERROR);\n    };\n\n    let h2 = async move {\n        let (mut client, mut h2) = client::handshake(io).await.unwrap();\n\n        // we send a simple req here just to drive the connection so we can\n        // receive the server settings.\n        let request = Request::get(\"https://example.com/\").body(()).unwrap();\n        let (response, _) = client.send_request(request, true).unwrap();\n\n        let error = h2.drive(response).await.unwrap_err();\n        assert_eq!(error.reason(), Some(Reason::PROTOCOL_ERROR));\n    };\n\n    join(srv, h2).await;\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/push_promise.rs::recv_push_when_push_disabled_is_conn_error", "test": "async fn recv_push_when_push_disabled_is_conn_error() {\n    h2_support::trace_init!();\n\n    let (io, mut srv) = mock::new();\n    let mock = async move {\n        let _ = srv.assert_client_handshake().await;\n        srv.recv_frame(\n            frames::headers(1)\n                .request(\"GET\", \"https://http2.akamai.com/\")\n                .eos(),\n        )\n        .await;\n        srv.send_frame(\n            frames::push_promise(1, 3).request(\"GET\", \"https://http2.akamai.com/style.css\"),\n        )\n        .await;\n        srv.send_frame(frames::headers(1).response(200).eos()).await;\n        srv.recv_frame(frames::go_away(0).protocol_error()).await;\n    };\n\n    let h2 = async move {\n        let (mut client, h2) = client::Builder::new()\n            .enable_push(false)\n            .handshake::<_, Bytes>(io)\n            .await\n            .unwrap();\n        let request = Request::builder()\n            .method(Method::GET)\n            .uri(\"https://http2.akamai.com/\")\n            .body(())\n            .unwrap();\n\n        let req = async move {\n            let res = client.send_request(request, true).unwrap().0.await;\n            let err = res.unwrap_err();\n            assert_eq!(\n                err.to_string(),\n                \"connection error detected: unspecific protocol error detected\"\n            );\n        };\n\n        // client should see a protocol error\n        let conn = async move {\n            let res = h2.await;\n            let err = res.unwrap_err();\n            assert_eq!(\n                err.to_string(),\n                \"connection error detected: unspecific protocol error detected\"\n            );\n        };\n\n        join(conn, req).await;\n    };\n\n    join(mock, h2).await;\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/server.rs::read_preface_in_multiple_frames", "test": "async fn read_preface_in_multiple_frames() {\n    h2_support::trace_init!();\n\n    let mock = mock_io::Builder::new()\n        .read(b\"PRI * HTTP/2.0\")\n        .read(b\"\\r\\n\\r\\nSM\\r\\n\\r\\n\")\n        .write(SETTINGS)\n        .read(SETTINGS)\n        .write(SETTINGS_ACK)\n        .read(SETTINGS_ACK)\n        .build();\n\n    let mut h2 = server::handshake(mock).await.unwrap();\n\n    assert!(h2.next().await.is_none());\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/server.rs::too_big_headers_sends_431", "test": "async fn too_big_headers_sends_431() {\n    h2_support::trace_init!();\n    let (io, mut client) = mock::new();\n\n    let client = async move {\n        let settings = client.assert_server_handshake().await;\n        assert_frame_eq(settings, frames::settings().max_header_list_size(10));\n        client\n            .send_frame(\n                frames::headers(1)\n                    .request(\"GET\", \"https://example.com/\")\n                    .field(\"some-header\", \"some-value\")\n                    .eos(),\n            )\n            .await;\n        client\n            .recv_frame(frames::headers(1).response(431).eos())\n            .await;\n        idle_ms(10).await;\n    };\n\n    let srv = async move {\n        let mut srv = server::Builder::new()\n            .max_header_list_size(10)\n            .handshake::<_, Bytes>(io)\n            .await\n            .expect(\"handshake\");\n\n        let req = srv.next().await;\n        assert!(req.is_none(), \"req is {:?}\", req);\n    };\n\n    join(client, srv).await;\n}", "error": "Not Definition Found"}
{"test_id": "hyperium-h2/hyperium-h2-da38b1c/tests/h2-tests/tests/server.rs::too_big_headers_sends_reset_after_431_if_not_eos", "test": "async fn too_big_headers_sends_reset_after_431_if_not_eos() {\n    h2_support::trace_init!();\n    let (io, mut client) = mock::new();\n\n    let client = async move {\n        let settings = client.assert_server_handshake().await;\n        assert_frame_eq(settings, frames::settings().max_header_list_size(10));\n        client\n            .send_frame(\n                frames::headers(1)\n                    .request(\"GET\", \"https://example.com/\")\n                    .field(\"some-header\", \"some-value\"),\n            )\n            .await;\n        client\n            .recv_frame(frames::headers(1).response(431).eos())\n            .await;\n        client.recv_frame(frames::reset(1).refused()).await;\n    };\n\n    let srv = async move {\n        let mut srv = server::Builder::new()\n            .max_header_list_size(10)\n            .handshake::<_, Bytes>(io)\n            .await\n            .expect(\"handshake\");\n\n        let req = srv.next().await;\n        assert!(req.is_none(), \"req is {:?}\", req);\n    };\n\n    join(client, srv).await;\n}", "error": "Not Definition Found"}
