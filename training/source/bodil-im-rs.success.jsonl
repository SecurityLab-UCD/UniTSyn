{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}", "code_id": "bodil-im-rs/bodil-im-rs-2afaf54/src/hash/set.rs::len", "code": "pub fn len(&self) -> usize {\n        self.size\n    }", "docstring": null}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}", "code_id": "bodil-im-rs/bodil-im-rs-2afaf54/src/hash/set.rs::len", "code": "pub fn len(&self) -> usize {\n        self.size\n    }", "docstring": null}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/vector.rs::test_something", "test": "fn test_something() {\n    let data = [];\n    let mut vec = Vector::new();\n    let mut nat = Vec::new();\n    vec.assert_invariants();\n    for action in actions {\n        match action {\n            Action::PushFront(value) => {\n                let len = vec.len();\n                nat.insert(0, value);\n                vec.push_front(value);\n                assert_eq!(len + 1, vec.len());\n            }\n            Action::PushBack(value) => {\n                let len = vec.len();\n                nat.push(value);\n                vec.push_back(value);\n                assert_eq!(len + 1, vec.len());\n            }\n            Action::PopFront => {\n                if vec.is_empty() {\n                    assert_eq!(None, vec.pop_front());\n                } else {\n                    let len = vec.len();\n                    assert_eq!(nat.remove(0), vec.pop_front().unwrap());\n                    assert_eq!(len - 1, vec.len());\n                }\n            }\n            Action::PopBack => {\n                if vec.is_empty() {\n                    assert_eq!(None, vec.pop_back());\n                } else {\n                    let len = vec.len();\n                    assert_eq!(nat.pop(), vec.pop_back());\n                    assert_eq!(len - 1, vec.len());\n                }\n            }\n            Action::Insert(index, value) => {\n                let index = cap_index(vec.len(), index);\n                let len = vec.len();\n                nat.insert(index, value);\n                vec.insert(index, value);\n                assert_eq!(len + 1, vec.len());\n            }\n            Action::Remove(index) => {\n                if vec.is_empty() {\n                    continue;\n                }\n                let index = cap_index(vec.len(), index);\n                let len = vec.len();\n                assert_eq!(nat.remove(index), vec.remove(index));\n                assert_eq!(len - 1, vec.len());\n            }\n            Action::JoinLeft(mut new_nat) => {\n                let mut new_vec = Vector::from_iter(new_nat.iter().cloned());\n                let add_len = new_nat.len();\n                let len = vec.len();\n                new_vec.append(vec);\n                vec = new_vec;\n                new_nat.append(&mut nat);\n                nat = new_nat;\n                assert_eq!(len + add_len, vec.len());\n            }\n            Action::JoinRight(mut new_nat) => {\n                let new_vec = Vector::from_iter(new_nat.iter().cloned());\n                let add_len = new_nat.len();\n                let len = vec.len();\n                vec.append(new_vec);\n                nat.append(&mut new_nat);\n                assert_eq!(len + add_len, vec.len());\n            }\n            Action::SplitLeft(index) => {\n                let index = cap_index(vec.len(), index);\n                let len = vec.len();\n                let vec_right = vec.split_off(index);\n                let nat_right = nat.split_off(index);\n                assert_eq!(index, vec.len());\n                assert_eq!(len - index, vec_right.len());\n                assert_eq!(Vector::from_iter(nat_right.iter().cloned()), vec_right);\n            }\n            Action::SplitRight(index) => {\n                let index = cap_index(vec.len(), index);\n                let len = vec.len();\n                let vec_right = vec.split_off(index);\n                let nat_right = nat.split_off(index);\n                assert_eq!(index, vec.len());\n                assert_eq!(len - index, vec_right.len());\n                assert_eq!(Vector::from_iter(nat.iter().cloned()), vec);\n                vec = vec_right;\n                nat = nat_right;\n            }\n        }\n        vec.assert_invariants();\n        assert_eq!(nat.len(), vec.len());\n        assert_eq!(Vector::from_iter(nat.iter().cloned()), vec);\n    }\n}", "code_id": "bodil-im-rs/bodil-im-rs-2afaf54/src/vector/focus.rs::len", "code": "pub fn len(&self) -> usize {\n        match self {\n            Focus::Single(chunk) => chunk.len(),\n            Focus::Full(tree) => tree.len(),\n        }\n    }", "docstring": null}
