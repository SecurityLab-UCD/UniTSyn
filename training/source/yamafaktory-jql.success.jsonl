{"test_id": "yamafaktory-jql/yamafaktory-jql-d2dde2f/crates/jql-runner/tests/integration.rs::check_raw_integration", "test": "fn check_raw_integration() {\n    assert_eq!(\n        raw(r#\"\"a\",\"b\"\"#, &json!({ \"a\": 1, \"b\": 2 })),\n        Ok(json!([1, 2]))\n    );\n}", "code_id": "yamafaktory-jql/yamafaktory-jql-d2dde2f/crates/jql-runner/src/runner.rs::raw", "code": "pub fn raw(input: &str, json: &Value) -> Result<Value, JqlRunnerError> {\n    if input.is_empty() {\n        return Err(JqlRunnerError::EmptyQueryError);\n    }\n\n    let tokens = parse(input)?;\n\n    token(&tokens, json)\n}", "docstring": null}
{"test_id": "yamafaktory-jql/yamafaktory-jql-d2dde2f/crates/jql-runner/tests/integration.rs::check_token_integration", "test": "fn check_token_integration() {\n    assert_eq!(\n        token(\n            &[\n                Token::KeySelector(\"a\"),\n                Token::GroupSeparator,\n                Token::KeySelector(\"b\")\n            ],\n            &json!({ \"a\": 1, \"b\": 2 })\n        ),\n        Ok(json!([1, 2]))\n    );\n}", "code_id": "yamafaktory-jql/yamafaktory-jql-d2dde2f/crates/jql-runner/src/runner.rs::token", "code": "pub fn token(tokens: &[Token], json: &Value) -> Result<Value, JqlRunnerError> {\n    let groups = split(tokens);\n\n    let result = groups\n        .par_iter()\n        .try_fold_with(vec![], |mut acc: Vec<Value>, group| {\n            acc.push(group_runner(group, json)?);\n\n            Ok::<Vec<Value>, JqlRunnerError>(acc)\n        })\n        .try_reduce(Vec::new, |mut a, b| {\n            a.extend(b);\n\n            Ok(a)\n        });\n\n    result.map(|group| {\n        if groups.len() == 1 {\n            json!(group[0])\n        } else {\n            json!(group)\n        }\n    })\n}", "docstring": null}
