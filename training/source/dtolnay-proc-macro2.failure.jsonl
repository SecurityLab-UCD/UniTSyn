{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/comments.rs::incomplete", "test": "fn incomplete() {\n    assert!(\"/*/\".parse::<TokenStream>().is_err());\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/comments.rs::lit", "test": "fn lit() {\n    let stream = \"/// doc\".parse::<TokenStream>().unwrap();\n    let lit = lit_of_outer_doc_comment(&stream);\n    assert_eq!(lit.to_string(), \"\\\" doc\\\"\");\n\n    let stream = \"//! doc\".parse::<TokenStream>().unwrap();\n    let lit = lit_of_inner_doc_comment(&stream);\n    assert_eq!(lit.to_string(), \"\\\" doc\\\"\");\n\n    let stream = \"/** doc */\".parse::<TokenStream>().unwrap();\n    let lit = lit_of_outer_doc_comment(&stream);\n    assert_eq!(lit.to_string(), \"\\\" doc \\\"\");\n\n    let stream = \"/*! doc */\".parse::<TokenStream>().unwrap();\n    let lit = lit_of_inner_doc_comment(&stream);\n    assert_eq!(lit.to_string(), \"\\\" doc \\\"\");\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/comments.rs::carriage_return", "test": "fn carriage_return() {\n    let stream = \"///\\r\\n\".parse::<TokenStream>().unwrap();\n    let lit = lit_of_outer_doc_comment(&stream);\n    assert_eq!(lit.to_string(), \"\\\"\\\"\");\n\n    let stream = \"/**\\r\\n*/\".parse::<TokenStream>().unwrap();\n    let lit = lit_of_outer_doc_comment(&stream);\n    assert_eq!(lit.to_string(), \"\\\"\\\\r\\\\n\\\"\");\n\n    \"///\\r\".parse::<TokenStream>().unwrap_err();\n    \"///\\r \\n\".parse::<TokenStream>().unwrap_err();\n    \"/**\\r \\n*/\".parse::<TokenStream>().unwrap_err();\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test.rs::idents", "test": "fn idents() {\n    assert_eq!(\n        Ident::new(\"String\", Span::call_site()).to_string(),\n        \"String\"\n    );\n    assert_eq!(Ident::new(\"fn\", Span::call_site()).to_string(), \"fn\");\n    assert_eq!(Ident::new(\"_\", Span::call_site()).to_string(), \"_\");\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test.rs::raw_idents", "test": "fn raw_idents() {\n    assert_eq!(\n        Ident::new_raw(\"String\", Span::call_site()).to_string(),\n        \"r#String\"\n    );\n    assert_eq!(Ident::new_raw(\"fn\", Span::call_site()).to_string(), \"r#fn\");\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test.rs::literal_string", "test": "fn literal_string() {\n    assert_eq!(Literal::string(\"foo\").to_string(), \"\\\"foo\\\"\");\n    assert_eq!(Literal::string(\"\\\"\").to_string(), \"\\\"\\\\\\\"\\\"\");\n    assert_eq!(Literal::string(\"didn't\").to_string(), \"\\\"didn't\\\"\");\n    assert_eq!(\n        Literal::string(\"a\\00b\\07c\\08d\\0e\\0\").to_string(),\n        \"\\\"a\\\\x000b\\\\x007c\\\\08d\\\\0e\\\\0\\\"\",\n    );\n\n    \"\\\"\\\\\\r\\n    x\\\"\".parse::<TokenStream>().unwrap();\n    \"\\\"\\\\\\r\\n  \\rx\\\"\".parse::<TokenStream>().unwrap_err();\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test.rs::literal_byte_string", "test": "fn literal_byte_string() {\n    assert_eq!(Literal::byte_string(b\"\").to_string(), \"b\\\"\\\"\");\n    assert_eq!(\n        Literal::byte_string(b\"\\0\\t\\n\\r\\\"\\\\2\\x10\").to_string(),\n        \"b\\\"\\\\0\\\\t\\\\n\\\\r\\\\\\\"\\\\\\\\2\\\\x10\\\"\",\n    );\n    assert_eq!(\n        Literal::byte_string(b\"a\\00b\\07c\\08d\\0e\\0\").to_string(),\n        \"b\\\"a\\\\x000b\\\\x007c\\\\08d\\\\0e\\\\0\\\"\",\n    );\n\n    \"b\\\"\\\\\\r\\n    x\\\"\".parse::<TokenStream>().unwrap();\n    \"b\\\"\\\\\\r\\n  \\rx\\\"\".parse::<TokenStream>().unwrap_err();\n    \"b\\\"\\\\\\r\\n  \\u{a0}x\\\"\".parse::<TokenStream>().unwrap_err();\n    \"br\\\"\\u{a0}\\\"\".parse::<TokenStream>().unwrap_err();\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test_fmt.rs::test_fmt_group", "test": "fn test_fmt_group() {\n    let ident = Ident::new(\"x\", Span::call_site());\n    let inner = TokenStream::from_iter(iter::once(TokenTree::Ident(ident)));\n    let parens_empty = Group::new(Delimiter::Parenthesis, TokenStream::new());\n    let parens_nonempty = Group::new(Delimiter::Parenthesis, inner.clone());\n    let brackets_empty = Group::new(Delimiter::Bracket, TokenStream::new());\n    let brackets_nonempty = Group::new(Delimiter::Bracket, inner.clone());\n    let braces_empty = Group::new(Delimiter::Brace, TokenStream::new());\n    let braces_nonempty = Group::new(Delimiter::Brace, inner.clone());\n    let none_empty = Group::new(Delimiter::None, TokenStream::new());\n    let none_nonempty = Group::new(Delimiter::None, inner);\n\n    // Matches libproc_macro.\n    assert_eq!(\"()\", parens_empty.to_string());\n    assert_eq!(\"(x)\", parens_nonempty.to_string());\n    assert_eq!(\"[]\", brackets_empty.to_string());\n    assert_eq!(\"[x]\", brackets_nonempty.to_string());\n    assert_eq!(\"{ }\", braces_empty.to_string());\n    assert_eq!(\"{ x }\", braces_nonempty.to_string());\n    assert_eq!(\"\", none_empty.to_string());\n    assert_eq!(\"x\", none_nonempty.to_string());\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test_size.rs::test_proc_macro_span_size", "test": "fn test_proc_macro_span_size() {\n    assert_eq!(mem::size_of::<proc_macro::Span>(), 4);\n    assert_eq!(mem::size_of::<Option<proc_macro::Span>>(), 4);\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test_size.rs::test_proc_macro2_fallback_span_size_without_locations", "test": "fn test_proc_macro2_fallback_span_size_without_locations() {\n    assert_eq!(mem::size_of::<proc_macro2::Span>(), 0);\n    assert_eq!(mem::size_of::<Option<proc_macro2::Span>>(), 1);\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test_size.rs::test_proc_macro2_fallback_span_size_with_locations", "test": "fn test_proc_macro2_fallback_span_size_with_locations() {\n    assert_eq!(mem::size_of::<proc_macro2::Span>(), 8);\n    assert_eq!(mem::size_of::<Option<proc_macro2::Span>>(), 12);\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test_size.rs::test_proc_macro2_wrapper_span_size_without_locations", "test": "fn test_proc_macro2_wrapper_span_size_without_locations() {\n    assert_eq!(mem::size_of::<proc_macro2::Span>(), 4);\n    assert_eq!(mem::size_of::<Option<proc_macro2::Span>>(), 8);\n}", "error": "Not Definition Found"}
{"test_id": "dtolnay-proc-macro2/dtolnay-proc-macro2-c323f12/tests/test_size.rs::test_proc_macro2_wrapper_span_size_with_locations", "test": "fn test_proc_macro2_wrapper_span_size_with_locations() {\n    assert_eq!(mem::size_of::<proc_macro2::Span>(), 12);\n    assert_eq!(mem::size_of::<Option<proc_macro2::Span>>(), 12);\n}", "error": "Not Definition Found"}
