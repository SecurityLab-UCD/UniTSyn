{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/decode.rs::from_file", "test": "fn from_file() {\n  assert_eq!(\n    CommandBuilder::new(\"decode transaction.bin\")\n      .write(\"transaction.bin\", transaction())\n      .run_and_deserialize_output::<Output>(),\n    Output {\n      inscriptions: vec![Inscription {\n        body: Some(vec![0, 1, 2, 3]),\n        content_type: Some(b\"text/plain;charset=utf-8\".to_vec()),\n        ..Default::default()\n      }],\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/decode.rs::from_stdin", "test": "fn from_stdin() {\n  assert_eq!(\n    CommandBuilder::new(\"decode\")\n      .stdin(transaction())\n      .run_and_deserialize_output::<Output>(),\n    Output {\n      inscriptions: vec![Inscription {\n        body: Some(vec![0, 1, 2, 3]),\n        content_type: Some(b\"text/plain;charset=utf-8\".to_vec()),\n        ..Default::default()\n      }],\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/epochs.rs::empty", "test": "fn empty() {\n  assert_eq!(\n    CommandBuilder::new(\"epochs\").run_and_deserialize_output::<Output>(),\n    Output {\n      starting_sats: vec![\n        Sat(0),\n        Sat(1050000000000000),\n        Sat(1575000000000000),\n        Sat(1837500000000000),\n        Sat(1968750000000000),\n        Sat(2034375000000000),\n        Sat(2067187500000000),\n        Sat(2083593750000000),\n        Sat(2091796875000000),\n        Sat(2095898437500000),\n        Sat(2097949218750000),\n        Sat(2098974609270000),\n        Sat(2099487304530000),\n        Sat(2099743652160000),\n        Sat(2099871825870000),\n        Sat(2099935912620000),\n        Sat(2099967955890000),\n        Sat(2099983977420000),\n        Sat(2099991988080000),\n        Sat(2099995993410000),\n        Sat(2099997995970000),\n        Sat(2099998997250000),\n        Sat(2099999497890000),\n        Sat(2099999748210000),\n        Sat(2099999873370000),\n        Sat(2099999935950000),\n        Sat(2099999967240000),\n        Sat(2099999982780000),\n        Sat(2099999990550000),\n        Sat(2099999994330000),\n        Sat(2099999996220000),\n        Sat(2099999997060000),\n        Sat(2099999997480000),\n        Sat(2099999997690000)\n      ]\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/find.rs::find_command_returns_satpoint_for_sat", "test": "fn find_command_returns_satpoint_for_sat() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  assert_eq!(\n    CommandBuilder::new(\"--index-sats find 0\")\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output::<Output>(),\n    Output {\n      satpoint: \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b:0:0\"\n        .parse()\n        .unwrap()\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/find.rs::find_range_command_returns_satpoints_and_ranges", "test": "fn find_range_command_returns_satpoints_and_ranges() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n\n  rpc_server.mine_blocks(1);\n\n  pretty_assert_eq!(\n    CommandBuilder::new(format!(\"--index-sats find 0 {}\", 55 * COIN_VALUE))\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output::<Vec<FindRangeOutput>>(),\n    vec![\n      FindRangeOutput {\n        start: 0,\n        size: 50 * COIN_VALUE,\n        satpoint: \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b:0:0\"\n          .parse()\n          .unwrap()\n      },\n      FindRangeOutput {\n        start: 50 * COIN_VALUE,\n        size: 5 * COIN_VALUE,\n        satpoint: \"30f2f037629c6a21c1f40ed39b9bd6278df39762d68d07f49582b23bcb23386a:0:0\"\n          .parse()\n          .unwrap()\n      }\n    ]\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/index.rs::run_is_an_alias_for_update", "test": "fn run_is_an_alias_for_update() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  let tempdir = TempDir::new().unwrap();\n\n  let index_path = tempdir.path().join(\"foo.redb\");\n\n  CommandBuilder::new(format!(\"--index {} index run\", index_path.display()))\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Empty>();\n\n  assert!(index_path.is_file())\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/index.rs::custom_index_path", "test": "fn custom_index_path() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  let tempdir = TempDir::new().unwrap();\n\n  let index_path = tempdir.path().join(\"foo.redb\");\n\n  CommandBuilder::new(format!(\"--index {} index update\", index_path.display()))\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Empty>();\n\n  assert!(index_path.is_file())\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/index.rs::re_opening_database_does_not_trigger_schema_check", "test": "fn re_opening_database_does_not_trigger_schema_check() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  let tempdir = TempDir::new().unwrap();\n\n  let index_path = tempdir.path().join(\"foo.redb\");\n\n  CommandBuilder::new(format!(\"--index {} index update\", index_path.display()))\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Empty>();\n\n  assert!(index_path.is_file());\n\n  CommandBuilder::new(format!(\"--index {} index update\", index_path.display()))\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Empty>();\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/index.rs::index_runs_with_rpc_user_and_pass_as_env_vars", "test": "fn index_runs_with_rpc_user_and_pass_as_env_vars() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  let tempdir = TempDir::new().unwrap();\n\n  let ord = Command::new(executable_path(\"ord\"))\n    .args(\n      format!(\n        \"--rpc-url {} --bitcoin-data-dir {} --data-dir {} index update\",\n        rpc_server.url(),\n        tempdir.path().display(),\n        tempdir.path().display()\n      )\n      .to_args(),\n    )\n    .env(\"ORD_BITCOIN_RPC_PASS\", \"bar\")\n    .env(\"ORD_BITCOIN_RPC_USER\", \"foo\")\n    .env(\"ORD_INTEGRATION_TEST\", \"1\")\n    .current_dir(&tempdir)\n    .spawn()\n    .unwrap();\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(ord.wait_with_output().unwrap().status.code(), Some(0));\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/index.rs::export_inscription_number_to_id_tsv", "test": "fn export_inscription_number_to_id_tsv() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  let temp_dir = TempDir::new().unwrap();\n  create_wallet(&rpc_server);\n\n  inscribe(&rpc_server);\n  inscribe(&rpc_server);\n  let (inscription, _) = inscribe(&rpc_server);\n\n  rpc_server.mine_blocks(1);\n\n  let tsv = CommandBuilder::new(\"index export --tsv foo.tsv\")\n    .rpc_server(&rpc_server)\n    .temp_dir(temp_dir)\n    .stdout_regex(r\"\\{\\}\\n\")\n    .run_and_extract_file(\"foo.tsv\");\n\n  let entries: std::collections::BTreeMap<i64, ord::Object> = tsv\n    .lines()\n    .filter(|line| !line.is_empty() && !line.starts_with('#'))\n    .map(|line| {\n      let value = line.split('\\t').collect::<Vec<&str>>();\n      let inscription_number = i64::from_str(value[0]).unwrap();\n      let inscription_id = ord::Object::from_str(value[1]).unwrap();\n\n      (inscription_number, inscription_id)\n    })\n    .collect();\n\n  assert_eq!(\n    entries.get(&2).unwrap(),\n    &ord::Object::InscriptionId(inscription),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/info.rs::transactions", "test": "fn transactions() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n\n  let tempdir = TempDir::new().unwrap();\n\n  let index_path = tempdir.path().join(\"index.redb\");\n\n  assert!(CommandBuilder::new(format!(\n    \"--index {} info --transactions\",\n    index_path.display()\n  ))\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Vec<TransactionsOutput>>()\n  .is_empty());\n\n  rpc_server.mine_blocks(10);\n\n  let output = CommandBuilder::new(format!(\n    \"--index {} info --transactions\",\n    index_path.display()\n  ))\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Vec<TransactionsOutput>>();\n\n  assert_eq!(output[0].start, 0);\n  assert_eq!(output[0].end, 1);\n  assert_eq!(output[0].count, 1);\n\n  rpc_server.mine_blocks(10);\n\n  let output = CommandBuilder::new(format!(\n    \"--index {} info --transactions\",\n    index_path.display()\n  ))\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Vec<TransactionsOutput>>();\n\n  assert_eq!(output[1].start, 1);\n  assert_eq!(output[1].end, 11);\n  assert_eq!(output[1].count, 10);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/parse.rs::name", "test": "fn name() {\n  assert_eq!(\n    CommandBuilder::new(\"parse a\").run_and_deserialize_output::<Output>(),\n    Output {\n      object: Object::Integer(2099999997689999),\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/parse.rs::hash", "test": "fn hash() {\n  assert_eq!(\n    CommandBuilder::new(\"parse 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\")\n      .run_and_deserialize_output::<Output>(),\n    Output {\n      object: \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n        .parse::<Object>()\n        .unwrap(),\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/server.rs::run", "test": "fn run() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n\n  let port = TcpListener::bind(\"127.0.0.1:0\")\n    .unwrap()\n    .local_addr()\n    .unwrap()\n    .port();\n\n  let builder = CommandBuilder::new(format!(\"server --address 127.0.0.1 --http-port {port}\"))\n    .rpc_server(&rpc_server);\n\n  let mut command = builder.command();\n\n  let mut child = command.spawn().unwrap();\n\n  for attempt in 0.. {\n    if let Ok(response) = reqwest::blocking::get(format!(\"http://localhost:{port}/status\")) {\n      if response.status() == 200 {\n        assert_eq!(response.text().unwrap(), \"OK\");\n        break;\n      }\n    }\n\n    if attempt == 100 {\n      panic!(\"Server did not respond to status check\",);\n    }\n\n    thread::sleep(Duration::from_millis(50));\n  }\n\n  child.kill().unwrap();\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/subsidy.rs::genesis", "test": "fn genesis() {\n  assert_eq!(\n    CommandBuilder::new(\"subsidy 0\").run_and_deserialize_output::<Output>(),\n    Output {\n      first: 0,\n      subsidy: 5000000000,\n      name: \"nvtdijuwxlp\".into(),\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/subsidy.rs::second_block", "test": "fn second_block() {\n  assert_eq!(\n    CommandBuilder::new(\"subsidy 1\").run_and_deserialize_output::<Output>(),\n    Output {\n      first: 5000000000,\n      subsidy: 5000000000,\n      name: \"nvtcsezkbth\".into(),\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/subsidy.rs::second_to_last_block_with_subsidy", "test": "fn second_to_last_block_with_subsidy() {\n  assert_eq!(\n    CommandBuilder::new(\"subsidy 6929998\").run_and_deserialize_output::<Output>(),\n    Output {\n      first: 2099999997689998,\n      subsidy: 1,\n      name: \"b\".into(),\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/subsidy.rs::last_block_with_subsidy", "test": "fn last_block_with_subsidy() {\n  assert_eq!(\n    CommandBuilder::new(\"subsidy 6929999\").run_and_deserialize_output::<Output>(),\n    Output {\n      first: 2099999997689999,\n      subsidy: 1,\n      name: \"a\".into(),\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/supply.rs::genesis", "test": "fn genesis() {\n  assert_eq!(\n    CommandBuilder::new(\"supply\").run_and_deserialize_output::<Output>(),\n    Output {\n      supply: 2099999997690000,\n      first: 0,\n      last: 2099999997689999,\n      last_mined_in_block: 6929999\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/traits.rs::traits_command_prints_sat_traits", "test": "fn traits_command_prints_sat_traits() {\n  assert_eq!(\n    CommandBuilder::new(\"traits 0\").run_and_deserialize_output::<Output>(),\n    Output {\n      number: 0,\n      decimal: \"0.0\".into(),\n      degree: \"0°0′0″0‴\".into(),\n      name: \"nvtdijuwxlp\".into(),\n      height: 0,\n      cycle: 0,\n      epoch: 0,\n      period: 0,\n      offset: 0,\n      rarity: Rarity::Mythic,\n    }\n  );\n}\n#[test", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/balance.rs::wallet_balance", "test": "fn wallet_balance() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  assert_eq!(\n    CommandBuilder::new(\"wallet balance\")\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output::<Output>()\n      .cardinal,\n    0\n  );\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(\n    CommandBuilder::new(\"wallet balance\")\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output::<Output>()\n      .cardinal,\n    50 * COIN_VALUE\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/balance.rs::wallet_balance_only_counts_cardinal_utxos", "test": "fn wallet_balance_only_counts_cardinal_utxos() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  assert_eq!(\n    CommandBuilder::new(\"wallet balance\")\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output::<Output>()\n      .cardinal,\n    0\n  );\n\n  inscribe(&rpc_server);\n\n  assert_eq!(\n    CommandBuilder::new(\"wallet balance\")\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output::<Output>()\n      .cardinal,\n    100 * COIN_VALUE - 10_000\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/cardinals.rs::cardinals", "test": "fn cardinals() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  inscribe(&rpc_server);\n\n  let all_outputs = CommandBuilder::new(\"wallet outputs\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<Output>>();\n\n  let cardinal_outputs = CommandBuilder::new(\"wallet cardinals\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<CardinalUtxo>>();\n\n  assert_eq!(all_outputs.len() - cardinal_outputs.len(), 1);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/create.rs::create", "test": "fn create() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n\n  assert!(!rpc_server.wallets().contains(\"ord\"));\n\n  CommandBuilder::new(\"wallet create\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Output>();\n\n  assert!(rpc_server.wallets().contains(\"ord\"));\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/create.rs::seed_phrases_are_twelve_words_long", "test": "fn seed_phrases_are_twelve_words_long() {\n  let Output { mnemonic, .. } = CommandBuilder::new(\"wallet create\")\n    .rpc_server(&test_bitcoincore_rpc::spawn())\n    .run_and_deserialize_output();\n\n  assert_eq!(mnemonic.word_count(), 12);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/create.rs::wallet_creates_correct_mainnet_taproot_descriptor", "test": "fn wallet_creates_correct_mainnet_taproot_descriptor() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n\n  CommandBuilder::new(\"wallet create\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Output>();\n\n  assert_eq!(rpc_server.descriptors().len(), 2);\n  assert_regex_match!(\n    &rpc_server.descriptors()[0],\n    r\"tr\\(\\[[[:xdigit:]]{8}/86'/0'/0'\\]xprv[[:alnum:]]*/0/\\*\\)#[[:alnum:]]{8}\"\n  );\n  assert_regex_match!(\n    &rpc_server.descriptors()[1],\n    r\"tr\\(\\[[[:xdigit:]]{8}/86'/0'/0'\\]xprv[[:alnum:]]*/1/\\*\\)#[[:alnum:]]{8}\"\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/create.rs::wallet_creates_correct_test_network_taproot_descriptor", "test": "fn wallet_creates_correct_test_network_taproot_descriptor() {\n  let rpc_server = test_bitcoincore_rpc::builder()\n    .network(Network::Signet)\n    .build();\n\n  CommandBuilder::new(\"--chain signet wallet create\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Output>();\n\n  assert_eq!(rpc_server.descriptors().len(), 2);\n  assert_regex_match!(\n    &rpc_server.descriptors()[0],\n    r\"tr\\(\\[[[:xdigit:]]{8}/86'/1'/0'\\]tprv[[:alnum:]]*/0/\\*\\)#[[:alnum:]]{8}\"\n  );\n  assert_regex_match!(\n    &rpc_server.descriptors()[1],\n    r\"tr\\(\\[[[:xdigit:]]{8}/86'/1'/0'\\]tprv[[:alnum:]]*/1/\\*\\)#[[:alnum:]]{8}\"\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/create.rs::create_with_different_name", "test": "fn create_with_different_name() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n\n  assert!(!rpc_server.wallets().contains(\"inscription-wallet\"));\n\n  CommandBuilder::new(\"--wallet inscription-wallet wallet create\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Output>();\n\n  assert!(rpc_server.wallets().contains(\"inscription-wallet\"));\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::inscribe_creates_inscriptions", "test": "fn inscribe_creates_inscriptions() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let (inscription, _) = inscribe(&rpc_server);\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let request =\n    TestServer::spawn_with_args(&rpc_server, &[]).request(format!(\"/content/{inscription}\"));\n\n  assert_eq!(request.status(), 200);\n  assert_eq!(\n    request.headers().get(\"content-type\").unwrap(),\n    \"text/plain;charset=utf-8\"\n  );\n  assert_eq!(request.text().unwrap(), \"FOO\");\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::inscribe_no_backup", "test": "fn inscribe_no_backup() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  create_wallet(&rpc_server);\n  assert_eq!(rpc_server.descriptors().len(), 2);\n\n  CommandBuilder::new(\"wallet inscribe --file hello.txt --no-backup --fee-rate 1\")\n    .write(\"hello.txt\", \"HELLOWORLD\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  assert_eq!(rpc_server.descriptors().len(), 2);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::inscribe_with_dry_run_flag", "test": "fn inscribe_with_dry_run_flag() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n  rpc_server.mine_blocks(1);\n\n  CommandBuilder::new(\"wallet inscribe --dry-run --file degenerate.png --fee-rate 1\")\n    .write(\"degenerate.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  assert!(rpc_server.mempool().is_empty());\n\n  CommandBuilder::new(\"wallet inscribe --file degenerate.png --fee-rate 1\")\n    .write(\"degenerate.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  assert_eq!(rpc_server.mempool().len(), 2);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::inscribe_to_specific_destination", "test": "fn inscribe_to_specific_destination() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n  rpc_server.mine_blocks(1);\n\n  let destination = CommandBuilder::new(\"wallet receive\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<ord::subcommand::wallet::receive::Output>()\n    .address;\n\n  let txid = CommandBuilder::new(format!(\n    \"wallet inscribe --destination {} --file degenerate.png --fee-rate 1\",\n    destination.clone().assume_checked()\n  ))\n  .write(\"degenerate.png\", [1; 520])\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Inscribe>()\n  .reveal;\n\n  let reveal_tx = &rpc_server.mempool()[1]; // item 0 is the commit, item 1 is the reveal.\n  assert_eq!(reveal_tx.txid(), txid);\n  assert_eq!(\n    reveal_tx.output.first().unwrap().script_pubkey,\n    destination.payload.script_pubkey()\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::inscribe_with_parent_inscription_and_fee_rate", "test": "fn inscribe_with_parent_inscription_and_fee_rate() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n  rpc_server.mine_blocks(1);\n\n  let parent_output = CommandBuilder::new(\"wallet inscribe --fee-rate 5.0 --file parent.png\")\n    .write(\"parent.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n  let parent_id = parent_output.inscriptions[0].id;\n\n  let commit_tx = &rpc_server.mempool()[0];\n  let reveal_tx = &rpc_server.mempool()[1];\n\n  assert_eq!(\n    ord::FeeRate::try_from(5.0)\n      .unwrap()\n      .fee(commit_tx.vsize() + reveal_tx.vsize())\n      .to_sat(),\n    parent_output.total_fees\n  );\n\n  rpc_server.mine_blocks(1);\n\n  let child_output = CommandBuilder::new(format!(\n    \"wallet inscribe --fee-rate 7.3 --parent {parent_id} --file child.png\"\n  ))\n  .write(\"child.png\", [1; 520])\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Inscribe>();\n\n  assert_eq!(rpc_server.descriptors().len(), 4);\n  assert_eq!(parent_id, child_output.parent.unwrap());\n\n  let commit_tx = &rpc_server.mempool()[0];\n  let reveal_tx = &rpc_server.mempool()[1];\n\n  assert_eq!(\n    ord::FeeRate::try_from(7.3)\n      .unwrap()\n      .fee(commit_tx.vsize() + reveal_tx.vsize())\n      .to_sat(),\n    child_output.total_fees\n  );\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", child_output.parent.unwrap()),\n    format!(\n      \".*<dt>children</dt>.*<a href=/inscription/{}>.*\",\n      child_output.inscriptions[0].id\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", child_output.inscriptions[0].id),\n    format!(\n      \".*<dt>parent</dt>.*<a class=monospace href=/inscription/{}>.*\",\n      child_output.parent.unwrap()\n    ),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::reinscribe_with_flag", "test": "fn reinscribe_with_flag() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let inscribe = CommandBuilder::new(\"wallet inscribe --file tulip.png --fee-rate 5.0 \")\n    .write(\"tulip.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let txid = rpc_server.mine_blocks(1)[0].txdata[2].txid();\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n  let request = ord_server.request(format!(\"/content/{}\", inscribe.inscriptions[0].id));\n\n  assert_eq!(request.status(), 200);\n\n  let reinscribe = CommandBuilder::new(format!(\n    \"wallet inscribe --file orchid.png --fee-rate 1.1 --reinscribe --satpoint {txid}:0:0\"\n  ))\n  .write(\"orchid.png\", [1; 520])\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[\"--index-sats\"]);\n  let request = ord_server.request(format!(\"/content/{}\", reinscribe.inscriptions[0].id));\n\n  assert_eq!(request.status(), 200);\n  ord_server.assert_response_regex(\n    format!(\"/sat/{}\", 50 * COIN_VALUE),\n    format!(\n      \".*<dt>inscriptions</dt>.*<a href=/inscription/{}>.*<a href=/inscription/{}>.*\",\n      inscribe.inscriptions[0].id, reinscribe.inscriptions[0].id\n    ),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::with_reinscribe_flag_but_not_actually_a_reinscription", "test": "fn with_reinscribe_flag_but_not_actually_a_reinscription() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  CommandBuilder::new(\"wallet inscribe --file tulip.png --fee-rate 5.0 \")\n    .write(\"tulip.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  let coinbase = rpc_server.mine_blocks(1)[0].txdata[0].txid();\n\n  CommandBuilder::new(format!(\n    \"wallet inscribe --file orchid.png --fee-rate 1.1 --reinscribe --satpoint {coinbase}:0:0\"\n  ))\n  .write(\"orchid.png\", [1; 520])\n  .rpc_server(&rpc_server)\n  .expected_exit_code(1)\n  .stderr_regex(\"error: reinscribe flag set but this would not be a reinscription.*\")\n  .run_and_extract_stdout();\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::try_reinscribe_without_flag", "test": "fn try_reinscribe_without_flag() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let reveal_txid = CommandBuilder::new(\"wallet inscribe --file tulip.png --fee-rate 5.0 \")\n    .write(\"tulip.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>()\n    .reveal;\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  rpc_server.mine_blocks(1);\n\n  CommandBuilder::new(format!(\n    \"wallet inscribe --file orchid.png --fee-rate 1.1 --satpoint {reveal_txid}:0:0\"\n  ))\n  .write(\"orchid.png\", [1; 520])\n  .rpc_server(&rpc_server)\n  .expected_exit_code(1)\n  .stderr_regex(format!(\n    \"error: sat at {reveal_txid}:0:0 already inscribed.*\"\n  ))\n  .run_and_extract_stdout();\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::no_metadata_appears_on_inscription_page_if_no_metadata_is_passed", "test": "fn no_metadata_appears_on_inscription_page_if_no_metadata_is_passed() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n  rpc_server.mine_blocks(1);\n\n  let Inscribe { inscriptions, .. } =\n    CommandBuilder::new(\"wallet inscribe --fee-rate 1 --file content.png\")\n      .write(\"content.png\", [1; 520])\n      .rpc_server(&rpc_server)\n      .run_and_deserialize_output();\n\n  let inscription = inscriptions[0].id;\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  assert!(!ord_server\n    .request(format!(\"/inscription/{inscription}\"),)\n    .text()\n    .unwrap()\n    .contains(\"metadata\"));\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_inscribe_fails_if_batchfile_has_no_inscriptions", "test": "fn batch_inscribe_fails_if_batchfile_has_no_inscriptions() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  CommandBuilder::new(\"wallet inscribe --fee-rate 2.1 --batch batch.yaml\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"batch.yaml\", \"mode: shared-output\\ninscriptions: []\\n\")\n    .rpc_server(&rpc_server)\n    .stderr_regex(\".*batchfile must contain at least one inscription.*\")\n    .expected_exit_code(1)\n    .run_and_extract_stdout();\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_inscribe_can_create_one_inscription", "test": "fn batch_inscribe_can_create_one_inscription() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 2.1 --batch batch.yaml\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\n      \"batch.yaml\",\n      \"mode: shared-output\\ninscriptions:\\n- file: inscription.txt\\n  metadata: 123\\n  metaprotocol: foo\",\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  let request = ord_server.request(format!(\"/content/{}\", output.inscriptions[0].id));\n\n  assert_eq!(request.status(), 200);\n  assert_eq!(\n    request.headers().get(\"content-type\").unwrap(),\n    \"text/plain;charset=utf-8\"\n  );\n  assert_eq!(request.text().unwrap(), \"Hello World\");\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[0].id),\n    r\".*<dt>metadata</dt>\\s*<dd>\\n    123\\n  </dd>.*<dt>metaprotocol</dt>\\s*<dd>foo</dd>.*\",\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_inscribe_with_multiple_inscriptions", "test": "fn batch_inscribe_with_multiple_inscriptions() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet inscribe --batch batch.yaml --fee-rate 55\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"tulip.png\", [0; 555])\n    .write(\"meow.wav\", [0; 2048])\n    .write(\n      \"batch.yaml\",\n      \"mode: shared-output\\ninscriptions:\\n- file: inscription.txt\\n- file: tulip.png\\n- file: meow.wav\\n\"\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let request = TestServer::spawn_with_args(&rpc_server, &[])\n    .request(format!(\"/content/{}\", output.inscriptions[0].id));\n  assert_eq!(request.status(), 200);\n  assert_eq!(\n    request.headers().get(\"content-type\").unwrap(),\n    \"text/plain;charset=utf-8\"\n  );\n  assert_eq!(request.text().unwrap(), \"Hello World\");\n\n  let request = TestServer::spawn_with_args(&rpc_server, &[])\n    .request(format!(\"/content/{}\", output.inscriptions[1].id));\n  assert_eq!(request.status(), 200);\n  assert_eq!(request.headers().get(\"content-type\").unwrap(), \"image/png\");\n\n  let request = TestServer::spawn_with_args(&rpc_server, &[])\n    .request(format!(\"/content/{}\", output.inscriptions[2].id));\n  assert_eq!(request.status(), 200);\n  assert_eq!(request.headers().get(\"content-type\").unwrap(), \"audio/wav\");\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_inscribe_with_multiple_inscriptions_with_parent", "test": "fn batch_inscribe_with_multiple_inscriptions_with_parent() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let parent_output = CommandBuilder::new(\"wallet inscribe --fee-rate 5.0 --file parent.png\")\n    .write(\"parent.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let parent_id = parent_output.inscriptions[0].id;\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 1 --batch batch.yaml\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"tulip.png\", [0; 555])\n    .write(\"meow.wav\", [0; 2048])\n    .write(\n      \"batch.yaml\",\n      format!(\"parent: {parent_id}\\nmode: shared-output\\ninscriptions:\\n- file: inscription.txt\\n- file: tulip.png\\n- file: meow.wav\\n\")\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[0].id),\n    r\".*<dt>parent</dt>\\s*<dd>.*</dd>.*\",\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[1].id),\n    r\".*<dt>parent</dt>\\s*<dd>.*</dd>.*\",\n  );\n\n  let request = TestServer::spawn_with_args(&rpc_server, &[])\n    .request(format!(\"/content/{}\", output.inscriptions[2].id));\n  assert_eq!(request.status(), 200);\n  assert_eq!(request.headers().get(\"content-type\").unwrap(), \"audio/wav\");\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_inscribe_respects_dry_run_flag", "test": "fn batch_inscribe_respects_dry_run_flag() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 2.1 --batch batch.yaml --dry-run\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\n      \"batch.yaml\",\n      \"mode: shared-output\\ninscriptions:\\n- file: inscription.txt\\n\",\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  assert!(rpc_server.mempool().is_empty());\n\n  let request = TestServer::spawn_with_args(&rpc_server, &[])\n    .request(format!(\"/content/{}\", output.inscriptions[0].id));\n\n  assert_eq!(request.status(), 404);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_in_same_output_but_different_satpoints", "test": "fn batch_in_same_output_but_different_satpoints() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 1 --batch batch.yaml\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"tulip.png\", [0; 555])\n    .write(\"meow.wav\", [0; 2048])\n    .write(\n      \"batch.yaml\",\n      \"mode: shared-output\\ninscriptions:\\n- file: inscription.txt\\n- file: tulip.png\\n- file: meow.wav\\n\"\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  let outpoint = output.inscriptions[0].location.outpoint;\n  for (i, inscription) in output.inscriptions.iter().enumerate() {\n    assert_eq!(\n      inscription.location,\n      SatPoint {\n        outpoint,\n        offset: u64::try_from(i).unwrap() * 10_000,\n      }\n    );\n  }\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  let outpoint = output.inscriptions[0].location.outpoint;\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[0].id),\n    format!(\n      r\".*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      outpoint\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[1].id),\n    format!(\n      r\".*<dt>location</dt>.*<dd class=monospace>{}:10000</dd>.*\",\n      outpoint\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[2].id),\n    format!(\n      r\".*<dt>location</dt>.*<dd class=monospace>{}:20000</dd>.*\",\n      outpoint\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/output/{}\", output.inscriptions[0].location.outpoint),\n    format!(r\".*<a href=/inscription/{}>.*</a>.*<a href=/inscription/{}>.*</a>.*<a href=/inscription/{}>.*</a>.*\", output.inscriptions[0].id, output.inscriptions[1].id, output.inscriptions[2].id),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_in_same_output_with_non_default_postage", "test": "fn batch_in_same_output_with_non_default_postage() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 1 --batch batch.yaml --postage 777sat\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"tulip.png\", [0; 555])\n    .write(\"meow.wav\", [0; 2048])\n    .write(\n      \"batch.yaml\",\n      \"mode: shared-output\\ninscriptions:\\n- file: inscription.txt\\n- file: tulip.png\\n- file: meow.wav\\n\"\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  let outpoint = output.inscriptions[0].location.outpoint;\n  for (i, inscription) in output.inscriptions.iter().enumerate() {\n    assert_eq!(\n      inscription.location,\n      SatPoint {\n        outpoint,\n        offset: u64::try_from(i).unwrap() * 777,\n      }\n    );\n  }\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  let outpoint = output.inscriptions[0].location.outpoint;\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[0].id),\n    format!(\n      r\".*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      outpoint\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[1].id),\n    format!(\n      r\".*<dt>location</dt>.*<dd class=monospace>{}:777</dd>.*\",\n      outpoint\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[2].id),\n    format!(\n      r\".*<dt>location</dt>.*<dd class=monospace>{}:1554</dd>.*\",\n      outpoint\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/output/{}\", output.inscriptions[0].location.outpoint),\n    format!(r\".*<a href=/inscription/{}>.*</a>.*<a href=/inscription/{}>.*</a>.*<a href=/inscription/{}>.*</a>.*\", output.inscriptions[0].id, output.inscriptions[1].id, output.inscriptions[2].id),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_in_separate_outputs_with_parent", "test": "fn batch_in_separate_outputs_with_parent() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let parent_output = CommandBuilder::new(\"wallet inscribe --fee-rate 5.0 --file parent.png\")\n    .write(\"parent.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let parent_id = parent_output.inscriptions[0].id;\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 1 --batch batch.yaml\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"tulip.png\", [0; 555])\n    .write(\"meow.wav\", [0; 2048])\n    .write(\n      \"batch.yaml\",\n      format!(\"parent: {parent_id}\\nmode: separate-outputs\\ninscriptions:\\n- file: inscription.txt\\n- file: tulip.png\\n- file: meow.wav\\n\")\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  for inscription in &output.inscriptions {\n    assert_eq!(inscription.location.offset, 0);\n  }\n  let mut outpoints = output\n    .inscriptions\n    .iter()\n    .map(|inscription| inscription.location.outpoint)\n    .collect::<Vec<OutPoint>>();\n  outpoints.sort();\n  outpoints.dedup();\n  assert_eq!(outpoints.len(), output.inscriptions.len());\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  let output_1 = output.inscriptions[0].location.outpoint;\n  let output_2 = output.inscriptions[1].location.outpoint;\n  let output_3 = output.inscriptions[2].location.outpoint;\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[0].id),\n    format!(\n      r\".*<dt>parent</dt>\\s*<dd>.*{parent_id}.*</dd>.*<dt>output value</dt>.*<dd>10000</dd>.*.*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      output_1\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[1].id),\n    format!(\n      r\".*<dt>parent</dt>\\s*<dd>.*{parent_id}.*</dd>.*<dt>output value</dt>.*<dd>10000</dd>.*.*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      output_2\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[2].id),\n    format!(\n      r\".*<dt>parent</dt>\\s*<dd>.*{parent_id}.*</dd>.*<dt>output value</dt>.*<dd>10000</dd>.*.*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      output_3\n    ),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscribe.rs::batch_in_separate_outputs_with_parent_and_non_default_postage", "test": "fn batch_in_separate_outputs_with_parent_and_non_default_postage() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 0);\n\n  create_wallet(&rpc_server);\n\n  let parent_output = CommandBuilder::new(\"wallet inscribe --fee-rate 5.0 --file parent.png\")\n    .write(\"parent.png\", [1; 520])\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  rpc_server.mine_blocks(1);\n\n  assert_eq!(rpc_server.descriptors().len(), 3);\n\n  let parent_id = parent_output.inscriptions[0].id;\n\n  let output = CommandBuilder::new(\"wallet inscribe --fee-rate 1 --batch batch.yaml --postage 777sat\")\n    .write(\"inscription.txt\", \"Hello World\")\n    .write(\"tulip.png\", [0; 555])\n    .write(\"meow.wav\", [0; 2048])\n    .write(\n      \"batch.yaml\",\n      format!(\"parent: {parent_id}\\nmode: separate-outputs\\ninscriptions:\\n- file: inscription.txt\\n- file: tulip.png\\n- file: meow.wav\\n\")\n    )\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Inscribe>();\n\n  for inscription in &output.inscriptions {\n    assert_eq!(inscription.location.offset, 0);\n  }\n\n  let mut outpoints = output\n    .inscriptions\n    .iter()\n    .map(|inscription| inscription.location.outpoint)\n    .collect::<Vec<OutPoint>>();\n  outpoints.sort();\n  outpoints.dedup();\n  assert_eq!(outpoints.len(), output.inscriptions.len());\n\n  rpc_server.mine_blocks(1);\n\n  let ord_server = TestServer::spawn_with_args(&rpc_server, &[]);\n\n  let output_1 = output.inscriptions[0].location.outpoint;\n  let output_2 = output.inscriptions[1].location.outpoint;\n  let output_3 = output.inscriptions[2].location.outpoint;\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[0].id),\n    format!(\n      r\".*<dt>parent</dt>\\s*<dd>.*{parent_id}.*</dd>.*<dt>output value</dt>.*<dd>777</dd>.*.*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      output_1\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[1].id),\n    format!(\n      r\".*<dt>parent</dt>\\s*<dd>.*{parent_id}.*</dd>.*<dt>output value</dt>.*<dd>777</dd>.*.*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      output_2\n    ),\n  );\n\n  ord_server.assert_response_regex(\n    format!(\"/inscription/{}\", output.inscriptions[2].id),\n    format!(\n      r\".*<dt>parent</dt>\\s*<dd>.*{parent_id}.*</dd>.*<dt>output value</dt>.*<dd>777</dd>.*.*<dt>location</dt>.*<dd class=monospace>{}:0</dd>.*\",\n      output_3\n    ),\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscriptions.rs::inscriptions", "test": "fn inscriptions() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n  rpc_server.mine_blocks(1);\n\n  let (inscription, reveal) = inscribe(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet inscriptions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<inscriptions::Output>>();\n\n  assert_eq!(output.len(), 1);\n  assert_eq!(output[0].inscription, inscription);\n  assert_eq!(output[0].location, format!(\"{reveal}:0:0\").parse().unwrap());\n  assert_eq!(\n    output[0].explorer,\n    format!(\"https://ordinals.com/inscription/{inscription}\")\n  );\n\n  let address = CommandBuilder::new(\"wallet receive\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<receive::Output>()\n    .address;\n\n  let txid = CommandBuilder::new(format!(\n    \"wallet send --fee-rate 1 {} {inscription}\",\n    address.assume_checked()\n  ))\n  .rpc_server(&rpc_server)\n  .expected_exit_code(0)\n  .stdout_regex(\".*\")\n  .run_and_deserialize_output::<send::Output>()\n  .transaction;\n\n  rpc_server.mine_blocks(1);\n\n  let output = CommandBuilder::new(\"wallet inscriptions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<inscriptions::Output>>();\n\n  assert_eq!(output.len(), 1);\n  assert_eq!(output[0].inscription, inscription);\n  assert_eq!(output[0].location, format!(\"{txid}:0:0\").parse().unwrap());\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/inscriptions.rs::inscriptions_includes_locked_utxos", "test": "fn inscriptions_includes_locked_utxos() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  rpc_server.mine_blocks(1);\n\n  let (inscription, reveal) = inscribe(&rpc_server);\n\n  rpc_server.mine_blocks(1);\n\n  rpc_server.lock(OutPoint {\n    txid: reveal,\n    vout: 0,\n  });\n\n  let output = CommandBuilder::new(\"wallet inscriptions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<inscriptions::Output>>();\n\n  assert_eq!(output.len(), 1);\n  assert_eq!(output[0].inscription, inscription);\n  assert_eq!(output[0].location, format!(\"{reveal}:0:0\").parse().unwrap());\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/receive.rs::receive", "test": "fn receive() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(\"wallet receive\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Output>();\n\n  assert!(output.address.is_valid_for_network(Network::Bitcoin));\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/send.rs::send_on_mainnnet_works_with_wallet_named_ord", "test": "fn send_on_mainnnet_works_with_wallet_named_ord() {\n  let rpc_server = test_bitcoincore_rpc::builder().build();\n  let txid = rpc_server.mine_blocks_with_subsidy(1, 1_000_000)[0].txdata[0].txid();\n  create_wallet(&rpc_server);\n\n  let output = CommandBuilder::new(format!(\n    \"wallet send --fee-rate 1 bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4 {txid}:0:0\"\n  ))\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Output>();\n\n  assert_eq!(rpc_server.mempool()[0].txid(), output.transaction);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/send.rs::send_btc_with_fee_rate", "test": "fn send_btc_with_fee_rate() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  rpc_server.mine_blocks(1);\n\n  let output = CommandBuilder::new(\n    \"wallet send --fee-rate 13.3 bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4 1btc\",\n  )\n  .rpc_server(&rpc_server)\n  .run_and_deserialize_output::<Output>();\n\n  let tx = &rpc_server.mempool()[0];\n  let mut fee = 0;\n  for input in &tx.input {\n    fee += rpc_server\n      .get_utxo_amount(&input.previous_output)\n      .unwrap()\n      .to_sat();\n  }\n  for output in &tx.output {\n    fee -= output.value;\n  }\n\n  let fee_rate = fee as f64 / tx.vsize() as f64;\n\n  assert!(f64::abs(fee_rate - 13.3) < 0.1);\n\n  assert_eq!(\n    output.transaction,\n    \"0000000000000000000000000000000000000000000000000000000000000000\"\n      .parse()\n      .unwrap()\n  );\n\n  assert_eq!(\n    rpc_server.sent(),\n    &[Sent {\n      amount: 1.0,\n      address: \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\"\n        .parse::<Address<NetworkUnchecked>>()\n        .unwrap()\n        .assume_checked(),\n      locked: Vec::new(),\n    }]\n  );\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/transactions.rs::transactions", "test": "fn transactions() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  assert!(rpc_server.loaded_wallets().is_empty());\n\n  CommandBuilder::new(\"wallet transactions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<Output>>();\n\n  assert_eq!(rpc_server.loaded_wallets().len(), 1);\n  assert_eq!(rpc_server.loaded_wallets().first().unwrap(), \"ord\");\n\n  rpc_server.mine_blocks(1);\n\n  let output = CommandBuilder::new(\"wallet transactions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<Output>>();\n\n  assert_regex_match!(output[0].transaction.to_string(), \"[[:xdigit:]]{64}\");\n  assert_eq!(output[0].confirmations, 1);\n}", "error": "Not Definition Found"}
{"test_id": "ordinals-ord/ordinals-ord-8090538/tests/wallet/transactions.rs::transactions_with_limit", "test": "fn transactions_with_limit() {\n  let rpc_server = test_bitcoincore_rpc::spawn();\n  create_wallet(&rpc_server);\n\n  CommandBuilder::new(\"wallet transactions\")\n    .rpc_server(&rpc_server)\n    .stdout_regex(\".*\")\n    .run_and_extract_stdout();\n\n  rpc_server.mine_blocks(1);\n\n  let output = CommandBuilder::new(\"wallet transactions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<Output>>();\n\n  assert_regex_match!(output[0].transaction.to_string(), \"[[:xdigit:]]{64}\");\n  assert_eq!(output[0].confirmations, 1);\n\n  rpc_server.mine_blocks(1);\n\n  let output = CommandBuilder::new(\"wallet transactions\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<Output>>();\n\n  assert_regex_match!(output[1].transaction.to_string(), \"[[:xdigit:]]{64}\");\n  assert_eq!(output[1].confirmations, 2);\n\n  let output = CommandBuilder::new(\"wallet transactions --limit 1\")\n    .rpc_server(&rpc_server)\n    .run_and_deserialize_output::<Vec<Output>>();\n\n  assert_regex_match!(output[0].transaction.to_string(), \"[[:xdigit:]]{64}\");\n  assert_eq!(output[0].confirmations, 1);\n}", "error": "Not Definition Found"}
