{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests/aes_encryption.rs::aes256_encrypted_uncompressed_file", "test": "fn aes256_encrypted_uncompressed_file() {\n    let mut v = Vec::new();\n    v.extend_from_slice(include_bytes!(\"data/aes_archive.zip\"));\n    let mut archive = ZipArchive::new(io::Cursor::new(v)).expect(\"couldn't open test zip file\");\n\n    let mut file = archive\n        .by_name_decrypt(\"secret_data_256_uncompressed\", PASSWORD)\n        .expect(\"couldn't find file in archive\")\n        .expect(\"invalid password\");\n    assert_eq!(\"secret_data_256_uncompressed\", file.name());\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"couldn't read encrypted file\");\n    assert_eq!(SECRET_CONTENT, content);\n}", "code_id": "zip-rs-zip/zip-rs-zip-ed187d6/src/read.rs::name", "code": "pub fn name(&self) -> &str {\n        &self.data.file_name\n    }", "docstring": null}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests/aes_encryption.rs::aes256_encrypted_file", "test": "fn aes256_encrypted_file() {\n    let mut v = Vec::new();\n    v.extend_from_slice(include_bytes!(\"data/aes_archive.zip\"));\n    let mut archive = ZipArchive::new(io::Cursor::new(v)).expect(\"couldn't open test zip file\");\n\n    let mut file = archive\n        .by_name_decrypt(\"secret_data_256\", PASSWORD)\n        .expect(\"couldn't find file in archive\")\n        .expect(\"invalid password\");\n    assert_eq!(\"secret_data_256\", file.name());\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"couldn't read encrypted and compressed file\");\n    assert_eq!(SECRET_CONTENT, content);\n}", "code_id": "zip-rs-zip/zip-rs-zip-ed187d6/src/read.rs::name", "code": "pub fn name(&self) -> &str {\n        &self.data.file_name\n    }", "docstring": null}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests/aes_encryption.rs::aes192_encrypted_file", "test": "fn aes192_encrypted_file() {\n    let mut v = Vec::new();\n    v.extend_from_slice(include_bytes!(\"data/aes_archive.zip\"));\n    let mut archive = ZipArchive::new(io::Cursor::new(v)).expect(\"couldn't open test zip file\");\n\n    let mut file = archive\n        .by_name_decrypt(\"secret_data_192\", PASSWORD)\n        .expect(\"couldn't find file in archive\")\n        .expect(\"invalid password\");\n    assert_eq!(\"secret_data_192\", file.name());\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"couldn't read encrypted file\");\n    assert_eq!(SECRET_CONTENT, content);\n}", "code_id": "zip-rs-zip/zip-rs-zip-ed187d6/src/read.rs::name", "code": "pub fn name(&self) -> &str {\n        &self.data.file_name\n    }", "docstring": null}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests/aes_encryption.rs::aes128_encrypted_file", "test": "fn aes128_encrypted_file() {\n    let mut v = Vec::new();\n    v.extend_from_slice(include_bytes!(\"data/aes_archive.zip\"));\n    let mut archive = ZipArchive::new(io::Cursor::new(v)).expect(\"couldn't open test zip file\");\n\n    let mut file = archive\n        .by_name_decrypt(\"secret_data_128\", PASSWORD)\n        .expect(\"couldn't find file in archive\")\n        .expect(\"invalid password\");\n    assert_eq!(\"secret_data_128\", file.name());\n\n    let mut content = String::new();\n    file.read_to_string(&mut content)\n        .expect(\"couldn't read encrypted file\");\n    assert_eq!(SECRET_CONTENT, content);\n}", "code_id": "zip-rs-zip/zip-rs-zip-ed187d6/src/read.rs::name", "code": "pub fn name(&self) -> &str {\n        &self.data.file_name\n    }", "docstring": null}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests/zip_comment_garbage.rs::correctly_handle_zip_with_garbage_after_comment", "test": "fn correctly_handle_zip_with_garbage_after_comment() {\n    let mut v = Vec::new();\n    v.extend_from_slice(include_bytes!(\"../tests/data/comment_garbage.zip\"));\n    let archive = ZipArchive::new(io::Cursor::new(v)).expect(\"couldn't open test zip file\");\n\n    assert_eq!(archive.comment(), \"short.\".as_bytes());\n}", "code_id": "zip-rs-zip/zip-rs-zip-ed187d6/src/read.rs::comment", "code": "pub fn comment(&self) -> &[u8] {\n        &self.shared.comment\n    }", "docstring": null}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests/zip_crypto.rs::encrypted_file", "test": "fn encrypted_file() {\n    let zip_file_bytes = &mut Cursor::new(vec![\n        0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0xbd, 0xb5, 0x50, 0x2f,\n        0x20, 0x79, 0x55, 0x2f, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,\n        0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0xca, 0x2d, 0x1d, 0x27, 0x19, 0x19, 0x63,\n        0x43, 0x77, 0x9a, 0x71, 0x76, 0xc9, 0xec, 0xd1, 0x6f, 0xd9, 0xf5, 0x22, 0x67, 0xb3, 0x8f,\n        0x52, 0xb5, 0x41, 0xbc, 0x5c, 0x36, 0xf2, 0x1d, 0x84, 0xc3, 0xc0, 0x28, 0x3b, 0xfd, 0xe1,\n        0x70, 0xc2, 0xcc, 0x0c, 0x11, 0x0c, 0xc5, 0x95, 0x2f, 0xa4, 0x50, 0x4b, 0x01, 0x02, 0x3f,\n        0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0xbd, 0xb5, 0x50, 0x2f, 0x20, 0x79, 0x55,\n        0x2f, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x08, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74,\n        0x2e, 0x74, 0x78, 0x74, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18,\n        0x00, 0x31, 0xb2, 0x3b, 0xbf, 0xb8, 0x2f, 0xd6, 0x01, 0x31, 0xb2, 0x3b, 0xbf, 0xb8, 0x2f,\n        0xd6, 0x01, 0xa8, 0xc4, 0x45, 0xbd, 0xb8, 0x2f, 0xd6, 0x01, 0x50, 0x4b, 0x05, 0x06, 0x00,\n        0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ]);\n\n    let mut archive = zip::ZipArchive::new(zip_file_bytes).unwrap();\n\n    assert_eq!(archive.len(), 1); //Only one file inside archive: `test.txt`\n\n    {\n        // No password\n        let file = archive.by_index(0);\n        match file {\n            Err(zip::result::ZipError::UnsupportedArchive(\n                zip::result::ZipError::PASSWORD_REQUIRED,\n            )) => (),\n            Err(_) => panic!(\n                \"Expected PasswordRequired error when opening encrypted file without password\"\n            ),\n            Ok(_) => panic!(\"Error: Successfully opened encrypted file without password?!\"),\n        }\n    }\n\n    {\n        // Wrong password\n        let file = archive.by_index_decrypt(0, b\"wrong password\");\n        match file {\n            Ok(Err(zip::result::InvalidPassword)) => (),\n            Err(_) => panic!(\n                \"Expected InvalidPassword error when opening encrypted file with wrong password\"\n            ),\n            Ok(Ok(_)) => panic!(\"Error: Successfully opened encrypted file with wrong password?!\"),\n        }\n    }\n\n    {\n        // Correct password, read contents\n        let mut file = archive\n            .by_index_decrypt(0, \"test\".as_bytes())\n            .unwrap()\n            .unwrap();\n        let file_name = file.enclosed_name().unwrap();\n        assert_eq!(file_name, std::path::PathBuf::from(\"test.txt\"));\n\n        let mut data = Vec::new();\n        file.read_to_end(&mut data).unwrap();\n        assert_eq!(data, \"abcdefghijklmnopqrstuvwxyz123456789\".as_bytes());\n    }\n}", "code_id": "zip-rs-zip/zip-rs-zip-ed187d6/src/read.rs::len", "code": "pub fn len(&self) -> usize {\n        self.shared.files.len()\n    }", "docstring": null}
