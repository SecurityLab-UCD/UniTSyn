{"test_id": "image-rs-jpeg-decoder/image-rs-jpeg-decoder-cacc433/tests/lib.rs::read_info", "test": "fn read_info() {\n    let path = Path::new(\"tests\").join(\"reftest\").join(\"images\").join(\"mozilla\").join(\"jpg-progressive.jpg\");\n\n    let mut decoder = jpeg::Decoder::new(File::open(&path).unwrap());\n    let ref_data = decoder.decode().unwrap();\n    let ref_info = decoder.info().unwrap();\n\n    decoder = jpeg::Decoder::new(File::open(&path).unwrap());\n    decoder.read_info().unwrap();\n    let info = decoder.info().unwrap();\n    let data = decoder.decode().unwrap();\n\n    assert_eq!(info, decoder.info().unwrap());\n    assert_eq!(info, ref_info);\n    assert_eq!(data, ref_data);\n}", "code_id": "image-rs-jpeg-decoder/image-rs-jpeg-decoder-cacc433/src/decoder.rs::info", "code": "pub fn info(&self) -> Option<ImageInfo> {\n        match self.frame {\n            Some(ref frame) => {\n                let pixel_format = match frame.components.len() {\n                    1 => match frame.precision {\n                        8 => PixelFormat::L8,\n                        16 => PixelFormat::L16,\n                        _ => panic!(),\n                    },\n                    3 => PixelFormat::RGB24,\n                    4 => PixelFormat::CMYK32,\n                    _ => panic!(),\n                };\n\n                Some(ImageInfo {\n                    width: frame.output_size.width,\n                    height: frame.output_size.height,\n                    pixel_format,\n                    coding_process: frame.coding_process,\n                })\n            }\n            None => None,\n        }\n    }", "docstring": null}
