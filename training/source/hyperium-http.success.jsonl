{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::smoke", "test": "fn smoke() {\n    let mut headers = HeaderMap::new();\n\n    assert!(headers.get(\"hello\").is_none());\n\n    let name: HeaderName = \"hello\".parse().unwrap();\n\n    match headers.entry(&name) {\n        Entry::Vacant(e) => {\n            e.insert(\"world\".parse().unwrap());\n        }\n        _ => panic!(),\n    }\n\n    assert!(headers.get(\"hello\").is_some());\n\n    match headers.entry(&name) {\n        Entry::Occupied(mut e) => {\n            assert_eq!(e.get(), &\"world\");\n\n            // Push another value\n            e.append(\"zomg\".parse().unwrap());\n\n            let mut i = e.iter();\n\n            assert_eq!(*i.next().unwrap(), \"world\");\n            assert_eq!(*i.next().unwrap(), \"zomg\");\n            assert!(i.next().is_none());\n        }\n        _ => panic!(),\n    }\n}", "code_id": "hyperium-http/hyperium-http-818269d/src/header/map.rs::is_none", "code": "fn is_none(&self) -> bool {\n        self.index == !0\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::drain", "test": "fn drain() {\n    let mut headers = HeaderMap::new();\n\n    // Insert a single value\n    let name: HeaderName = \"hello\".parse().unwrap();\n    headers.insert(name, \"world\".parse().unwrap());\n\n    {\n        let mut iter = headers.drain();\n        let (name, value) = iter.next().unwrap();\n        assert_eq!(name.unwrap().as_str(), \"hello\");\n\n        assert_eq!(value, \"world\");\n\n        assert!(iter.next().is_none());\n    }\n\n    assert!(headers.is_empty());\n\n    // Insert two sequential values\n    headers.insert(\n        \"hello\".parse::<HeaderName>().unwrap(),\n        \"world\".parse().unwrap(),\n    );\n    headers.insert(\n        \"zomg\".parse::<HeaderName>().unwrap(),\n        \"bar\".parse().unwrap(),\n    );\n    headers.append(\n        \"hello\".parse::<HeaderName>().unwrap(),\n        \"world2\".parse().unwrap(),\n    );\n\n    // Drain...\n    {\n        let mut iter = headers.drain();\n\n        let (name, value) = iter.next().unwrap();\n        assert_eq!(name.unwrap().as_str(), \"hello\");\n        assert_eq!(value, \"world\");\n\n        let (name, value) = iter.next().unwrap();\n        assert_eq!(name, None);\n        assert_eq!(value, \"world2\");\n\n        let (name, value) = iter.next().unwrap();\n        assert_eq!(name.unwrap().as_str(), \"zomg\");\n        assert_eq!(value, \"bar\");\n\n        assert!(iter.next().is_none());\n    }\n}", "code_id": "hyperium-http/hyperium-http-818269d/src/method.rs::as_str", "code": "pub fn as_str(&self) -> &str {\n        match self.0 {\n            Options => \"OPTIONS\",\n            Get => \"GET\",\n            Post => \"POST\",\n            Put => \"PUT\",\n            Delete => \"DELETE\",\n            Head => \"HEAD\",\n            Trace => \"TRACE\",\n            Connect => \"CONNECT\",\n            Patch => \"PATCH\",\n            ExtensionInline(ref inline) => inline.as_str(),\n            ExtensionAllocated(ref allocated) => allocated.as_str(),\n        }\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::drain_drop_immediately", "test": "fn drain_drop_immediately() {\n    // test mem::forgetting does not double-free\n\n    let mut headers = HeaderMap::new();\n    headers.insert(\"hello\", \"world\".parse().unwrap());\n    headers.insert(\"zomg\", \"bar\".parse().unwrap());\n    headers.append(\"hello\", \"world2\".parse().unwrap());\n\n    let iter = headers.drain();\n    assert_eq!(iter.size_hint(), (2, Some(3)));\n    // not consuming `iter`\n}", "code_id": "hyperium-http/hyperium-http-818269d/src/header/map.rs::size_hint", "code": "fn size_hint(&self) -> (usize, Option<usize>) {\n        self.inner.size_hint()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::drain_forget", "test": "fn drain_forget() {\n    // test mem::forgetting does not double-free\n\n    let mut headers = HeaderMap::<HeaderValue>::new();\n    headers.insert(\"hello\", \"world\".parse().unwrap());\n    headers.insert(\"zomg\", \"bar\".parse().unwrap());\n\n    assert_eq!(headers.len(), 2);\n\n    {\n        let mut iter = headers.drain();\n        assert_eq!(iter.size_hint(), (2, Some(2)));\n        let _ = iter.next().unwrap();\n        std::mem::forget(iter);\n    }\n\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::drain_entry", "test": "fn drain_entry() {\n    let mut headers = HeaderMap::new();\n\n    headers.insert(\n        \"hello\".parse::<HeaderName>().unwrap(),\n        \"world\".parse().unwrap(),\n    );\n    headers.insert(\n        \"zomg\".parse::<HeaderName>().unwrap(),\n        \"foo\".parse().unwrap(),\n    );\n    headers.append(\n        \"hello\".parse::<HeaderName>().unwrap(),\n        \"world2\".parse().unwrap(),\n    );\n    headers.insert(\n        \"more\".parse::<HeaderName>().unwrap(),\n        \"words\".parse().unwrap(),\n    );\n    headers.append(\n        \"more\".parse::<HeaderName>().unwrap(),\n        \"insertions\".parse().unwrap(),\n    );\n    assert_eq!(5, headers.len());\n\n    // Using insert_mult\n    {\n        let mut e = match headers.entry(\"hello\") {\n            Entry::Occupied(e) => e,\n            _ => panic!(),\n        };\n\n        let vals: Vec<_> = e.insert_mult(\"wat\".parse().unwrap()).collect();\n        assert_eq!(2, vals.len());\n        assert_eq!(vals[0], \"world\");\n        assert_eq!(vals[1], \"world2\");\n    }\n\n    assert_eq!(5-2+1, headers.len());\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::into_header_name", "test": "fn into_header_name() {\n    let mut m = HeaderMap::new();\n    m.insert(HOST, \"localhost\".parse().unwrap());\n    m.insert(&ACCEPT, \"*/*\".parse().unwrap());\n    m.insert(\"connection\", \"keep-alive\".parse().unwrap());\n\n    m.append(LOCATION, \"/\".parse().unwrap());\n    m.append(&VIA, \"bob\".parse().unwrap());\n    m.append(\"transfer-encoding\", \"chunked\".parse().unwrap());\n\n    assert_eq!(m.len(), 6);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::as_header_name", "test": "fn as_header_name() {\n    let mut m = HeaderMap::new();\n    let v: HeaderValue = \"localhost\".parse().unwrap();\n    m.insert(HOST, v.clone());\n\n    let expected = Some(&v);\n\n    assert_eq!(m.get(\"host\"), expected);\n    assert_eq!(m.get(&HOST), expected);\n\n    let s = String::from(\"host\");\n    assert_eq!(m.get(&s), expected);\n    assert_eq!(m.get(s.as_str()), expected);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::get", "code": "pub fn get<K2: PartialEq<K> + ?Sized>(&self, key: &K2) -> Option<&V> {\n        self.find(key).map(move |pos| &self.vec[pos].1)\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::insert_all_std_headers", "test": "fn insert_all_std_headers() {\n    let mut m = HeaderMap::new();\n\n    for (i, hdr) in STD.iter().enumerate() {\n        m.insert(hdr.clone(), hdr.as_str().parse().unwrap());\n\n        for j in 0..(i + 1) {\n            assert_eq!(m[&STD[j]], STD[j].as_str());\n        }\n\n        if i != 0 {\n            for j in (i + 1)..STD.len() {\n                assert!(\n                    m.get(&STD[j]).is_none(),\n                    \"contained {}; j={}\",\n                    STD[j].as_str(),\n                    j\n                );\n            }\n        }\n    }\n}", "code_id": "hyperium-http/hyperium-http-818269d/src/status.rs::as_str", "code": "pub fn as_str(&self) -> &str {\n        let offset = (self.0.get() - 100) as usize;\n        let offset = offset * 3;\n\n        // Invariant: self has checked range [100, 999] and CODE_DIGITS is\n        // ASCII-only, of length 900 * 3 = 2700 bytes\n\n        #[cfg(debug_assertions)]\n        { &CODE_DIGITS[offset..offset+3] }\n\n        #[cfg(not(debug_assertions))]\n        unsafe { CODE_DIGITS.get_unchecked(offset..offset+3) }\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::insert_79_custom_std_headers", "test": "fn insert_79_custom_std_headers() {\n    let mut h = HeaderMap::new();\n    let hdrs = custom_std(79);\n\n    for (i, hdr) in hdrs.iter().enumerate() {\n        h.insert(hdr.clone(), hdr.as_str().parse().unwrap());\n\n        for j in 0..(i + 1) {\n            assert_eq!(h[&hdrs[j]], hdrs[j].as_str());\n        }\n\n        for j in (i + 1)..hdrs.len() {\n            assert!(h.get(&hdrs[j]).is_none());\n        }\n    }\n}", "code_id": "hyperium-http/hyperium-http-818269d/src/method.rs::as_str", "code": "pub fn as_str(&self) -> &str {\n        match self.0 {\n            Options => \"OPTIONS\",\n            Get => \"GET\",\n            Post => \"POST\",\n            Put => \"PUT\",\n            Delete => \"DELETE\",\n            Head => \"HEAD\",\n            Trace => \"TRACE\",\n            Connect => \"CONNECT\",\n            Patch => \"PATCH\",\n            ExtensionInline(ref inline) => inline.as_str(),\n            ExtensionAllocated(ref allocated) => allocated.as_str(),\n        }\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::get_invalid", "test": "fn get_invalid() {\n    let mut headers = HeaderMap::new();\n    headers.insert(\"foo\", \"bar\".parse().unwrap());\n    assert!(headers.get(\"Evil\\r\\nKey\").is_none());\n}", "code_id": "hyperium-http/hyperium-http-818269d/src/header/map.rs::is_none", "code": "fn is_none(&self) -> bool {\n        self.index == !0\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_multiple_a", "test": "fn remove_multiple_a() {\n    let mut headers = HeaderMap::new();\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n    headers.append(VIA, \"1.1 other.com\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_3=value 3\".parse().unwrap());\n    headers.insert(VARY, \"*\".parse().unwrap());\n\n    assert_eq!(headers.len(), 6);\n\n    let cookie = headers.remove(SET_COOKIE);\n    assert_eq!(cookie, Some(\"cookie_1=value 1\".parse().unwrap()));\n    assert_eq!(headers.len(), 3);\n\n    let via = headers.remove(VIA);\n    assert_eq!(via, Some(\"1.1 example.com\".parse().unwrap()));\n    assert_eq!(headers.len(), 1);\n\n    let vary = headers.remove(VARY);\n    assert_eq!(vary, Some(\"*\".parse().unwrap()));\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_multiple_b", "test": "fn remove_multiple_b() {\n    let mut headers = HeaderMap::new();\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n    headers.append(VIA, \"1.1 other.com\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_3=value 3\".parse().unwrap());\n    headers.insert(VARY, \"*\".parse().unwrap());\n\n    assert_eq!(headers.len(), 6);\n\n    let vary = headers.remove(VARY);\n    assert_eq!(vary, Some(\"*\".parse().unwrap()));\n    assert_eq!(headers.len(), 5);\n\n    let via = headers.remove(VIA);\n    assert_eq!(via, Some(\"1.1 example.com\".parse().unwrap()));\n    assert_eq!(headers.len(), 3);\n\n    let cookie = headers.remove(SET_COOKIE);\n    assert_eq!(cookie, Some(\"cookie_1=value 1\".parse().unwrap()));\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_0", "test": "fn remove_entry_multi_0() {\n    let mut headers = HeaderMap::new();\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 0);\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_0_others", "test": "fn remove_entry_multi_0_others() {\n    let mut headers = HeaderMap::new();\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n    headers.append(VIA, \"1.1 other.com\".parse().unwrap());\n\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 0);\n    assert_eq!(headers.len(), 2);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_1", "test": "fn remove_entry_multi_1() {\n    let mut headers = HeaderMap::new();\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 1);\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_1_other", "test": "fn remove_entry_multi_1_other() {\n    let mut headers = HeaderMap::new();\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 1);\n    assert_eq!(headers.len(), 1);\n\n    let vias = remove_all_values(&mut headers, VIA);\n    assert_eq!(vias.len(), 1);\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_2", "test": "fn remove_entry_multi_2() {\n    let mut headers = HeaderMap::new();\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 2);\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_3", "test": "fn remove_entry_multi_3() {\n    let mut headers = HeaderMap::new();\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_3=value 3\".parse().unwrap());\n\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 3);\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_multi_3_others", "test": "fn remove_entry_multi_3_others() {\n    let mut headers = HeaderMap::new();\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n    headers.append(VIA, \"1.1 other.com\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_3=value 3\".parse().unwrap());\n    headers.insert(VARY, \"*\".parse().unwrap());\n\n    let cookies = remove_all_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookies.len(), 3);\n    assert_eq!(headers.len(), 3);\n\n    let vias = remove_all_values(&mut headers, VIA);\n    assert_eq!(vias.len(), 2);\n    assert_eq!(headers.len(), 1);\n\n    let varies = remove_all_values(&mut headers, VARY);\n    assert_eq!(varies.len(), 1);\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_3_others_a", "test": "fn remove_entry_3_others_a() {\n    let mut headers = HeaderMap::new();\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n    headers.append(VIA, \"1.1 other.com\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_3=value 3\".parse().unwrap());\n    headers.insert(VARY, \"*\".parse().unwrap());\n\n    assert_eq!(headers.len(), 6);\n\n    let cookie = remove_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookie, Some(\"cookie_1=value 1\".parse().unwrap()));\n    assert_eq!(headers.len(), 3);\n\n    let via = remove_values(&mut headers, VIA);\n    assert_eq!(via, Some(\"1.1 example.com\".parse().unwrap()));\n    assert_eq!(headers.len(), 1);\n\n    let vary = remove_values(&mut headers, VARY);\n    assert_eq!(vary, Some(\"*\".parse().unwrap()));\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/header_map.rs::remove_entry_3_others_b", "test": "fn remove_entry_3_others_b() {\n    let mut headers = HeaderMap::new();\n    headers.insert(VIA, \"1.1 example.com\".parse().unwrap());\n    headers.insert(SET_COOKIE, \"cookie_1=value 1\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_2=value 2\".parse().unwrap());\n    headers.append(VIA, \"1.1 other.com\".parse().unwrap());\n    headers.append(SET_COOKIE, \"cookie_3=value 3\".parse().unwrap());\n    headers.insert(VARY, \"*\".parse().unwrap());\n\n    assert_eq!(headers.len(), 6);\n\n    let vary = remove_values(&mut headers, VARY);\n    assert_eq!(vary, Some(\"*\".parse().unwrap()));\n    assert_eq!(headers.len(), 5);\n\n    let via = remove_values(&mut headers, VIA);\n    assert_eq!(via, Some(\"1.1 example.com\".parse().unwrap()));\n    assert_eq!(headers.len(), 3);\n\n    let cookie = remove_values(&mut headers, SET_COOKIE);\n    assert_eq!(cookie, Some(\"cookie_1=value 1\".parse().unwrap()));\n    assert_eq!(headers.len(), 0);\n}", "code_id": "hyperium-http/hyperium-http-818269d/benches/src/header_map/vec_map.rs::len", "code": "pub fn len(&self) -> usize {\n        self.vec.len()\n    }", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_informational", "test": "fn is_informational() {\n    assert!(status_code(100).is_informational());\n    assert!(status_code(199).is_informational());\n\n    assert!(!status_code(200).is_informational());\n}", "code_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_informational", "code": "fn is_informational() {\n    assert!(status_code(100).is_informational());\n    assert!(status_code(199).is_informational());\n\n    assert!(!status_code(200).is_informational());\n}", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_success", "test": "fn is_success() {\n    assert!(status_code(200).is_success());\n    assert!(status_code(299).is_success());\n\n    assert!(!status_code(199).is_success());\n    assert!(!status_code(300).is_success());\n}", "code_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_success", "code": "fn is_success() {\n    assert!(status_code(200).is_success());\n    assert!(status_code(299).is_success());\n\n    assert!(!status_code(199).is_success());\n    assert!(!status_code(300).is_success());\n}", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_redirection", "test": "fn is_redirection() {\n    assert!(status_code(300).is_redirection());\n    assert!(status_code(399).is_redirection());\n\n    assert!(!status_code(299).is_redirection());\n    assert!(!status_code(400).is_redirection());\n}", "code_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_redirection", "code": "fn is_redirection() {\n    assert!(status_code(300).is_redirection());\n    assert!(status_code(399).is_redirection());\n\n    assert!(!status_code(299).is_redirection());\n    assert!(!status_code(400).is_redirection());\n}", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_client_error", "test": "fn is_client_error() {\n    assert!(status_code(400).is_client_error());\n    assert!(status_code(499).is_client_error());\n\n    assert!(!status_code(399).is_client_error());\n    assert!(!status_code(500).is_client_error());\n}", "code_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_client_error", "code": "fn is_client_error() {\n    assert!(status_code(400).is_client_error());\n    assert!(status_code(499).is_client_error());\n\n    assert!(!status_code(399).is_client_error());\n    assert!(!status_code(500).is_client_error());\n}", "docstring": null}
{"test_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_server_error", "test": "fn is_server_error() {\n    assert!(status_code(500).is_server_error());\n    assert!(status_code(599).is_server_error());\n\n    assert!(!status_code(499).is_server_error());\n    assert!(!status_code(600).is_server_error());\n}", "code_id": "hyperium-http/hyperium-http-818269d/tests/status_code.rs::is_server_error", "code": "fn is_server_error() {\n    assert!(status_code(500).is_server_error());\n    assert!(status_code(599).is_server_error());\n\n    assert!(!status_code(499).is_server_error());\n    assert!(!status_code(600).is_server_error());\n}", "docstring": null}
