{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_error.rs::test_serialize_nested_enum", "test": "fn test_serialize_nested_enum() {\n    #[derive(Serialize, Debug)]\n    enum Outer {\n        Inner(Inner),\n    }\n    #[derive(Serialize, Debug)]\n    enum Inner {\n        Newtype(usize),\n        Tuple(usize, usize),\n        Struct { x: usize },\n    }\n\n    let expected = \"serializing nested enums in YAML is not supported yet\";\n\n    let e = Outer::Inner(Inner::Newtype(0));\n    let error = serde_yaml::to_string(&e).unwrap_err();\n    assert_eq!(error.to_string(), expected);\n\n    let e = Outer::Inner(Inner::Tuple(0, 0));\n    let error = serde_yaml::to_string(&e).unwrap_err();\n    assert_eq!(error.to_string(), expected);\n\n    let e = Outer::Inner(Inner::Struct { x: 0 });\n    let error = serde_yaml::to_string(&e).unwrap_err();\n    assert_eq!(error.to_string(), expected);\n\n    let e = Value::Tagged(Box::new(TaggedValue {\n        tag: Tag::new(\"Outer\"),\n        value: Value::Tagged(Box::new(TaggedValue {\n            tag: Tag::new(\"Inner\"),\n            value: Value::Null,\n        })),\n    }));\n    let error = serde_yaml::to_string(&e).unwrap_err();\n    assert_eq!(error.to_string(), expected);\n}", "code_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/src/ser.rs::to_string", "code": "pub fn to_string<T>(value: &T) -> Result<String>\nwhere\n    T: ?Sized + ser::Serialize,\n{\n    let mut vec = Vec::with_capacity(128);\n    to_writer(&mut vec, value)?;\n    String::from_utf8(vec).map_err(|error| error::new(ErrorImpl::FromUtf8(error)))\n}", "docstring": null}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_serde.rs::test_float", "test": "fn test_float() {\n    let thing = 25.6;\n    let yaml = indoc! {\"\n        25.6\n    \"};\n    test_serde(&thing, yaml);\n\n    let thing = 25.;\n    let yaml = indoc! {\"\n        25.0\n    \"};\n    test_serde(&thing, yaml);\n\n    let thing = f64::INFINITY;\n    let yaml = indoc! {\"\n        .inf\n    \"};\n    test_serde(&thing, yaml);\n\n    let thing = f64::NEG_INFINITY;\n    let yaml = indoc! {\"\n        -.inf\n    \"};\n    test_serde(&thing, yaml);\n\n    let float: f64 = serde_yaml::from_str(indoc! {\"\n        .nan\n    \"})\n    .unwrap();\n    assert!(float.is_nan());\n}", "code_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/src/number.rs::is_nan", "code": "pub fn is_nan(&self) -> bool {\n        match self.n {\n            N::PosInt(_) | N::NegInt(_) => false,\n            N::Float(f) => f.is_nan(),\n        }\n    }", "docstring": null}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_serde.rs::test_float32", "test": "fn test_float32() {\n    let thing: f32 = 25.5;\n    let yaml = indoc! {\"\n        25.5\n    \"};\n    test_serde(&thing, yaml);\n\n    let thing = f32::INFINITY;\n    let yaml = indoc! {\"\n        .inf\n    \"};\n    test_serde(&thing, yaml);\n\n    let thing = f32::NEG_INFINITY;\n    let yaml = indoc! {\"\n        -.inf\n    \"};\n    test_serde(&thing, yaml);\n\n    let single_float: f32 = serde_yaml::from_str(indoc! {\"\n        .nan\n    \"})\n    .unwrap();\n    assert!(single_float.is_nan());\n}", "code_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/src/number.rs::is_nan", "code": "pub fn is_nan(&self) -> bool {\n        match self.n {\n            N::PosInt(_) | N::NegInt(_) => false,\n            N::Float(f) => f.is_nan(),\n        }\n    }", "docstring": null}
{"test_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/tests/test_value.rs::test_nan", "test": "fn test_nan() {\n    let pos_nan = serde_yaml::from_str::<Value>(\".nan\").unwrap();\n    assert!(pos_nan.is_f64());\n    assert_eq!(pos_nan, pos_nan);\n\n    let neg_fake_nan = serde_yaml::from_str::<Value>(\"-.nan\").unwrap();\n    assert!(neg_fake_nan.is_string());\n\n    let significand_mask = 0xF_FFFF_FFFF_FFFF;\n    let bits = (f64::NAN.copysign(1.0).to_bits() ^ significand_mask) | 1;\n    let different_pos_nan = Value::Number(Number::from(f64::from_bits(bits)));\n    assert_eq!(pos_nan, different_pos_nan);\n}", "code_id": "dtolnay-serde-yaml/dtolnay-serde-yaml-f8adb28/src/number.rs::is_f64", "code": "pub fn is_f64(&self) -> bool {\n        match self.n {\n            N::Float(_) => true,\n            N::PosInt(_) | N::NegInt(_) => false,\n        }\n    }", "docstring": null}
