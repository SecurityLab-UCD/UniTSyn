{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests/parse_self.rs::test_parse_self_debug_pubnames", "test": "fn test_parse_self_debug_pubnames() {\n    let debug_info = read_section(\"debug_info\");\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n\n    let debug_abbrev = read_section(\"debug_abbrev\");\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n\n    let debug_pubnames = read_section(\"debug_pubnames\");\n    let debug_pubnames = DebugPubNames::new(&debug_pubnames, LittleEndian);\n\n    let mut units = HashMap::new();\n    let mut abbrevs = HashMap::new();\n    let mut pubnames = debug_pubnames.items();\n    while let Some(entry) = pubnames.next().expect(\"Should parse pubname OK\") {\n        let unit_offset = entry.unit_header_offset();\n        let unit = units.entry(unit_offset).or_insert_with(|| {\n            debug_info\n                .header_from_offset(unit_offset)\n                .expect(\"Should parse unit header OK\")\n        });\n        let abbrev_offset = unit.debug_abbrev_offset();\n        let abbrevs = abbrevs.entry(abbrev_offset).or_insert_with(|| {\n            debug_abbrev\n                .abbreviations(abbrev_offset)\n                .expect(\"Should parse abbreviations OK\")\n        });\n        let mut cursor = unit\n            .entries_at_offset(abbrevs, entry.die_offset())\n            .expect(\"DIE offset should be valid\");\n        assert!(cursor.next_dfs().expect(\"Should parse DIE\").is_some());\n    }\n}", "error": "Not Definition Found"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests/parse_self.rs::test_parse_self_debug_pubtypes", "test": "fn test_parse_self_debug_pubtypes() {\n    let debug_info = read_section(\"debug_info\");\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n\n    let debug_abbrev = read_section(\"debug_abbrev\");\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n\n    let debug_pubtypes = read_section(\"debug_pubtypes\");\n    let debug_pubtypes = DebugPubTypes::new(&debug_pubtypes, LittleEndian);\n\n    let mut units = HashMap::new();\n    let mut abbrevs = HashMap::new();\n    let mut pubtypes = debug_pubtypes.items();\n    while let Some(entry) = pubtypes.next().expect(\"Should parse pubtype OK\") {\n        let unit_offset = entry.unit_header_offset();\n        let unit = units.entry(unit_offset).or_insert_with(|| {\n            debug_info\n                .header_from_offset(unit_offset)\n                .expect(\"Should parse unit header OK\")\n        });\n        let abbrev_offset = unit.debug_abbrev_offset();\n        let abbrevs = abbrevs.entry(abbrev_offset).or_insert_with(|| {\n            debug_abbrev\n                .abbreviations(abbrev_offset)\n                .expect(\"Should parse abbreviations OK\")\n        });\n        let mut cursor = unit\n            .entries_at_offset(abbrevs, entry.die_offset())\n            .expect(\"DIE offset should be valid\");\n        assert!(cursor.next_dfs().expect(\"Should parse DIE\").is_some());\n    }\n}", "error": "Not Definition Found"}
