{"test_id": "cberner-redb/cberner-redb-267b473/tests/basic_tests.rs::first_last", "test": "fn first_last() {\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(STR_TABLE).unwrap();\n        assert!(table.first().unwrap().is_none());\n        assert!(table.last().unwrap().is_none());\n        table.insert(\"a\", \"world1\").unwrap();\n        assert_eq!(table.first().unwrap().unwrap().0.value(), \"a\");\n        assert_eq!(table.last().unwrap().unwrap().0.value(), \"a\");\n        table.insert(\"b\", \"world2\").unwrap();\n        table.insert(\"c\", \"world3\").unwrap();\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(STR_TABLE).unwrap();\n    assert_eq!(table.first().unwrap().unwrap().0.value(), \"a\");\n    assert_eq!(table.last().unwrap().unwrap().0.value(), \"c\");\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/basic_tests.rs::pop", "test": "fn pop() {\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(STR_TABLE).unwrap();\n\n        assert!(table.pop_first().unwrap().is_none());\n        assert!(table.pop_last().unwrap().is_none());\n\n        table.insert(\"a\", \"world\").unwrap();\n        table.insert(\"b\", \"world2\").unwrap();\n        table.insert(\"c\", \"world3\").unwrap();\n    }\n    write_txn.commit().unwrap();\n\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(STR_TABLE).unwrap();\n        {\n            let (key, value) = table.pop_first().unwrap().unwrap();\n            assert_eq!(key.value(), \"a\");\n            assert_eq!(value.value(), \"world\");\n        }\n        {\n            let (key, value) = table.pop_last().unwrap().unwrap();\n            assert_eq!(key.value(), \"c\");\n            assert_eq!(value.value(), \"world3\");\n        }\n        {\n            let (key, value) = table.pop_last().unwrap().unwrap();\n            assert_eq!(key.value(), \"b\");\n            assert_eq!(value.value(), \"world2\");\n        }\n\n        assert!(table.pop_first().unwrap().is_none());\n        assert!(table.pop_last().unwrap().is_none());\n    }\n    write_txn.commit().unwrap();\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/basic_tests.rs::insert_overwrite", "test": "fn insert_overwrite() {\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(STR_TABLE).unwrap();\n        assert!(table.insert(\"hello\", \"world\").unwrap().is_none());\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(STR_TABLE).unwrap();\n    assert_eq!(\"world\", table.get(\"hello\").unwrap().unwrap().value());\n\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(STR_TABLE).unwrap();\n        let old_value = table.insert(\"hello\", \"replaced\").unwrap();\n        assert_eq!(old_value.unwrap().value(), \"world\");\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(STR_TABLE).unwrap();\n    assert_eq!(\"replaced\", table.get(\"hello\").unwrap().unwrap().value());\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/basic_tests.rs::no_dirty_reads", "test": "fn no_dirty_reads() {\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(STR_TABLE).unwrap();\n        table.insert(\"hello\", \"world\").unwrap();\n    }\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(STR_TABLE);\n    assert!(table.is_err());\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(STR_TABLE).unwrap();\n    assert_eq!(\"world\", table.get(\"hello\").unwrap().unwrap().value());\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/basic_tests.rs::u64_type", "test": "fn u64_type() {\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(U64_TABLE).unwrap();\n        table.insert(&0, &1).unwrap();\n        table.insert(&1, &1).unwrap();\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(U64_TABLE).unwrap();\n    assert_eq!(\n        2u64,\n        table\n            .range(0..2)\n            .unwrap()\n            .map(|item| item.unwrap().1.value())\n            .sum()\n    );\n    assert_eq!(1, table.get(&0).unwrap().unwrap().value());\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/basic_tests.rs::custom_ordering", "test": "fn custom_ordering() {\n    #[derive(Debug)]\n    struct ReverseKey(Vec<u8>);\n\n    impl RedbValue for ReverseKey {\n        type SelfType<'a> = ReverseKey\n        where\n        Self: 'a;\n        type AsBytes<'a> = &'a [u8]\n        where\n        Self: 'a;\n\n        fn fixed_width() -> Option<usize> {\n            None\n        }\n\n        fn from_bytes<'a>(data: &'a [u8]) -> ReverseKey\n        where\n            Self: 'a,\n        {\n            ReverseKey(data.to_vec())\n        }\n\n        fn as_bytes<'a, 'b: 'a>(value: &'a Self::SelfType<'b>) -> &'a [u8]\n        where\n            Self: 'a,\n            Self: 'b,\n        {\n            &value.0\n        }\n\n        fn type_name() -> TypeName {\n            TypeName::new(\"test::ReverseKey\")\n        }\n    }\n\n    impl RedbKey for ReverseKey {\n        fn compare(data1: &[u8], data2: &[u8]) -> Ordering {\n            data2.cmp(data1)\n        }\n    }\n\n    let definition: TableDefinition<ReverseKey, &str> = TableDefinition::new(\"x\");\n\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(definition).unwrap();\n        for i in 0..10u8 {\n            let key = vec![i];\n            table.insert(&ReverseKey(key), \"value\").unwrap();\n        }\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    let table = read_txn.open_table(definition).unwrap();\n    let start = ReverseKey(vec![7u8]); // ReverseKey is used, so 7 < 3\n    let end = ReverseKey(vec![3u8]);\n    let mut iter = table.range(start..=end).unwrap();\n    for i in (3..=7u8).rev() {\n        let (key, value) = iter.next().unwrap().unwrap();\n        assert_eq!(&[i], key.value().0.as_slice());\n        assert_eq!(\"value\", value.value());\n    }\n    assert!(iter.next().is_none());\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/integration_tests.rs::delete_all_tables", "test": "fn delete_all_tables() {\n    let tmpfile = create_tempfile();\n    let db = Database::create(tmpfile.path()).unwrap();\n\n    let x_def: TableDefinition<&str, &str> = TableDefinition::new(\"x\");\n    let y_def: TableDefinition<&str, &str> = TableDefinition::new(\"y\");\n\n    let write_txn = db.begin_write().unwrap();\n    {\n        let mut table = write_txn.open_table(x_def).unwrap();\n        table.insert(\"hello\", \"world\").unwrap();\n        let mut table = write_txn.open_table(y_def).unwrap();\n        table.insert(\"hello\", \"world\").unwrap();\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    assert_eq!(2, read_txn.list_tables().unwrap().count());\n\n    let write_txn = db.begin_write().unwrap();\n    for table in write_txn.list_tables().unwrap() {\n        write_txn.delete_table(table).unwrap();\n    }\n    write_txn.commit().unwrap();\n\n    let read_txn = db.begin_read().unwrap();\n    assert_eq!(0, read_txn.list_tables().unwrap().count());\n}", "error": "Not Definition Found"}
{"test_id": "cberner-redb/cberner-redb-267b473/tests/integration_tests.rs::database_lock", "test": "fn database_lock() {\n    let tmpfile = create_tempfile();\n    let result = Database::create(tmpfile.path());\n    assert!(result.is_ok());\n    let result2 = Database::open(tmpfile.path());\n    assert!(\n        matches!(result2, Err(DatabaseError::DatabaseAlreadyOpen)),\n        \"{result2:?}\",\n    );\n    drop(result);\n    let result = Database::open(tmpfile.path());\n    assert!(result.is_ok());\n}", "error": "Not Definition Found"}
