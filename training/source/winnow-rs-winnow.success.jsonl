{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests/testsuite/issues.rs::take_till0_issue", "test": "fn take_till0_issue() {\n    use winnow::token::take_till0;\n\n    fn nothing(i: Partial<&[u8]>) -> IResult<Partial<&[u8]>, &[u8]> {\n        take_till0(|_| true).parse_peek(i)\n    }\n\n    assert_eq!(\n        nothing(Partial::new(b\"\")),\n        Err(ErrMode::Incomplete(Needed::new(1)))\n    );\n    assert_eq!(\n        nothing(Partial::new(b\"abc\")),\n        Ok((Partial::new(&b\"abc\"[..]), &b\"\"[..]))\n    );\n}", "code_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests/testsuite/issues.rs::nothing", "code": "fn nothing(i: Partial<&[u8]>) -> IResult<Partial<&[u8]>, &[u8]> {\n        take_till0(|_| true).parse_peek(i)\n    }", "docstring": null}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests/testsuite/issues.rs::issue_655", "test": "fn issue_655() {\n    use winnow::ascii::{line_ending, not_line_ending};\n    fn twolines(i: Partial<&str>) -> IResult<Partial<&str>, (&str, &str)> {\n        let (i, l1) = not_line_ending.parse_peek(i)?;\n        let (i, _) = line_ending.parse_peek(i)?;\n        let (i, l2) = not_line_ending.parse_peek(i)?;\n        let (i, _) = line_ending.parse_peek(i)?;\n\n        Ok((i, (l1, l2)))\n    }\n\n    assert_eq!(\n        twolines(Partial::new(\"foo\\nbar\\n\")),\n        Ok((Partial::new(\"\"), (\"foo\", \"bar\")))\n    );\n    assert_eq!(\n        twolines(Partial::new(\"féo\\nbar\\n\")),\n        Ok((Partial::new(\"\"), (\"féo\", \"bar\")))\n    );\n    assert_eq!(\n        twolines(Partial::new(\"foé\\nbar\\n\")),\n        Ok((Partial::new(\"\"), (\"foé\", \"bar\")))\n    );\n    assert_eq!(\n        twolines(Partial::new(\"foé\\r\\nbar\\n\")),\n        Ok((Partial::new(\"\"), (\"foé\", \"bar\")))\n    );\n}\n\n#[cf", "code_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests/testsuite/issues.rs::twolines", "code": "fn twolines(i: Partial<&str>) -> IResult<Partial<&str>, (&str, &str)> {\n        let (i, l1) = not_line_ending.parse_peek(i)?;\n        let (i, _) = line_ending.parse_peek(i)?;\n        let (i, l2) = not_line_ending.parse_peek(i)?;\n        let (i, _) = line_ending.parse_peek(i)?;\n\n        Ok((i, (l1, l2)))\n    }", "docstring": null}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests/testsuite/multiline.rs::read_lines_test", "test": "fn read_lines_test() {\n    let res = Ok((\"\", vec![\"Duck\", \"Dog\", \"Cow\"]));\n\n    assert_eq!(read_lines(\"Duck\\nDog\\nCow\\n\"), res);\n    assert_eq!(read_lines(\"Duck\\nDog\\nCow\"), res);\n}", "code_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests/testsuite/multiline.rs::read_lines", "code": "pub fn read_lines(input: &str) -> IResult<&str, Vec<&str>> {\n    repeat(0.., unpeek(read_line)).parse_peek(input)\n}", "docstring": null}
