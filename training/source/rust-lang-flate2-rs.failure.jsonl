{"test_id": "rust-lang-flate2-rs/rust-lang-flate2-rs-649aaae/tests/gunzip.rs::test_extract_success_partial_multi", "test": "fn test_extract_success_partial_multi() {\n    let content = extract_file(Path::new(\"tests/multi.gz\")).unwrap();\n    let mut expected = String::new();\n    BufReader::new(File::open(\"tests/multi.txt\").unwrap())\n        .read_line(&mut expected)\n        .unwrap();\n    assert_eq!(content, expected.as_bytes());\n}", "error": "Not Definition Found"}
{"test_id": "rust-lang-flate2-rs/rust-lang-flate2-rs-649aaae/tests/gunzip.rs::test_extract_failure", "test": "fn test_extract_failure() {\n    let result = extract_file(Path::new(\"tests/corrupt-gz-file.bin\"));\n    assert_eq!(result.err().unwrap().kind(), io::ErrorKind::InvalidInput);\n}", "error": "Not Definition Found"}
{"test_id": "rust-lang-flate2-rs/rust-lang-flate2-rs-649aaae/tests/gunzip.rs::empty_error_once", "test": "fn empty_error_once() {\n    let data: &[u8] = &[];\n    let cbjson = GzDecoder::new(data);\n    let reader = BufReader::new(cbjson);\n    let mut stream = reader.lines();\n    assert!(stream.next().unwrap().is_err());\n    assert!(stream.next().is_none());\n}", "error": "Not Definition Found"}
{"test_id": "rust-lang-flate2-rs/rust-lang-flate2-rs-649aaae/tests/zero-write.rs::zero_write_is_error", "test": "fn zero_write_is_error() {\n    let mut buf = [0u8];\n    let writer = flate2::write::DeflateEncoder::new(&mut buf[..], flate2::Compression::default());\n    assert!(writer.finish().is_err());\n}", "error": "Not Definition Found"}
