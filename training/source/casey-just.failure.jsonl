{"test_id": "casey-just/casey-just-af55be3/bin/ref-type/tests/integration.rs::valid_version_is_release", "test": "fn valid_version_is_release() {\n  assert_eq!(\n    stdout(\"refs/tags/0.0.0\"),\n    \"::set-output name=value::release\\n\"\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/bin/ref-type/tests/integration.rs::valid_version_with_trailing_characters_is_other", "test": "fn valid_version_with_trailing_characters_is_other() {\n  assert_eq!(\n    stdout(\"refs/tags/0.0.0-rc1\"),\n    \"::set-output name=value::other\\n\"\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/bin/ref-type/tests/integration.rs::valid_version_with_lots_of_digits_is_release", "test": "fn valid_version_with_lots_of_digits_is_release() {\n  assert_eq!(\n    stdout(\"refs/tags/01232132.098327498374.43268473849734\"),\n    \"::set-output name=value::release\\n\"\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/command.rs::working_directory_is_correct", "test": "fn working_directory_is_correct() {\n  let tmp = tempdir();\n\n  fs::write(tmp.path().join(\"justfile\"), \"\").unwrap();\n  fs::write(tmp.path().join(\"bar\"), \"baz\").unwrap();\n  fs::create_dir(tmp.path().join(\"foo\")).unwrap();\n\n  let output = Command::new(executable_path(\"just\"))\n    .args([\"--command\", \"cat\", \"bar\"])\n    .current_dir(tmp.path().join(\"foo\"))\n    .output()\n    .unwrap();\n\n  assert_eq!(str::from_utf8(&output.stderr).unwrap(), \"\");\n\n  assert!(output.status.success());\n\n  assert_eq!(str::from_utf8(&output.stdout).unwrap(), \"baz\");\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/command.rs::command_not_found", "test": "fn command_not_found() {\n  let tmp = tempdir();\n\n  fs::write(tmp.path().join(\"justfile\"), \"\").unwrap();\n\n  let output = Command::new(executable_path(\"just\"))\n    .args([\"--command\", \"asdfasdfasdfasdfadfsadsfadsf\", \"bar\"])\n    .output()\n    .unwrap();\n\n  assert!(str::from_utf8(&output.stderr)\n    .unwrap()\n    .starts_with(\"error: Failed to invoke `asdfasdfasdfasdfadfsadsfadsf` `bar`:\"));\n\n  assert!(!output.status.success());\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/completions.rs::output", "test": "fn output() {\n  let tempdir = tempdir();\n\n  let output = Command::new(executable_path(\"just\"))\n    .arg(\"--completions\")\n    .arg(\"bash\")\n    .current_dir(tempdir.path())\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  let text = String::from_utf8_lossy(&output.stdout);\n\n  assert!(text.starts_with(\"_just() {\"));\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/edit.rs::invalid_justfile", "test": "fn invalid_justfile() {\n  let tmp = temptree! {\n    justfile: JUSTFILE,\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .output()\n    .unwrap();\n\n  assert!(!output.status.success());\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .arg(\"--edit\")\n    .env(\"VISUAL\", \"cat\")\n    .output()\n    .unwrap();\n\n  assert_stdout(&output, JUSTFILE);\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/edit.rs::invoke_error", "test": "fn invoke_error() {\n  let tmp = temptree! {\n    justfile: JUSTFILE,\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .output()\n    .unwrap();\n\n  assert!(!output.status.success());\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .arg(\"--edit\")\n    .env(\"VISUAL\", \"/\")\n    .output()\n    .unwrap();\n\n  assert_eq!(\n    String::from_utf8_lossy(&output.stderr),\n    if cfg!(windows) {\n      \"error: Editor `/` invocation failed: program path has no file name\\n\"\n    } else {\n      \"error: Editor `/` invocation failed: Permission denied (os error 13)\\n\"\n    }\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/fmt.rs::unstable_passed", "test": "fn unstable_passed() {\n  let tmp = tempdir();\n\n  let justfile = tmp.path().join(\"justfile\");\n\n  fs::write(&justfile, \"x    :=    'hello'   \").unwrap();\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .arg(\"--fmt\")\n    .arg(\"--unstable\")\n    .output()\n    .unwrap();\n\n  if !output.status.success() {\n    eprintln!(\"{}\", String::from_utf8_lossy(&output.stderr));\n    eprintln!(\"{}\", String::from_utf8_lossy(&output.stdout));\n    panic!(\"justfile failed with status: {}\", output.status);\n  }\n\n  assert_eq!(fs::read_to_string(&justfile).unwrap(), \"x := 'hello'\\n\");\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/fmt.rs::write_error", "test": "fn write_error() {\n  let tempdir = temptree! {\n    justfile: \"x    :=    'hello'   \",\n  };\n\n  let test = Test::with_tempdir(tempdir)\n    .no_justfile()\n    .args([\"--fmt\", \"--unstable\"])\n    .status(EXIT_FAILURE)\n    .stderr_regex(if cfg!(windows) {\n      r\"error: Failed to write justfile to `.*`: Access is denied. \\(os error 5\\)\\n\"\n    } else {\n      r\"error: Failed to write justfile to `.*`: Permission denied \\(os error 13\\)\\n\"\n    });\n\n  let justfile_path = test.justfile_path();\n\n  (\"chmod\", \"400\", &justfile_path).run();\n\n  let _tempdir = test.run();\n\n  assert_eq!(\n    fs::read_to_string(&justfile_path).unwrap(),\n    \"x    :=    'hello'   \"\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::current_dir", "test": "fn current_dir() {\n  let tmp = tempdir();\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .arg(\"--init\")\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  assert_eq!(\n    fs::read_to_string(tmp.path().join(\"justfile\")).unwrap(),\n    EXPECTED\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::invocation_directory", "test": "fn invocation_directory() {\n  let tmp = temptree! {\n    \".git\": {},\n  };\n\n  let test = Test::with_tempdir(tmp);\n\n  let justfile_path = test.justfile_path();\n\n  let _tmp = test\n    .no_justfile()\n    .stderr_regex(\"Wrote justfile to `.*`\\n\")\n    .arg(\"--init\")\n    .run();\n\n  assert_eq!(fs::read_to_string(justfile_path).unwrap(), EXPECTED);\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::parent_dir", "test": "fn parent_dir() {\n  let tmp = temptree! {\n    \".git\": {},\n    sub: {},\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path().join(\"sub\"))\n    .arg(\"--init\")\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  assert_eq!(\n    fs::read_to_string(tmp.path().join(\"justfile\")).unwrap(),\n    EXPECTED\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::alternate_marker", "test": "fn alternate_marker() {\n  let tmp = temptree! {\n    \"_darcs\": {},\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .arg(\"--init\")\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  assert_eq!(\n    fs::read_to_string(tmp.path().join(\"justfile\")).unwrap(),\n    EXPECTED\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::search_directory", "test": "fn search_directory() {\n  let tmp = temptree! {\n    sub: {\n      \".git\": {},\n    },\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path())\n    .arg(\"--init\")\n    .arg(\"sub/\")\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  assert_eq!(\n    fs::read_to_string(tmp.path().join(\"sub/justfile\")).unwrap(),\n    EXPECTED\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::justfile", "test": "fn justfile() {\n  let tmp = temptree! {\n    sub: {\n      \".git\": {},\n    },\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path().join(\"sub\"))\n    .arg(\"--init\")\n    .arg(\"--justfile\")\n    .arg(tmp.path().join(\"justfile\"))\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  assert_eq!(\n    fs::read_to_string(tmp.path().join(\"justfile\")).unwrap(),\n    EXPECTED\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/init.rs::justfile_and_working_directory", "test": "fn justfile_and_working_directory() {\n  let tmp = temptree! {\n    sub: {\n      \".git\": {},\n    },\n  };\n\n  let output = Command::new(executable_path(\"just\"))\n    .current_dir(tmp.path().join(\"sub\"))\n    .arg(\"--init\")\n    .arg(\"--justfile\")\n    .arg(tmp.path().join(\"justfile\"))\n    .arg(\"--working-directory\")\n    .arg(\"/\")\n    .output()\n    .unwrap();\n\n  assert!(output.status.success());\n\n  assert_eq!(\n    fs::read_to_string(tmp.path().join(\"justfile\")).unwrap(),\n    EXPECTED\n  );\n}", "error": "Not Definition Found"}
{"test_id": "casey-just/casey-just-af55be3/tests/invocation_directory.rs::invocation_directory_native", "test": "fn invocation_directory_native() {\n  let Output { stdout, tempdir } = Test::new()\n    .justfile(\"x := invocation_directory_native()\")\n    .args([\"--evaluate\", \"x\"])\n    .stdout_regex(\".*\")\n    .run();\n\n  if cfg!(windows) {\n    assert_eq!(Path::new(&stdout), tempdir.path());\n  } else {\n    assert_eq!(Path::new(&stdout), tempdir.path().canonicalize().unwrap());\n  }\n}", "error": "Not Definition Found"}
