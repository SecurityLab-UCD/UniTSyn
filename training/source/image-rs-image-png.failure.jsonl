{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests/check_testimages.rs::render_images", "test": "fn render_images() {\n    process_images(\"results.txt\", &TEST_SUITES, |path| {\n        let mut decoder = png::Decoder::new(File::open(path)?);\n        decoder.set_transformations(png::Transformations::normalize_to_color8());\n        let mut reader = decoder.read_info()?;\n        let mut img_data = vec![0; reader.output_buffer_size()];\n        let info = reader.next_frame(&mut img_data)?;\n        // First sanity check:\n        assert_eq!(\n            img_data.len(),\n            info.width as usize\n                * info.height as usize\n                * info.color_type.samples()\n                * info.bit_depth as usize\n                / 8\n        );\n        let mut crc = Crc32::new();\n        crc.update(&img_data);\n        Ok(crc.finalize())\n    })\n}", "error": "Not Definition Found"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests/check_testimages.rs::render_images_identity", "test": "fn render_images_identity() {\n    process_images(\"results_identity.txt\", &TEST_SUITES, |path| {\n        let decoder = png::Decoder::new(File::open(&path)?);\n        let mut reader = decoder.read_info()?;\n        let mut img_data = vec![0; reader.output_buffer_size()];\n        let info = reader.next_frame(&mut img_data)?;\n        let bits =\n            ((info.width as usize * info.color_type.samples() * info.bit_depth as usize + 7) & !7)\n                * info.height as usize;\n        // First sanity check:\n        assert_eq!(\n            img_data.len() * 8,\n            bits,\n            \"path: {} info: {:?} bits: {}\",\n            path.display(),\n            info,\n            bits\n        );\n        let mut crc = Crc32::new();\n        crc.update(&img_data);\n        Ok(crc.finalize())\n    });\n}", "error": "Not Definition Found"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests/check_testimages.rs::render_images_alpha", "test": "fn render_images_alpha() {\n    process_images(\"results_alpha.txt\", &TEST_SUITES, |path| {\n        let mut decoder = png::Decoder::new(File::open(&path)?);\n        decoder.set_transformations(png::Transformations::ALPHA);\n        let mut reader = decoder.read_info()?;\n        let mut img_data = vec![0; reader.output_buffer_size()];\n        let info = reader.next_frame(&mut img_data)?;\n        let bits =\n            ((info.width as usize * info.color_type.samples() * info.bit_depth as usize + 7) & !7)\n                * info.height as usize;\n        // First sanity check:\n        assert_eq!(\n            img_data.len() * 8,\n            bits,\n            \"path: {} info: {:?} bits: {}\",\n            path.display(),\n            info,\n            bits\n        );\n        let mut crc = Crc32::new();\n        crc.update(&img_data);\n        Ok(crc.finalize())\n    })\n}", "error": "Not Definition Found"}
