{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::default_options", "test": "fn default_options() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--isolated\", \"--stdin-filename\", \"test.py\"])\n        .arg(\"-\")\n        .pass_stdin(r#\"\ndef foo(arg1, arg2,):\n    print('Should\\'t change quotes')\n\n\nif condition:\n\n    print('Hy \"Micha\"') # Should not change quotes\n\n\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    def foo(\n        arg1,\n        arg2,\n    ):\n        print(\"Should't change quotes\")\n\n\n    if condition:\n        print('Hy \"Micha\"')  # Should not change quotes\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::format_options", "test": "fn format_options() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nindent-width = 8\nline-length = 84\n\n[format]\nindent-style = \"tab\"\nquote-style = \"single\"\nskip-magic-trailing-comma = true\nline-ending = \"cr-lf\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .pass_stdin(r#\"\ndef foo(arg1, arg2,):\n    print(\"Shouldn't change quotes. It exceeds the line width with the tab size 8\")\n\n\nif condition:\n\n    print(\"Should change quotes\")\n\n\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    def foo(arg1, arg2):\n        print(\n            \"Shouldn't change quotes. It exceeds the line width with the tab size 8\"\n        )\n\n\n    if condition:\n        print('Should change quotes')\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::mixed_line_endings", "test": "fn mixed_line_endings() -> Result<()> {\n    let tempdir = TempDir::new()?;\n\n    fs::write(\n        tempdir.path().join(\"main.py\"),\n        \"from test import say_hy\\n\\nif __name__ == \\\"__main__\\\":\\n    say_hy(\\\"dear Ruff contributor\\\")\\n\",\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"test.py\"),\n        \"def say_hy(name: str):\\r\\n    print(f\\\"Hy {name}\\\")\\r\\n\",\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .args([\"format\", \"--no-cache\", \"--diff\", \"--isolated\"])\n        .arg(\".\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    2 files left unchanged\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::exclude", "test": "fn exclude() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-exclude = [\"out\"]\n\n[format]\nexclude = [\"test.py\", \"generated.py\"]\n\"#,\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"main.py\"),\n        r#\"\nfrom test import say_hy\n\nif __name__ == \"__main__\":\n    say_hy(\"dear Ruff contributor\")\n\"#,\n    )?;\n\n    // Excluded file but passed to the CLI directly, should be formatted\n    let test_path = tempdir.path().join(\"test.py\");\n    fs::write(\n        &test_path,\n        r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#,\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"generated.py\"),\n        r#\"NUMBERS = [\n     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n    10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n]\nOTHER = \"OTHER\"\n\"#,\n    )?;\n\n    let out_dir = tempdir.path().join(\"out\");\n    fs::create_dir(&out_dir)?;\n\n    fs::write(out_dir.join(\"a.py\"), \"a = a\")?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .args([\"format\", \"--no-cache\", \"--check\", \"--config\"])\n        .arg(ruff_toml.file_name().unwrap())\n        // Explicitly pass test.py, should be formatted regardless of it being excluded by format.exclude\n        .arg(test_path.file_name().unwrap())\n        // Format all other files in the directory, should respect the `exclude` and `format.exclude` options\n        .arg(\".\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    Would reformat: main.py\n    Would reformat: test.py\n    2 files would be reformatted\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::force_exclude", "test": "fn force_exclude() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-exclude = [\"out\"]\n\n[format]\nexclude = [\"test.py\", \"generated.py\"]\n\"#,\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"main.py\"),\n        r#\"\nfrom test import say_hy\n\nif __name__ == \"__main__\":\n    say_hy(\"dear Ruff contributor\")\n\"#,\n    )?;\n\n    // Excluded file but passed to the CLI directly, should be formatted\n    let test_path = tempdir.path().join(\"test.py\");\n    fs::write(\n        &test_path,\n        r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#,\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"generated.py\"),\n        r#\"NUMBERS = [\n     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n    10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n]\nOTHER = \"OTHER\"\n\"#,\n    )?;\n\n    let out_dir = tempdir.path().join(\"out\");\n    fs::create_dir(&out_dir)?;\n\n    fs::write(out_dir.join(\"a.py\"), \"a = a\")?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .args([\"format\", \"--no-cache\", \"--force-exclude\", \"--check\", \"--config\"])\n        .arg(ruff_toml.file_name().unwrap())\n        // Explicitly pass test.py, should be respect the `format.exclude` when `--force-exclude` is present\n        .arg(test_path.file_name().unwrap())\n        // Format all other files in the directory, should respect the `exclude` and `format.exclude` options\n        .arg(\".\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    Would reformat: main.py\n    1 file would be reformatted\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::exclude_stdin", "test": "fn exclude_stdin() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-select = [\"B\", \"Q\"]\nignore = [\"Q000\", \"Q001\", \"Q002\", \"Q003\"]\n\n[format]\nexclude = [\"generated.py\"]\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .args([\"format\", \"--config\", &ruff_toml.file_name().unwrap().to_string_lossy(), \"--stdin-filename\", \"generated.py\", \"-\"])\n        .pass_stdin(r#\"\nfrom test import say_hy\n\nif __name__ == '__main__':\n    say_hy(\"dear Ruff contributor\")\n\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    from test import say_hy\n\n    if __name__ == \"__main__\":\n        say_hy(\"dear Ruff contributor\")\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::force_exclude_stdin", "test": "fn force_exclude_stdin() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-select = [\"B\", \"Q\"]\nignore = [\"Q000\", \"Q001\", \"Q002\", \"Q003\"]\n\n[format]\nexclude = [\"generated.py\"]\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .args([\"format\", \"--config\", &ruff_toml.file_name().unwrap().to_string_lossy(), \"--stdin-filename\", \"generated.py\", \"--force-exclude\", \"-\"])\n        .pass_stdin(r#\"\nfrom test import say_hy\n\nif __name__ == '__main__':\n    say_hy(\"dear Ruff contributor\")\n\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::format_option_inheritance", "test": "fn format_option_inheritance() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    let base_toml = tempdir.path().join(\"base.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend = \"base.toml\"\n\n[lint]\nextend-select = [\"COM812\"]\n\n[format]\nquote-style = \"single\"\n\"#,\n    )?;\n\n    fs::write(\n        base_toml,\n        r#\"\n[format]\nindent-style = \"tab\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .pass_stdin(r#\"\ndef foo(arg1, arg2,):\n    print(\"Shouldn't change quotes\")\n\n\nif condition:\n\n    print(\"Should change quotes\")\n\n\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    def foo(\n        arg1,\n        arg2,\n    ):\n        print(\"Shouldn't change quotes\")\n\n\n    if condition:\n        print('Should change quotes')\n\n    ----- stderr -----\n    warning: The following rules may cause conflicts when used with the formatter: `COM812`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::conflicting_options", "test": "fn conflicting_options() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nindent-width = 2\n\n[lint]\nselect = [\"ALL\"]\nignore = [\"D203\", \"D212\"]\n\n[lint.isort]\nlines-after-imports = 3\nlines-between-types = 2\nforce-wrap-aliases = true\ncombine-as-imports = true\nsplit-on-trailing-comma = true\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\ndocstring-quotes = \"single\"\nmultiline-quotes = \"single\"\n\n[format]\nskip-magic-trailing-comma = true\nindent-style = \"tab\"\n\"#,\n    )?;\n\n    let test_path = tempdir.path().join(\"test.py\");\n    fs::write(\n        &test_path,\n        r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--no-cache\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(test_path), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    1 file reformatted\n\n    ----- stderr -----\n    warning: The following rules may cause conflicts when used with the formatter: `COM812`, `ISC001`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.\n    warning: The `format.indent-style=\"tab\"` option is incompatible with `W191`, which lints against all uses of tabs. We recommend disabling these rules when using the formatter, which enforces a consistent indentation style. Alternatively, set the `format.indent-style` option to `\"space\"`.\n    warning: The `format.indent-style=\"tab\"` option is incompatible with `D206`, with requires space-based indentation. We recommend disabling these rules when using the formatter, which enforces a consistent indentation style. Alternatively, set the `format.indent-style` option to `\"space\"`.\n    warning: The `flake8-quotes.inline-quotes=\"single\"` option is incompatible with the formatter's `format.quote-style=\"double\"`. We recommend disabling `Q000` and `Q003` when using the formatter, which enforces a consistent quote style. Alternatively, set both options to either `\"single\"` or `\"double\"`.\n    warning: The `flake8-quotes.multiline-quotes=\"single\"` option is incompatible with the formatter. We recommend disabling `Q001` when using the formatter, which enforces double quotes for multiline strings. Alternatively, set the `flake8-quotes.multiline-quotes` option to `\"double\"`.`\n    warning: The `flake8-quotes.multiline-quotes=\"single\"` option is incompatible with the formatter. We recommend disabling `Q002` when using the formatter, which enforces double quotes for docstrings. Alternatively, set the `flake8-quotes.docstring-quotes` option to `\"double\"`.`\n    warning: The isort option `isort.lines-after-imports` with a value other than `-1`, `1` or `2` is incompatible with the formatter. To avoid unexpected behavior, we recommend setting the option to one of: `2`, `1`, or `-1` (default).\n    warning: The isort option `isort.lines-between-types` with a value greater than 1 is incompatible with the formatter. To avoid unexpected behavior, we recommend setting the option to one of: `1` or `0` (default).\n    warning: The isort option `isort.force-wrap-aliases` is incompatible with the formatter `format.skip-magic-trailing-comma=true` option. To avoid unexpected behavior, we recommend either setting `isort.force-wrap-aliases=false` or `format.skip-magic-trailing-comma=false`.\n    warning: The isort option `isort.split-on-trailing-comma` is incompatible with the formatter `format.skip-magic-trailing-comma=true` option. To avoid unexpected behavior, we recommend either setting `isort.split-on-trailing-comma=false` or `format.skip-magic-trailing-comma=false`.\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::conflicting_options_stdin", "test": "fn conflicting_options_stdin() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nindent-width = 2\n\n[lint]\nselect = [\"ALL\"]\nignore = [\"D203\", \"D212\"]\n\n[lint.isort]\nlines-after-imports = 3\nlines-between-types = 2\nforce-wrap-aliases = true\ncombine-as-imports = true\nsplit-on-trailing-comma = true\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\ndocstring-quotes = \"single\"\nmultiline-quotes = \"single\"\n\n[format]\nskip-magic-trailing-comma = true\nindent-style = \"tab\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .pass_stdin(r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    def say_hy(name: str):\n        print(f\"Hy {name}\")\n\n    ----- stderr -----\n    warning: The following rules may cause conflicts when used with the formatter: `COM812`, `ISC001`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.\n    warning: The `format.indent-style=\"tab\"` option is incompatible with `W191`, which lints against all uses of tabs. We recommend disabling these rules when using the formatter, which enforces a consistent indentation style. Alternatively, set the `format.indent-style` option to `\"space\"`.\n    warning: The `format.indent-style=\"tab\"` option is incompatible with `D206`, with requires space-based indentation. We recommend disabling these rules when using the formatter, which enforces a consistent indentation style. Alternatively, set the `format.indent-style` option to `\"space\"`.\n    warning: The `flake8-quotes.inline-quotes=\"single\"` option is incompatible with the formatter's `format.quote-style=\"double\"`. We recommend disabling `Q000` and `Q003` when using the formatter, which enforces a consistent quote style. Alternatively, set both options to either `\"single\"` or `\"double\"`.\n    warning: The `flake8-quotes.multiline-quotes=\"single\"` option is incompatible with the formatter. We recommend disabling `Q001` when using the formatter, which enforces double quotes for multiline strings. Alternatively, set the `flake8-quotes.multiline-quotes` option to `\"double\"`.`\n    warning: The `flake8-quotes.multiline-quotes=\"single\"` option is incompatible with the formatter. We recommend disabling `Q002` when using the formatter, which enforces double quotes for docstrings. Alternatively, set the `flake8-quotes.docstring-quotes` option to `\"double\"`.`\n    warning: The isort option `isort.lines-after-imports` with a value other than `-1`, `1` or `2` is incompatible with the formatter. To avoid unexpected behavior, we recommend setting the option to one of: `2`, `1`, or `-1` (default).\n    warning: The isort option `isort.lines-between-types` with a value greater than 1 is incompatible with the formatter. To avoid unexpected behavior, we recommend setting the option to one of: `1` or `0` (default).\n    warning: The isort option `isort.force-wrap-aliases` is incompatible with the formatter `format.skip-magic-trailing-comma=true` option. To avoid unexpected behavior, we recommend either setting `isort.force-wrap-aliases=false` or `format.skip-magic-trailing-comma=false`.\n    warning: The isort option `isort.split-on-trailing-comma` is incompatible with the formatter `format.skip-magic-trailing-comma=true` option. To avoid unexpected behavior, we recommend either setting `isort.split-on-trailing-comma=false` or `format.skip-magic-trailing-comma=false`.\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::valid_linter_options", "test": "fn valid_linter_options() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nselect = [\"ALL\"]\nignore = [\"D203\", \"D212\", \"COM812\", \"ISC001\"]\n\n[lint.isort]\nlines-after-imports = 2\nlines-between-types = 1\nforce-wrap-aliases = true\ncombine-as-imports = true\nsplit-on-trailing-comma = true\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\ndocstring-quotes = \"double\"\nmultiline-quotes = \"double\"\n\n[format]\nskip-magic-trailing-comma = false\nquote-style = \"single\"\n\"#,\n    )?;\n\n    let test_path = tempdir.path().join(\"test.py\");\n    fs::write(\n        &test_path,\n        r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--no-cache\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(test_path), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    1 file reformatted\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::all_rules_default_options", "test": "fn all_rules_default_options() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nselect = [\"ALL\"]\n\"#,\n    )?;\n\n    let test_path = tempdir.path().join(\"test.py\");\n    fs::write(\n        &test_path,\n        r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"format\", \"--no-cache\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(test_path), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    1 file reformatted\n\n    ----- stderr -----\n    warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`.\n    warning: `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.\n    warning: The following rules may cause conflicts when used with the formatter: `COM812`, `ISC001`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::test_diff_stdin_unformatted", "test": "fn test_diff_stdin_unformatted() {\n    let args = [\n        \"format\",\n        \"--isolated\",\n        \"--diff\",\n        \"-\",\n        \"--stdin-filename\",\n        \"unformatted.py\",\n    ];\n    let fixtures = Path::new(\"resources\").join(\"test\").join(\"fixtures\");\n    let unformatted = fs::read(fixtures.join(\"unformatted.py\")).unwrap();\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME)).args(args).pass_stdin(unformatted),\n        @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    --- unformatted.py\n    +++ unformatted.py\n    @@ -1,3 +1,3 @@\n     x = 1\n    -y=2\n    +y = 2\n     z = 3\n\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/format.rs::test_diff_stdin_formatted", "test": "fn test_diff_stdin_formatted() {\n    let args = [\"format\", \"--isolated\", \"--diff\", \"-\"];\n    let fixtures = Path::new(\"resources\").join(\"test\").join(\"fixtures\");\n    let unformatted = fs::read(fixtures.join(\"formatted.py\")).unwrap();\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME)).args(args).pass_stdin(unformatted),\n        @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_success", "test": "fn stdin_success() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .pass_stdin(\"\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_error", "test": "fn stdin_error() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .pass_stdin(\"import os\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:8: F401 [*] `os` imported but unused\n    Found 1 error.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_filename", "test": "fn stdin_filename() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args([\"--stdin-filename\", \"F401.py\"])\n        .pass_stdin(\"import os\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    F401.py:1:8: F401 [*] `os` imported but unused\n    Found 1 error.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_source_type_py", "test": "fn stdin_source_type_py() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args([\"--stdin-filename\", \"TCH.py\"])\n        .pass_stdin(\"import os\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    TCH.py:1:8: F401 [*] `os` imported but unused\n    Found 1 error.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_source_type_pyi", "test": "fn stdin_source_type_pyi() {\n    let args = [\"--stdin-filename\", \"TCH.pyi\", \"--select\", \"TCH\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"import os\\n\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_fix_py", "test": "fn stdin_fix_py() {\n    let args = [\"--fix\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"import os\\nimport sys\\n\\nprint(sys.version)\\n\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    import sys\n\n    print(sys.version)\n\n    ----- stderr -----\n    Found 1 error (1 fixed, 0 remaining).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_fix_jupyter", "test": "fn stdin_fix_jupyter() {\n    let args = [\"--fix\", \"--stdin-filename\", \"Jupyter.ipynb\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(r#\"{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"dccc687c-96e2-4604-b957-a8a89b5bec06\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"19e1b029-f516-4662-a9b9-623b93edac1a\",\n   \"metadata\": {},\n   \"source\": [\n    \"Foo\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"cdce7b92-b0fb-4c02-86f6-e233b26fa84f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import sys\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"e40b33d2-7fe4-46c5-bdf0-8802f3052565\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"1\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"a1899bc8-d46f-4ec0-b1d1-e1ca0f04bf60\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    {\n     \"cells\": [\n      {\n       \"cell_type\": \"code\",\n       \"execution_count\": 1,\n       \"id\": \"dccc687c-96e2-4604-b957-a8a89b5bec06\",\n       \"metadata\": {},\n       \"outputs\": [],\n       \"source\": []\n      },\n      {\n       \"cell_type\": \"markdown\",\n       \"id\": \"19e1b029-f516-4662-a9b9-623b93edac1a\",\n       \"metadata\": {},\n       \"source\": [\n        \"Foo\"\n       ]\n      },\n      {\n       \"cell_type\": \"code\",\n       \"execution_count\": 2,\n       \"id\": \"cdce7b92-b0fb-4c02-86f6-e233b26fa84f\",\n       \"metadata\": {},\n       \"outputs\": [],\n       \"source\": []\n      },\n      {\n       \"cell_type\": \"code\",\n       \"execution_count\": 3,\n       \"id\": \"e40b33d2-7fe4-46c5-bdf0-8802f3052565\",\n       \"metadata\": {},\n       \"outputs\": [\n        {\n         \"name\": \"stdout\",\n         \"output_type\": \"stream\",\n         \"text\": [\n          \"1\\n\"\n         ]\n        }\n       ],\n       \"source\": [\n        \"print(1)\"\n       ]\n      },\n      {\n       \"cell_type\": \"code\",\n       \"execution_count\": null,\n       \"id\": \"a1899bc8-d46f-4ec0-b1d1-e1ca0f04bf60\",\n       \"metadata\": {},\n       \"outputs\": [],\n       \"source\": []\n      }\n     ],\n     \"metadata\": {\n      \"kernelspec\": {\n       \"display_name\": \"Python 3 (ipykernel)\",\n       \"language\": \"python\",\n       \"name\": \"python3\"\n      },\n      \"language_info\": {\n       \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n       },\n       \"file_extension\": \".py\",\n       \"mimetype\": \"text/x-python\",\n       \"name\": \"python\",\n       \"nbconvert_exporter\": \"python\",\n       \"pygments_lexer\": \"ipython3\",\n       \"version\": \"3.11.2\"\n      }\n     },\n     \"nbformat\": 4,\n     \"nbformat_minor\": 5\n    }\n    ----- stderr -----\n    Found 2 errors (2 fixed, 0 remaining).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_override_parser_ipynb", "test": "fn stdin_override_parser_ipynb() {\n    let args = [\"--extension\", \"py:ipynb\", \"--stdin-filename\", \"Jupyter.py\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(r#\"{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"dccc687c-96e2-4604-b957-a8a89b5bec06\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"19e1b029-f516-4662-a9b9-623b93edac1a\",\n   \"metadata\": {},\n   \"source\": [\n    \"Foo\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"cdce7b92-b0fb-4c02-86f6-e233b26fa84f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import sys\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"e40b33d2-7fe4-46c5-bdf0-8802f3052565\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"1\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"a1899bc8-d46f-4ec0-b1d1-e1ca0f04bf60\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    Jupyter.py:cell 1:1:8: F401 [*] `os` imported but unused\n    Jupyter.py:cell 3:1:8: F401 [*] `sys` imported but unused\n    Found 2 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_override_parser_py", "test": "fn stdin_override_parser_py() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args([\"--extension\", \"ipynb:python\", \"--stdin-filename\", \"F401.ipynb\"])\n        .pass_stdin(\"import os\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    F401.ipynb:1:8: F401 [*] `os` imported but unused\n    Found 1 error.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_fix_when_not_fixable_should_still_print_contents", "test": "fn stdin_fix_when_not_fixable_should_still_print_contents() {\n    let args = [\"--fix\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"import os\\nimport sys\\n\\nif (1, 2):\\n     print(sys.version)\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    import sys\n\n    if (1, 2):\n         print(sys.version)\n\n    ----- stderr -----\n    -:3:4: F634 If test is a tuple, which is always `True`\n    Found 2 errors (1 fixed, 1 remaining).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_fix_when_no_issues_should_still_print_contents", "test": "fn stdin_fix_when_no_issues_should_still_print_contents() {\n    let args = [\"--fix\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"import sys\\n\\nprint(sys.version)\\n\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    import sys\n\n    print(sys.version)\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::stdin_format_jupyter", "test": "fn stdin_format_jupyter() {\n    let args = [\"format\", \"--stdin-filename\", \"Jupyter.ipynb\", \"--isolated\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(args)\n        .pass_stdin(r#\"{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"dccc687c-96e2-4604-b957-a8a89b5bec06\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"x=1\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"19e1b029-f516-4662-a9b9-623b93edac1a\",\n   \"metadata\": {},\n   \"source\": [\n    \"Foo\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"cdce7b92-b0fb-4c02-86f6-e233b26fa84f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def func():\\n\",\n    \"  pass\\n\",\n    \"print(1)\\n\",\n    \"import os\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.13\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n\"#), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    {\n     \"cells\": [\n      {\n       \"cell_type\": \"code\",\n       \"execution_count\": null,\n       \"id\": \"dccc687c-96e2-4604-b957-a8a89b5bec06\",\n       \"metadata\": {},\n       \"outputs\": [],\n       \"source\": [\n        \"x = 1\"\n       ]\n      },\n      {\n       \"cell_type\": \"markdown\",\n       \"id\": \"19e1b029-f516-4662-a9b9-623b93edac1a\",\n       \"metadata\": {},\n       \"source\": [\n        \"Foo\"\n       ]\n      },\n      {\n       \"cell_type\": \"code\",\n       \"execution_count\": null,\n       \"id\": \"cdce7b92-b0fb-4c02-86f6-e233b26fa84f\",\n       \"metadata\": {},\n       \"outputs\": [],\n       \"source\": [\n        \"def func():\\n\",\n        \"    pass\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"print(1)\\n\",\n        \"import os\"\n       ]\n      }\n     ],\n     \"metadata\": {\n      \"kernelspec\": {\n       \"display_name\": \"Python 3 (ipykernel)\",\n       \"language\": \"python\",\n       \"name\": \"python3\"\n      },\n      \"language_info\": {\n       \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n       },\n       \"file_extension\": \".py\",\n       \"mimetype\": \"text/x-python\",\n       \"name\": \"python\",\n       \"nbconvert_exporter\": \"python\",\n       \"pygments_lexer\": \"ipython3\",\n       \"version\": \"3.10.13\"\n      }\n     },\n     \"nbformat\": 4,\n     \"nbformat_minor\": 5\n    }\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::show_source", "test": "fn show_source() {\n    let args = [\"--show-source\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"l = 1\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `l`\n      |\n    1 | l = 1\n      | ^ E741\n      |\n\n    Found 1 error.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::explain_status_codes_f401", "test": "fn explain_status_codes_f401() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME)).args([\"--explain\", \"F401\"]));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::explain_status_codes_ruf404", "test": "fn explain_status_codes_ruf404() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME)).args([\"--explain\", \"RUF404\"]), @r###\"\n    success: false\n    exit_code: 2\n    ----- stdout -----\n\n    ----- stderr -----\n    error: invalid value 'RUF404' for '[RULE]'\n\n    For more information, try '--help'.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::show_statistics", "test": "fn show_statistics() {\n    let args = [\"--select\", \"F401\", \"--statistics\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"import sys\\nimport os\\n\\nprint(os.getuid())\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    1    F401    [*] `sys` imported but unused\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::nursery_prefix", "test": "fn nursery_prefix() {\n    // `--select E` should detect E741, but not E225, which is in the nursery.\n    let args = [\"--select\", \"E\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `I`\n    Found 1 error.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::nursery_all", "test": "fn nursery_all() {\n    // `--select ALL` should detect E741, but not E225, which is in the nursery.\n    let args = [\"--select\", \"ALL\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `I`\n    -:1:1: D100 Missing docstring in public module\n    Found 2 errors.\n\n    ----- stderr -----\n    warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`.\n    warning: `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::nursery_direct", "test": "fn nursery_direct() {\n    // `--select E225` should detect E225.\n    let args = [\"--select\", \"E225\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:2: E225 Missing whitespace around operator\n    Found 1 error.\n\n    ----- stderr -----\n    warning: Selection of nursery rule `E225` without the `--preview` flag is deprecated.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::nursery_group_selector", "test": "fn nursery_group_selector() {\n    // Only nursery rules should be detected e.g. E225 and a warning should be displayed\n    let args = [\"--select\", \"NURSERY\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: CPY001 Missing copyright notice at top of file\n    -:1:2: E225 Missing whitespace around operator\n    Found 2 errors.\n\n    ----- stderr -----\n    warning: The `NURSERY` selector has been deprecated. Use the `--preview` flag instead.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::nursery_group_selector_preview_enabled", "test": "fn nursery_group_selector_preview_enabled() {\n    // Only nursery rules should be detected e.g. E225 and a warning should be displayed\n    let args = [\"--select\", \"NURSERY\", \"--preview\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: CPY001 Missing copyright notice at top of file\n    -:1:2: E225 [*] Missing whitespace around operator\n    Found 2 errors.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    warning: The `NURSERY` selector has been deprecated.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_enabled_prefix", "test": "fn preview_enabled_prefix() {\n    // E741 and E225 (preview) should both be detected\n    let args = [\"--select\", \"E\", \"--preview\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `I`\n    -:1:2: E225 [*] Missing whitespace around operator\n    Found 2 errors.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_enabled_all", "test": "fn preview_enabled_all() {\n    let args = [\"--select\", \"ALL\", \"--preview\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `I`\n    -:1:1: D100 Missing docstring in public module\n    -:1:1: CPY001 Missing copyright notice at top of file\n    -:1:2: E225 [*] Missing whitespace around operator\n    Found 4 errors.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`.\n    warning: `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_enabled_direct", "test": "fn preview_enabled_direct() {\n    // E225 should be detected without warning\n    let args = [\"--select\", \"E225\", \"--preview\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:2: E225 [*] Missing whitespace around operator\n    Found 1 error.\n    [*] 1 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_disabled_direct", "test": "fn preview_disabled_direct() {\n    // FURB145 is preview not nursery so selecting should be empty\n    let args = [\"--select\", \"FURB145\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"a = l[:]\\n\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    warning: Selection `FURB145` has no effect because the `--preview` flag was not included.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_disabled_prefix_empty", "test": "fn preview_disabled_prefix_empty() {\n    // Warns that the selection is empty since all of the CPY rules are in preview\n    let args = [\"--select\", \"CPY\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    warning: Selection `CPY` has no effect because the `--preview` flag was not included.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_disabled_does_not_warn_for_empty_ignore_selections", "test": "fn preview_disabled_does_not_warn_for_empty_ignore_selections() {\n    // Does not warn that the selection is empty since the user is not trying to enable the rule\n    let args = [\"--ignore\", \"CPY\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `I`\n    Found 1 error.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_disabled_does_not_warn_for_empty_fixable_selections", "test": "fn preview_disabled_does_not_warn_for_empty_fixable_selections() {\n    // Does not warn that the selection is empty since the user is not trying to enable the rule\n    let args = [\"--fixable\", \"CPY\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:1: E741 Ambiguous variable name: `I`\n    Found 1 error.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_group_selector", "test": "fn preview_group_selector() {\n    // `--select PREVIEW` should error (selector was removed)\n    let args = [\"--select\", \"PREVIEW\", \"--preview\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 2\n    ----- stdout -----\n\n    ----- stderr -----\n    error: invalid value 'PREVIEW' for '--select <RULE_CODE>'\n\n    For more information, try '--help'.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::preview_enabled_group_ignore", "test": "fn preview_enabled_group_ignore() {\n    // `--select E --ignore PREVIEW` should detect E741 and E225, which is in preview but \"E\" is more specific.\n    let args = [\"--select\", \"E\", \"--ignore\", \"PREVIEW\", \"--preview\"];\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .args(args)\n        .pass_stdin(\"I=42\\n\"), @r###\"\n    success: false\n    exit_code: 2\n    ----- stdout -----\n\n    ----- stderr -----\n    error: invalid value 'PREVIEW' for '--ignore <RULE_CODE>'\n\n    For more information, try '--help'.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::unreadable_pyproject_toml", "test": "fn unreadable_pyproject_toml() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let pyproject_toml = tempdir.path().join(\"pyproject.toml\");\n    // Create an empty file with 000 permissions\n    fs::OpenOptions::new()\n        .create(true)\n        .write(true)\n        .mode(0o000)\n        .open(pyproject_toml)?;\n\n    // Don't `--isolated` since the configuration discovery is where the error happens\n    let args = Args::parse_from([\"\", \"check\", \"--no-cache\", tempdir.path().to_str().unwrap()]);\n    let err = run(args).err().context(\"Unexpected success\")?;\n    assert_eq!(\n        err.chain()\n            .map(std::string::ToString::to_string)\n            .collect::<Vec<_>>(),\n        vec![\"Permission denied (os error 13)\".to_string()],\n    );\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::unreadable_dir", "test": "fn unreadable_dir() -> Result<()> {\n    // Create a directory with 000 (not iterable/readable) permissions\n    let tempdir = TempDir::new()?;\n    let unreadable_dir = tempdir.path().join(\"unreadable_dir\");\n    fs::create_dir(&unreadable_dir)?;\n    fs::set_permissions(&unreadable_dir, Permissions::from_mode(0o000))?;\n\n    // We (currently?) have to use a subcommand to check exit status (currently wrong) and logging\n    // output\n    // TODO(konstin): This should be a failure, but we currently can't track that\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"--no-cache\", \"--isolated\"])\n        .arg(&unreadable_dir), @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    warning: Encountered error: Permission denied (os error 13)\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_hints_hidden_unsafe_fixes", "test": "fn check_hints_hidden_unsafe_fixes() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\n            \"-\",\n            \"--output-format=text\",\n            \"--isolated\",\n            \"--select\",\n            \"F601,UP034\",\n            \"--no-cache\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n        @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    -:2:7: UP034 [*] Avoid extraneous parentheses\n    Found 2 errors.\n    [*] 1 fixable with the `--fix` option (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_hints_hidden_unsafe_fixes_with_no_safe_fixes", "test": "fn check_hints_hidden_unsafe_fixes_with_no_safe_fixes() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"-\", \"--output-format\", \"text\", \"--no-cache\", \"--isolated\", \"--select\", \"F601\"])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\n\"),\n        @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    Found 1 error.\n    No fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_shows_unsafe_fixes_with_opt_in", "test": "fn check_shows_unsafe_fixes_with_opt_in() {\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\n            \"-\",\n            \"--output-format=text\",\n            \"--isolated\",\n            \"--select\",\n            \"F601,UP034\",\n            \"--no-cache\",\n            \"--unsafe-fixes\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n        @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 [*] Dictionary key literal `'a'` repeated\n    -:2:7: UP034 [*] Avoid extraneous parentheses\n    Found 2 errors.\n    [*] 2 fixable with the --fix option.\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_applies_safe_fixes_by_default", "test": "fn fix_applies_safe_fixes_by_default() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"F601,UP034\",\n                \"--fix\",\n            ])\n            .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    x = {'a': 1, 'a': 1}\n    print('foo')\n\n    ----- stderr -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    Found 2 errors (1 fixed, 1 remaining).\n    No fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_applies_unsafe_fixes_with_opt_in", "test": "fn fix_applies_unsafe_fixes_with_opt_in() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"F601,UP034\",\n                \"--fix\",\n                \"--unsafe-fixes\",\n            ])\n            .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    x = {'a': 1}\n    print('foo')\n\n    ----- stderr -----\n    Found 2 errors (2 fixed, 0 remaining).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_does_not_apply_display_only_fixes", "test": "fn fix_does_not_apply_display_only_fixes() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"B006\",\n                \"--fix\",\n            ])\n            .pass_stdin(\"def add_to_list(item, some_list=[]): ...\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    def add_to_list(item, some_list=[]): ...\n    ----- stderr -----\n    -:1:33: B006 Do not use mutable data structures for argument defaults\n    Found 1 error.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_does_not_apply_display_only_fixes_with_unsafe_fixes_enabled", "test": "fn fix_does_not_apply_display_only_fixes_with_unsafe_fixes_enabled() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"B006\",\n                \"--fix\",\n                \"--unsafe-fixes\",\n            ])\n            .pass_stdin(\"def add_to_list(item, some_list=[]): ...\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    def add_to_list(item, some_list=[]): ...\n    ----- stderr -----\n    -:1:33: B006 Do not use mutable data structures for argument defaults\n    Found 1 error.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_only_unsafe_fixes_available", "test": "fn fix_only_unsafe_fixes_available() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"F601\",\n                \"--fix\",\n            ])\n            .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    x = {'a': 1, 'a': 1}\n    print(('foo'))\n\n    ----- stderr -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    Found 1 error.\n    No fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_only_flag_applies_safe_fixes_by_default", "test": "fn fix_only_flag_applies_safe_fixes_by_default() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"F601,UP034\",\n                \"--fix-only\",\n            ])\n            .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    x = {'a': 1, 'a': 1}\n    print('foo')\n\n    ----- stderr -----\n    Fixed 1 error (1 additional fix available with `--unsafe-fixes`).\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::fix_only_flag_applies_unsafe_fixes_with_opt_in", "test": "fn fix_only_flag_applies_unsafe_fixes_with_opt_in() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"F601,UP034\",\n                \"--fix-only\",\n                \"--unsafe-fixes\",\n            ])\n            .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n    x = {'a': 1}\n    print('foo')\n\n    ----- stderr -----\n    Fixed 2 errors.\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::diff_shows_safe_fixes_by_default", "test": "fn diff_shows_safe_fixes_by_default() {\n    assert_cmd_snapshot!(\n    Command::new(get_cargo_bin(BIN_NAME))\n        .args([\n            \"-\",\n            \"--output-format\",\n            \"text\",\n            \"--isolated\",\n            \"--no-cache\",\n            \"--select\",\n            \"F601,UP034\",\n            \"--diff\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n        @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    @@ -1,2 +1,2 @@\n     x = {'a': 1, 'a': 1}\n    -print(('foo'))\n    +print('foo')\n\n\n    ----- stderr -----\n    Would fix 1 error (1 additional fix available with `--unsafe-fixes`).\n    \"###\n    );\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::diff_shows_unsafe_fixes_with_opt_in", "test": "fn diff_shows_unsafe_fixes_with_opt_in() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"F601,UP034\",\n                \"--diff\",\n                \"--unsafe-fixes\",\n            ])\n            .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    @@ -1,2 +1,2 @@\n    -x = {'a': 1, 'a': 1}\n    -print(('foo'))\n    +x = {'a': 1}\n    +print('foo')\n\n\n    ----- stderr -----\n    Would fix 2 errors.\n    \"###\n    );\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::diff_does_not_show_display_only_fixes_with_unsafe_fixes_enabled", "test": "fn diff_does_not_show_display_only_fixes_with_unsafe_fixes_enabled() {\n    assert_cmd_snapshot!(\n        Command::new(get_cargo_bin(BIN_NAME))\n            .args([\n                \"-\",\n                \"--output-format\",\n                \"text\",\n                \"--isolated\",\n                \"--no-cache\",\n                \"--select\",\n                \"B006\",\n                \"--diff\",\n                \"--unsafe-fixes\",\n            ])\n            .pass_stdin(\"def add_to_list(item, some_list=[]): ...\"),\n            @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    \"###);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::diff_only_unsafe_fixes_available", "test": "fn diff_only_unsafe_fixes_available() {\n    assert_cmd_snapshot!(\n    Command::new(get_cargo_bin(BIN_NAME))\n        .args([\n            \"-\",\n            \"--output-format\",\n            \"text\",\n            \"--isolated\",\n            \"--no-cache\",\n            \"--select\",\n            \"F601\",\n            \"--diff\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n        @r###\"\n    success: true\n    exit_code: 0\n    ----- stdout -----\n\n    ----- stderr -----\n    No errors would be fixed (1 fix available with `--unsafe-fixes`).\n    \"###\n    );\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_extend_unsafe_fixes", "test": "fn check_extend_unsafe_fixes() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nextend-unsafe-fixes = [\"UP034\"]\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"check\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .args([\n            \"--output-format\",\n            \"text\",\n            \"--no-cache\",\n            \"--select\",\n            \"F601,UP034\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    -:2:7: UP034 Avoid extraneous parentheses\n    Found 2 errors.\n    No fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n\n    ----- stderr -----\n    \"###);\n\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_extend_safe_fixes", "test": "fn check_extend_safe_fixes() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nextend-safe-fixes = [\"F601\"]\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"check\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .args([\n            \"--output-format\",\n            \"text\",\n            \"--no-cache\",\n            \"--select\",\n            \"F601,UP034\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 [*] Dictionary key literal `'a'` repeated\n    -:2:7: UP034 [*] Avoid extraneous parentheses\n    Found 2 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_extend_unsafe_fixes_conflict_with_extend_safe_fixes", "test": "fn check_extend_unsafe_fixes_conflict_with_extend_safe_fixes() -> Result<()> {\n    // Adding a rule to both options should result in it being treated as unsafe\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nextend-unsafe-fixes = [\"UP034\"]\nextend-safe-fixes = [\"UP034\"]\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"check\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .args([\n            \"--output-format\",\n            \"text\",\n            \"--no-cache\",\n            \"--select\",\n            \"F601,UP034\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    -:2:7: UP034 Avoid extraneous parentheses\n    Found 2 errors.\n    No fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n\n    ----- stderr -----\n    \"###);\n\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/integration_test.rs::check_extend_unsafe_fixes_conflict_with_extend_safe_fixes_by_specificity", "test": "fn check_extend_unsafe_fixes_conflict_with_extend_safe_fixes_by_specificity() -> Result<()> {\n    // Adding a rule to one option with a more specific selector should override the other option\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\ntarget-version = \"py310\"\n[lint]\nextend-unsafe-fixes = [\"UP\", \"UP034\"]\nextend-safe-fixes = [\"UP03\"]\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args([\"check\", \"--config\"])\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .args([\n            \"--output-format\",\n            \"text\",\n            \"--no-cache\",\n            \"--select\",\n            \"F601,UP018,UP034,UP038\",\n        ])\n        .pass_stdin(\"x = {'a': 1, 'a': 1}\\nprint(('foo'))\\nprint(str('foo'))\\nisinstance(x, (int, str))\\n\"),\n            @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:14: F601 Dictionary key literal `'a'` repeated\n    -:2:7: UP034 Avoid extraneous parentheses\n    -:3:7: UP018 Unnecessary `str` call (rewrite as a literal)\n    -:4:1: UP038 [*] Use `X | Y` in `isinstance` call instead of `(X, Y)`\n    Found 4 errors.\n    [*] 1 fixable with the `--fix` option (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n\n    ----- stderr -----\n    \"###);\n\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::top_level_options", "test": "fn top_level_options() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-select = [\"B\", \"Q\"]\n\n[flake8-quotes]\ninline-quotes = \"single\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .arg(\"--config\")\n        .arg(&ruff_toml)\n        .args([\"--stdin-filename\", \"test.py\"])\n        .arg(\"-\")\n        .pass_stdin(r#\"a = \"abcba\".strip(\"aba\")\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    test.py:1:5: Q000 [*] Double quotes found but single quotes preferred\n    test.py:1:5: B005 Using `.strip()` with multi-character strings is misleading\n    test.py:1:19: Q000 [*] Double quotes found but single quotes preferred\n    Found 3 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::lint_options", "test": "fn lint_options() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nextend-select = [\"B\", \"Q\"]\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .arg(\"--config\")\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .pass_stdin(r#\"a = \"abcba\".strip(\"aba\")\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:5: Q000 [*] Double quotes found but single quotes preferred\n    -:1:5: B005 Using `.strip()` with multi-character strings is misleading\n    -:1:19: Q000 [*] Double quotes found but single quotes preferred\n    Found 3 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::mixed_levels", "test": "fn mixed_levels() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-select = [\"B\", \"Q\"]\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .arg(\"--config\")\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .pass_stdin(r#\"a = \"abcba\".strip(\"aba\")\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:5: Q000 [*] Double quotes found but single quotes preferred\n    -:1:5: B005 Using `.strip()` with multi-character strings is misleading\n    -:1:19: Q000 [*] Double quotes found but single quotes preferred\n    Found 3 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::precedence", "test": "fn precedence() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\n[lint]\nextend-select = [\"B\", \"Q\"]\n\n[flake8-quotes]\ninline-quotes = \"double\"\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .arg(\"--config\")\n        .arg(&ruff_toml)\n        .arg(\"-\")\n        .pass_stdin(r#\"a = \"abcba\".strip(\"aba\")\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    -:1:5: Q000 [*] Double quotes found but single quotes preferred\n    -:1:5: B005 Using `.strip()` with multi-character strings is misleading\n    -:1:19: Q000 [*] Double quotes found but single quotes preferred\n    Found 3 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::exclude", "test": "fn exclude() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-select = [\"B\", \"Q\"]\nextend-exclude = [\"out\"]\n\n[lint]\nexclude = [\"test.py\", \"generated.py\"]\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\n\"#,\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"main.py\"),\n        r#\"\nfrom test import say_hy\n\nif __name__ == \"__main__\":\n    say_hy(\"dear Ruff contributor\")\n\"#,\n    )?;\n\n    // Excluded file but passed to the CLI directly, should be linted\n    let test_path = tempdir.path().join(\"test.py\");\n    fs::write(\n        &test_path,\n        r#\"\ndef say_hy(name: str):\n        print(f\"Hy {name}\")\"#,\n    )?;\n\n    fs::write(\n        tempdir.path().join(\"generated.py\"),\n        r#\"NUMBERS = [\n     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n    10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n]\nOTHER = \"OTHER\"\n\"#,\n    )?;\n\n    let out_dir = tempdir.path().join(\"out\");\n    fs::create_dir(&out_dir)?;\n\n    fs::write(out_dir.join(\"a.py\"), r#\"a = \"a\"\"#)?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .arg(\"check\")\n        .args(STDIN_BASE_OPTIONS)\n        .args([\"--config\", &ruff_toml.file_name().unwrap().to_string_lossy()])\n        // Explicitly pass test.py, should be linted regardless of it being excluded by lint.exclude\n        .arg(test_path.file_name().unwrap())\n        // Lint all other files in the directory, should respect the `exclude` and `lint.exclude` options\n        .arg(\".\"), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    main.py:4:16: Q000 [*] Double quotes found but single quotes preferred\n    main.py:5:12: Q000 [*] Double quotes found but single quotes preferred\n    test.py:3:15: Q000 [*] Double quotes found but single quotes preferred\n    Found 3 errors.\n    [*] 3 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::exclude_stdin", "test": "fn exclude_stdin() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nextend-select = [\"B\", \"Q\"]\n\n[lint]\nexclude = [\"generated.py\"]\n\n[lint.flake8-quotes]\ninline-quotes = \"single\"\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .current_dir(tempdir.path())\n        .arg(\"check\")\n        .args(STDIN_BASE_OPTIONS)\n        .args([\"--config\", &ruff_toml.file_name().unwrap().to_string_lossy()])\n        .args([\"--stdin-filename\", \"generated.py\"])\n        .arg(\"-\")\n        .pass_stdin(r#\"\nfrom test import say_hy\n\nif __name__ == \"__main__\":\n    say_hy(\"dear Ruff contributor\")\n\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    generated.py:4:16: Q000 [*] Double quotes found but single quotes preferred\n    generated.py:5:12: Q000 [*] Double quotes found but single quotes preferred\n    Found 2 errors.\n    [*] 2 fixable with the `--fix` option.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_cli/tests/lint.rs::line_too_long_width_override", "test": "fn line_too_long_width_override() -> Result<()> {\n    let tempdir = TempDir::new()?;\n    let ruff_toml = tempdir.path().join(\"ruff.toml\");\n    fs::write(\n        &ruff_toml,\n        r#\"\nline-length = 80\nselect = [\"E501\"]\n\n[pycodestyle]\nmax-line-length = 100\n\"#,\n    )?;\n\n    assert_cmd_snapshot!(Command::new(get_cargo_bin(BIN_NAME))\n        .args(STDIN_BASE_OPTIONS)\n        .arg(\"--config\")\n        .arg(&ruff_toml)\n        .args([\"--stdin-filename\", \"test.py\"])\n        .arg(\"-\")\n        .pass_stdin(r#\"\n# longer than 80, but less than 100\n_ = \"---------------------------------------------------------------------------亜亜亜亜亜亜\"\n# longer than 100\n_ = \"---------------------------------------------------------------------------亜亜亜亜亜亜亜亜亜亜亜亜亜亜\"\n\"#), @r###\"\n    success: false\n    exit_code: 1\n    ----- stdout -----\n    test.py:5:91: E501 Line too long (109 > 100)\n    Found 1 error.\n\n    ----- stderr -----\n    \"###);\n    Ok(())\n}\n\n#[test]\nfn per_file_ignores_stdin() ->", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_python_ast/tests/parenthesize.rs::test_parenthesized_name", "test": "fn test_parenthesized_name() {\n    let source_code = r#\"(x) + 1\"#;\n    let expr = parse_expression(source_code, \"<filename>\").unwrap();\n\n    let bin_op = expr.as_bin_op_expr().unwrap();\n    let name = bin_op.left.as_ref();\n\n    let parenthesized = parenthesized_range(\n        name.into(),\n        bin_op.into(),\n        &CommentRanges::default(),\n        source_code,\n    );\n    assert_eq!(parenthesized, Some(TextRange::new(0.into(), 3.into())));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_python_ast/tests/parenthesize.rs::test_parenthesized_argument", "test": "fn test_parenthesized_argument() {\n    let source_code = r#\"f((a))\"#;\n    let expr = parse_expression(source_code, \"<filename>\").unwrap();\n\n    let call = expr.as_call_expr().unwrap();\n    let arguments = &call.arguments;\n    let argument = arguments.args.first().unwrap();\n\n    let parenthesized = parenthesized_range(\n        argument.into(),\n        arguments.into(),\n        &CommentRanges::default(),\n        source_code,\n    );\n    assert_eq!(parenthesized, Some(TextRange::new(2.into(), 5.into())));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_python_ast/tests/parenthesize.rs::test_parenthesized_tuple_member", "test": "fn test_parenthesized_tuple_member() {\n    let source_code = r#\"(a, (b))\"#;\n    let expr = parse_expression(source_code, \"<filename>\").unwrap();\n\n    let tuple = expr.as_tuple_expr().unwrap();\n    let member = tuple.elts.last().unwrap();\n\n    let parenthesized = parenthesized_range(\n        member.into(),\n        tuple.into(),\n        &CommentRanges::default(),\n        source_code,\n    );\n    assert_eq!(parenthesized, Some(TextRange::new(4.into(), 7.into())));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_python_ast/tests/parenthesize.rs::test_twice_parenthesized_name", "test": "fn test_twice_parenthesized_name() {\n    let source_code = r#\"((x)) + 1\"#;\n    let expr = parse_expression(source_code, \"<filename>\").unwrap();\n\n    let bin_op = expr.as_bin_op_expr().unwrap();\n    let name = bin_op.left.as_ref();\n\n    let parenthesized = parenthesized_range(\n        name.into(),\n        bin_op.into(),\n        &CommentRanges::default(),\n        source_code,\n    );\n    assert_eq!(parenthesized, Some(TextRange::new(0.into(), 5.into())));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_python_ast/tests/parenthesize.rs::test_twice_parenthesized_argument", "test": "fn test_twice_parenthesized_argument() {\n    let source_code = r#\"f(((a + 1)))\"#;\n    let expr = parse_expression(source_code, \"<filename>\").unwrap();\n\n    let call = expr.as_call_expr().unwrap();\n    let arguments = &call.arguments;\n    let argument = arguments.args.first().unwrap();\n\n    let parenthesized = parenthesized_range(\n        argument.into(),\n        arguments.into(),\n        &CommentRanges::default(),\n        source_code,\n    );\n    assert_eq!(parenthesized, Some(TextRange::new(2.into(), 11.into())));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_text_size/tests/main.rs::sum", "test": "fn sum() {\n    let xs: Vec<TextSize> = vec![size(0), size(1), size(2)];\n    assert_eq!(xs.iter().sum::<TextSize>(), size(3));\n    assert_eq!(xs.into_iter().sum::<TextSize>(), size(3));\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_text_size/tests/main.rs::intersect", "test": "fn intersect() {\n    assert_eq!(range(1..2).intersect(range(2..3)), Some(range(2..2)));\n    assert_eq!(range(1..5).intersect(range(2..3)), Some(range(2..3)));\n    assert_eq!(range(1..2).intersect(range(3..4)), None);\n}", "error": "Not Definition Found"}
{"test_id": "astral-sh-ruff/astral-sh-ruff-1a6898a/crates/ruff_text_size/tests/main.rs::cover", "test": "fn cover() {\n    assert_eq!(range(1..2).cover(range(2..3)), range(1..3));\n    assert_eq!(range(1..5).cover(range(2..3)), range(1..5));\n    assert_eq!(range(1..2).cover(range(4..5)), range(1..5));\n}", "error": "Not Definition Found"}
